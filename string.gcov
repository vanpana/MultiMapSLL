        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/string
        -:    0:Graph:./CMakeFiles/Multimap.dir/main.gcno
        -:    0:Data:./CMakeFiles/Multimap.dir/main.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===--------------------------- string -----------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is distributed under the University of Illinois Open Source
        -:    7:// License. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_STRING
        -:   12:#define _LIBCPP_STRING
        -:   13:
        -:   14:/*
        -:   15:    string synopsis
        -:   16:
        -:   17:namespace std
        -:   18:{
        -:   19:
        -:   20:template <class stateT>
        -:   21:class fpos
        -:   22:{
        -:   23:private:
        -:   24:    stateT st;
        -:   25:public:
        -:   26:    fpos(streamoff = streamoff());
        -:   27:
        -:   28:    operator streamoff() const;
        -:   29:
        -:   30:    stateT state() const;
        -:   31:    void state(stateT);
        -:   32:
        -:   33:    fpos& operator+=(streamoff);
        -:   34:    fpos  operator+ (streamoff) const;
        -:   35:    fpos& operator-=(streamoff);
        -:   36:    fpos  operator- (streamoff) const;
        -:   37:};
        -:   38:
        -:   39:template <class stateT> streamoff operator-(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   40:
        -:   41:template <class stateT> bool operator==(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   42:template <class stateT> bool operator!=(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   43:
        -:   44:template <class charT>
        -:   45:struct char_traits
        -:   46:{
        -:   47:    typedef charT     char_type;
        -:   48:    typedef ...       int_type;
        -:   49:    typedef streamoff off_type;
        -:   50:    typedef streampos pos_type;
        -:   51:    typedef mbstate_t state_type;
        -:   52:
        -:   53:    static void assign(char_type& c1, const char_type& c2) noexcept;
        -:   54:    static constexpr bool eq(char_type c1, char_type c2) noexcept;
        -:   55:    static constexpr bool lt(char_type c1, char_type c2) noexcept;
        -:   56:
        -:   57:    static int              compare(const char_type* s1, const char_type* s2, size_t n);
        -:   58:    static size_t           length(const char_type* s);
        -:   59:    static const char_type* find(const char_type* s, size_t n, const char_type& a);
        -:   60:    static char_type*       move(char_type* s1, const char_type* s2, size_t n);
        -:   61:    static char_type*       copy(char_type* s1, const char_type* s2, size_t n);
        -:   62:    static char_type*       assign(char_type* s, size_t n, char_type a);
        -:   63:
        -:   64:    static constexpr int_type  not_eof(int_type c) noexcept;
        -:   65:    static constexpr char_type to_char_type(int_type c) noexcept;
        -:   66:    static constexpr int_type  to_int_type(char_type c) noexcept;
        -:   67:    static constexpr bool      eq_int_type(int_type c1, int_type c2) noexcept;
        -:   68:    static constexpr int_type  eof() noexcept;
        -:   69:};
        -:   70:
        -:   71:template <> struct char_traits<char>;
        -:   72:template <> struct char_traits<wchar_t>;
        -:   73:
        -:   74:template<class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >
        -:   75:class basic_string
        -:   76:{
        -:   77:public:
        -:   78:// types:
        -:   79:    typedef traits traits_type;
        -:   80:    typedef typename traits_type::char_type value_type;
        -:   81:    typedef Allocator allocator_type;
        -:   82:    typedef typename allocator_type::size_type size_type;
        -:   83:    typedef typename allocator_type::difference_type difference_type;
        -:   84:    typedef typename allocator_type::reference reference;
        -:   85:    typedef typename allocator_type::const_reference const_reference;
        -:   86:    typedef typename allocator_type::pointer pointer;
        -:   87:    typedef typename allocator_type::const_pointer const_pointer;
        -:   88:    typedef implementation-defined iterator;
        -:   89:    typedef implementation-defined const_iterator;
        -:   90:    typedef std::reverse_iterator<iterator> reverse_iterator;
        -:   91:    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        -:   92:
        -:   93:    static const size_type npos = -1;
        -:   94:
        -:   95:    basic_string()
        -:   96:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:   97:    explicit basic_string(const allocator_type& a);
        -:   98:    basic_string(const basic_string& str);
        -:   99:    basic_string(basic_string&& str)
        -:  100:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:  101:    basic_string(const basic_string& str, size_type pos, size_type n = npos,
        -:  102:                 const allocator_type& a = allocator_type());
        -:  103:    basic_string(const value_type* s, const allocator_type& a = allocator_type());
        -:  104:    basic_string(const value_type* s, size_type n, const allocator_type& a = allocator_type());
        -:  105:    basic_string(size_type n, value_type c, const allocator_type& a = allocator_type());
        -:  106:    template<class InputIterator>
        -:  107:        basic_string(InputIterator begin, InputIterator end,
        -:  108:                     const allocator_type& a = allocator_type());
        -:  109:    basic_string(initializer_list<value_type>, const Allocator& = Allocator());
        -:  110:    basic_string(const basic_string&, const Allocator&);
        -:  111:    basic_string(basic_string&&, const Allocator&);
        -:  112:
        -:  113:    ~basic_string();
        -:  114:
        -:  115:    basic_string& operator=(const basic_string& str);
        -:  116:    basic_string& operator=(basic_string&& str)
        -:  117:        noexcept(
        -:  118:             allocator_type::propagate_on_container_move_assignment::value &&
        -:  119:             is_nothrow_move_assignable<allocator_type>::value);
        -:  120:    basic_string& operator=(const value_type* s);
        -:  121:    basic_string& operator=(value_type c);
        -:  122:    basic_string& operator=(initializer_list<value_type>);
        -:  123:
        -:  124:    iterator       begin() noexcept;
        -:  125:    const_iterator begin() const noexcept;
        -:  126:    iterator       end() noexcept;
        -:  127:    const_iterator end() const noexcept;
        -:  128:
        -:  129:    reverse_iterator       rbegin() noexcept;
        -:  130:    const_reverse_iterator rbegin() const noexcept;
        -:  131:    reverse_iterator       rend() noexcept;
        -:  132:    const_reverse_iterator rend() const noexcept;
        -:  133:
        -:  134:    const_iterator         cbegin() const noexcept;
        -:  135:    const_iterator         cend() const noexcept;
        -:  136:    const_reverse_iterator crbegin() const noexcept;
        -:  137:    const_reverse_iterator crend() const noexcept;
        -:  138:
        -:  139:    size_type size() const noexcept;
        -:  140:    size_type length() const noexcept;
        -:  141:    size_type max_size() const noexcept;
        -:  142:    size_type capacity() const noexcept;
        -:  143:
        -:  144:    void resize(size_type n, value_type c);
        -:  145:    void resize(size_type n);
        -:  146:
        -:  147:    void reserve(size_type res_arg = 0);
        -:  148:    void shrink_to_fit();
        -:  149:    void clear() noexcept;
        -:  150:    bool empty() const noexcept;
        -:  151:
        -:  152:    const_reference operator[](size_type pos) const;
        -:  153:    reference       operator[](size_type pos);
        -:  154:
        -:  155:    const_reference at(size_type n) const;
        -:  156:    reference       at(size_type n);
        -:  157:
        -:  158:    basic_string& operator+=(const basic_string& str);
        -:  159:    basic_string& operator+=(const value_type* s);
        -:  160:    basic_string& operator+=(value_type c);
        -:  161:    basic_string& operator+=(initializer_list<value_type>);
        -:  162:
        -:  163:    basic_string& append(const basic_string& str);
        -:  164:    basic_string& append(const basic_string& str, size_type pos, size_type n=npos); //C++14
        -:  165:    basic_string& append(const value_type* s, size_type n);
        -:  166:    basic_string& append(const value_type* s);
        -:  167:    basic_string& append(size_type n, value_type c);
        -:  168:    template<class InputIterator>
        -:  169:        basic_string& append(InputIterator first, InputIterator last);
        -:  170:    basic_string& append(initializer_list<value_type>);
        -:  171:
        -:  172:    void push_back(value_type c);
        -:  173:    void pop_back();
        -:  174:    reference       front();
        -:  175:    const_reference front() const;
        -:  176:    reference       back();
        -:  177:    const_reference back() const;
        -:  178:
        -:  179:    basic_string& assign(const basic_string& str);
        -:  180:    basic_string& assign(basic_string&& str);
        -:  181:    basic_string& assign(const basic_string& str, size_type pos, size_type n=npos); // C++14
        -:  182:    basic_string& assign(const value_type* s, size_type n);
        -:  183:    basic_string& assign(const value_type* s);
        -:  184:    basic_string& assign(size_type n, value_type c);
        -:  185:    template<class InputIterator>
        -:  186:        basic_string& assign(InputIterator first, InputIterator last);
        -:  187:    basic_string& assign(initializer_list<value_type>);
        -:  188:
        -:  189:    basic_string& insert(size_type pos1, const basic_string& str);
        -:  190:    basic_string& insert(size_type pos1, const basic_string& str,
        -:  191:                         size_type pos2, size_type n);
        -:  192:    basic_string& insert(size_type pos, const value_type* s, size_type n=npos); //C++14
        -:  193:    basic_string& insert(size_type pos, const value_type* s);
        -:  194:    basic_string& insert(size_type pos, size_type n, value_type c);
        -:  195:    iterator      insert(const_iterator p, value_type c);
        -:  196:    iterator      insert(const_iterator p, size_type n, value_type c);
        -:  197:    template<class InputIterator>
        -:  198:        iterator insert(const_iterator p, InputIterator first, InputIterator last);
        -:  199:    iterator      insert(const_iterator p, initializer_list<value_type>);
        -:  200:
        -:  201:    basic_string& erase(size_type pos = 0, size_type n = npos);
        -:  202:    iterator      erase(const_iterator position);
        -:  203:    iterator      erase(const_iterator first, const_iterator last);
        -:  204:
        -:  205:    basic_string& replace(size_type pos1, size_type n1, const basic_string& str);
        -:  206:    basic_string& replace(size_type pos1, size_type n1, const basic_string& str,
        -:  207:                          size_type pos2, size_type n2=npos); // C++14
        -:  208:    basic_string& replace(size_type pos, size_type n1, const value_type* s, size_type n2);
        -:  209:    basic_string& replace(size_type pos, size_type n1, const value_type* s);
        -:  210:    basic_string& replace(size_type pos, size_type n1, size_type n2, value_type c);
        -:  211:    basic_string& replace(const_iterator i1, const_iterator i2, const basic_string& str);
        -:  212:    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s, size_type n);
        -:  213:    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s);
        -:  214:    basic_string& replace(const_iterator i1, const_iterator i2, size_type n, value_type c);
        -:  215:    template<class InputIterator>
        -:  216:        basic_string& replace(const_iterator i1, const_iterator i2, InputIterator j1, InputIterator j2);
        -:  217:    basic_string& replace(const_iterator i1, const_iterator i2, initializer_list<value_type>);
        -:  218:
        -:  219:    size_type copy(value_type* s, size_type n, size_type pos = 0) const;
        -:  220:    basic_string substr(size_type pos = 0, size_type n = npos) const;
        -:  221:
        -:  222:    void swap(basic_string& str)
        -:  223:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  224:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  225:
        -:  226:    const value_type* c_str() const noexcept;
        -:  227:    const value_type* data() const noexcept;
        -:  228:
        -:  229:    allocator_type get_allocator() const noexcept;
        -:  230:
        -:  231:    size_type find(const basic_string& str, size_type pos = 0) const noexcept;
        -:  232:    size_type find(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  233:    size_type find(const value_type* s, size_type pos = 0) const noexcept;
        -:  234:    size_type find(value_type c, size_type pos = 0) const noexcept;
        -:  235:
        -:  236:    size_type rfind(const basic_string& str, size_type pos = npos) const noexcept;
        -:  237:    size_type rfind(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  238:    size_type rfind(const value_type* s, size_type pos = npos) const noexcept;
        -:  239:    size_type rfind(value_type c, size_type pos = npos) const noexcept;
        -:  240:
        -:  241:    size_type find_first_of(const basic_string& str, size_type pos = 0) const noexcept;
        -:  242:    size_type find_first_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  243:    size_type find_first_of(const value_type* s, size_type pos = 0) const noexcept;
        -:  244:    size_type find_first_of(value_type c, size_type pos = 0) const noexcept;
        -:  245:
        -:  246:    size_type find_last_of(const basic_string& str, size_type pos = npos) const noexcept;
        -:  247:    size_type find_last_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  248:    size_type find_last_of(const value_type* s, size_type pos = npos) const noexcept;
        -:  249:    size_type find_last_of(value_type c, size_type pos = npos) const noexcept;
        -:  250:
        -:  251:    size_type find_first_not_of(const basic_string& str, size_type pos = 0) const noexcept;
        -:  252:    size_type find_first_not_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  253:    size_type find_first_not_of(const value_type* s, size_type pos = 0) const noexcept;
        -:  254:    size_type find_first_not_of(value_type c, size_type pos = 0) const noexcept;
        -:  255:
        -:  256:    size_type find_last_not_of(const basic_string& str, size_type pos = npos) const noexcept;
        -:  257:    size_type find_last_not_of(const value_type* s, size_type pos, size_type n) const noexcept;
        -:  258:    size_type find_last_not_of(const value_type* s, size_type pos = npos) const noexcept;
        -:  259:    size_type find_last_not_of(value_type c, size_type pos = npos) const noexcept;
        -:  260:
        -:  261:    int compare(const basic_string& str) const noexcept;
        -:  262:    int compare(size_type pos1, size_type n1, const basic_string& str) const;
        -:  263:    int compare(size_type pos1, size_type n1, const basic_string& str,
        -:  264:                size_type pos2, size_type n2=npos) const; // C++14
        -:  265:    int compare(const value_type* s) const noexcept;
        -:  266:    int compare(size_type pos1, size_type n1, const value_type* s) const;
        -:  267:    int compare(size_type pos1, size_type n1, const value_type* s, size_type n2) const;
        -:  268:
        -:  269:    bool __invariants() const;
        -:  270:};
        -:  271:
        -:  272:template<class charT, class traits, class Allocator>
        -:  273:basic_string<charT, traits, Allocator>
        -:  274:operator+(const basic_string<charT, traits, Allocator>& lhs,
        -:  275:          const basic_string<charT, traits, Allocator>& rhs);
        -:  276:
        -:  277:template<class charT, class traits, class Allocator>
        -:  278:basic_string<charT, traits, Allocator>
        -:  279:operator+(const charT* lhs , const basic_string<charT,traits,Allocator>&rhs);
        -:  280:
        -:  281:template<class charT, class traits, class Allocator>
        -:  282:basic_string<charT, traits, Allocator>
        -:  283:operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);
        -:  284:
        -:  285:template<class charT, class traits, class Allocator>
        -:  286:basic_string<charT, traits, Allocator>
        -:  287:operator+(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs);
        -:  288:
        -:  289:template<class charT, class traits, class Allocator>
        -:  290:basic_string<charT, traits, Allocator>
        -:  291:operator+(const basic_string<charT, traits, Allocator>& lhs, charT rhs);
        -:  292:
        -:  293:template<class charT, class traits, class Allocator>
        -:  294:bool operator==(const basic_string<charT, traits, Allocator>& lhs,
        -:  295:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  296:
        -:  297:template<class charT, class traits, class Allocator>
        -:  298:bool operator==(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  299:
        -:  300:template<class charT, class traits, class Allocator>
        -:  301:bool operator==(const basic_string<charT,traits,Allocator>& lhs, const charT* rhs) noexcept;
        -:  302:
        -:  303:template<class charT, class traits, class Allocator>
        -:  304:bool operator!=(const basic_string<charT,traits,Allocator>& lhs,
        -:  305:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  306:
        -:  307:template<class charT, class traits, class Allocator>
        -:  308:bool operator!=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  309:
        -:  310:template<class charT, class traits, class Allocator>
        -:  311:bool operator!=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  312:
        -:  313:template<class charT, class traits, class Allocator>
        -:  314:bool operator< (const basic_string<charT, traits, Allocator>& lhs,
        -:  315:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  316:
        -:  317:template<class charT, class traits, class Allocator>
        -:  318:bool operator< (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  319:
        -:  320:template<class charT, class traits, class Allocator>
        -:  321:bool operator< (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  322:
        -:  323:template<class charT, class traits, class Allocator>
        -:  324:bool operator> (const basic_string<charT, traits, Allocator>& lhs,
        -:  325:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  326:
        -:  327:template<class charT, class traits, class Allocator>
        -:  328:bool operator> (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  329:
        -:  330:template<class charT, class traits, class Allocator>
        -:  331:bool operator> (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  332:
        -:  333:template<class charT, class traits, class Allocator>
        -:  334:bool operator<=(const basic_string<charT, traits, Allocator>& lhs,
        -:  335:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  336:
        -:  337:template<class charT, class traits, class Allocator>
        -:  338:bool operator<=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  339:
        -:  340:template<class charT, class traits, class Allocator>
        -:  341:bool operator<=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  342:
        -:  343:template<class charT, class traits, class Allocator>
        -:  344:bool operator>=(const basic_string<charT, traits, Allocator>& lhs,
        -:  345:                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  346:
        -:  347:template<class charT, class traits, class Allocator>
        -:  348:bool operator>=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;
        -:  349:
        -:  350:template<class charT, class traits, class Allocator>
        -:  351:bool operator>=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  352:
        -:  353:template<class charT, class traits, class Allocator>
        -:  354:void swap(basic_string<charT, traits, Allocator>& lhs,
        -:  355:          basic_string<charT, traits, Allocator>& rhs)
        -:  356:            noexcept(noexcept(lhs.swap(rhs)));
        -:  357:
        -:  358:template<class charT, class traits, class Allocator>
        -:  359:basic_istream<charT, traits>&
        -:  360:operator>>(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
        -:  361:
        -:  362:template<class charT, class traits, class Allocator>
        -:  363:basic_ostream<charT, traits>&
        -:  364:operator<<(basic_ostream<charT, traits>& os, const basic_string<charT, traits, Allocator>& str);
        -:  365:
        -:  366:template<class charT, class traits, class Allocator>
        -:  367:basic_istream<charT, traits>&
        -:  368:getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str,
        -:  369:        charT delim);
        -:  370:
        -:  371:template<class charT, class traits, class Allocator>
        -:  372:basic_istream<charT, traits>&
        -:  373:getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
        -:  374:
        -:  375:typedef basic_string<char>    string;
        -:  376:typedef basic_string<wchar_t> wstring;
        -:  377:typedef basic_string<char16_t> u16string;
        -:  378:typedef basic_string<char32_t> u32string;
        -:  379:
        -:  380:int                stoi  (const string& str, size_t* idx = 0, int base = 10);
        -:  381:long               stol  (const string& str, size_t* idx = 0, int base = 10);
        -:  382:unsigned long      stoul (const string& str, size_t* idx = 0, int base = 10);
        -:  383:long long          stoll (const string& str, size_t* idx = 0, int base = 10);
        -:  384:unsigned long long stoull(const string& str, size_t* idx = 0, int base = 10);
        -:  385:
        -:  386:float       stof (const string& str, size_t* idx = 0);
        -:  387:double      stod (const string& str, size_t* idx = 0);
        -:  388:long double stold(const string& str, size_t* idx = 0);
        -:  389:
        -:  390:string to_string(int val);
        -:  391:string to_string(unsigned val);
        -:  392:string to_string(long val);
        -:  393:string to_string(unsigned long val);
        -:  394:string to_string(long long val);
        -:  395:string to_string(unsigned long long val);
        -:  396:string to_string(float val);
        -:  397:string to_string(double val);
        -:  398:string to_string(long double val);
        -:  399:
        -:  400:int                stoi  (const wstring& str, size_t* idx = 0, int base = 10);
        -:  401:long               stol  (const wstring& str, size_t* idx = 0, int base = 10);
        -:  402:unsigned long      stoul (const wstring& str, size_t* idx = 0, int base = 10);
        -:  403:long long          stoll (const wstring& str, size_t* idx = 0, int base = 10);
        -:  404:unsigned long long stoull(const wstring& str, size_t* idx = 0, int base = 10);
        -:  405:
        -:  406:float       stof (const wstring& str, size_t* idx = 0);
        -:  407:double      stod (const wstring& str, size_t* idx = 0);
        -:  408:long double stold(const wstring& str, size_t* idx = 0);
        -:  409:
        -:  410:wstring to_wstring(int val);
        -:  411:wstring to_wstring(unsigned val);
        -:  412:wstring to_wstring(long val);
        -:  413:wstring to_wstring(unsigned long val);
        -:  414:wstring to_wstring(long long val);
        -:  415:wstring to_wstring(unsigned long long val);
        -:  416:wstring to_wstring(float val);
        -:  417:wstring to_wstring(double val);
        -:  418:wstring to_wstring(long double val);
        -:  419:
        -:  420:template <> struct hash<string>;
        -:  421:template <> struct hash<u16string>;
        -:  422:template <> struct hash<u32string>;
        -:  423:template <> struct hash<wstring>;
        -:  424:
        -:  425:basic_string<char>     operator "" s( const char *str,     size_t len ); // C++14
        -:  426:basic_string<wchar_t>  operator "" s( const wchar_t *str,  size_t len ); // C++14
        -:  427:basic_string<char16_t> operator "" s( const char16_t *str, size_t len ); // C++14
        -:  428:basic_string<char32_t> operator "" s( const char32_t *str, size_t len ); // C++14
        -:  429:
        -:  430:}  // std
        -:  431:
        -:  432:*/
        -:  433:
        -:  434:#include <__config>
        -:  435:#include <iosfwd>
        -:  436:#include <cstring>
        -:  437:#include <cstdio>  // For EOF.
        -:  438:#include <cwchar>
        -:  439:#include <algorithm>
        -:  440:#include <iterator>
        -:  441:#include <utility>
        -:  442:#include <memory>
        -:  443:#include <stdexcept>
        -:  444:#include <type_traits>
        -:  445:#include <initializer_list>
        -:  446:#include <__functional_base>
        -:  447:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  448:#include <cstdint>
        -:  449:#endif
        -:  450:#if defined(_LIBCPP_NO_EXCEPTIONS)
        -:  451:#include <cassert>
        -:  452:#endif
        -:  453:
        -:  454:#include <__undef_min_max>
        -:  455:
        -:  456:#include <__debug>
        -:  457:
        -:  458:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  459:#pragma GCC system_header
        -:  460:#endif
        -:  461:
        -:  462:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  463:
        -:  464:// fpos
        -:  465:
        -:  466:template <class _StateT>
        -:  467:class _LIBCPP_TYPE_VIS_ONLY fpos
        -:  468:{
        -:  469:private:
        -:  470:    _StateT __st_;
        -:  471:    streamoff __off_;
        -:  472:public:
        -:  473:    _LIBCPP_INLINE_VISIBILITY fpos(streamoff __off = streamoff()) : __st_(), __off_(__off) {}
        -:  474:
        -:  475:    _LIBCPP_INLINE_VISIBILITY operator streamoff() const {return __off_;}
        -:  476:
        -:  477:    _LIBCPP_INLINE_VISIBILITY _StateT state() const {return __st_;}
        -:  478:    _LIBCPP_INLINE_VISIBILITY void state(_StateT __st) {__st_ = __st;}
        -:  479:
        -:  480:    _LIBCPP_INLINE_VISIBILITY fpos& operator+=(streamoff __off) {__off_ += __off; return *this;}
        -:  481:    _LIBCPP_INLINE_VISIBILITY fpos  operator+ (streamoff __off) const {fpos __t(*this); __t += __off; return __t;}
        -:  482:    _LIBCPP_INLINE_VISIBILITY fpos& operator-=(streamoff __off) {__off_ -= __off; return *this;}
        -:  483:    _LIBCPP_INLINE_VISIBILITY fpos  operator- (streamoff __off) const {fpos __t(*this); __t -= __off; return __t;}
        -:  484:};
        -:  485:
        -:  486:template <class _StateT>
        -:  487:inline _LIBCPP_INLINE_VISIBILITY
        -:  488:streamoff operator-(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  489:    {return streamoff(__x) - streamoff(__y);}
        -:  490:
        -:  491:template <class _StateT>
        -:  492:inline _LIBCPP_INLINE_VISIBILITY
        -:  493:bool operator==(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  494:    {return streamoff(__x) == streamoff(__y);}
        -:  495:
        -:  496:template <class _StateT>
        -:  497:inline _LIBCPP_INLINE_VISIBILITY
        -:  498:bool operator!=(const fpos<_StateT>& __x, const fpos<_StateT>& __y)
        -:  499:    {return streamoff(__x) != streamoff(__y);}
        -:  500:
        -:  501:// char_traits
        -:  502:
        -:  503:template <class _CharT>
        -:  504:struct _LIBCPP_TYPE_VIS_ONLY char_traits
        -:  505:{
        -:  506:    typedef _CharT    char_type;
        -:  507:    typedef int       int_type;
        -:  508:    typedef streamoff off_type;
        -:  509:    typedef streampos pos_type;
        -:  510:    typedef mbstate_t state_type;
        -:  511:
        -:  512:    static inline void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT
        -:  513:        {__c1 = __c2;}
        -:  514:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  515:        {return __c1 == __c2;}
        -:  516:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  517:        {return __c1 < __c2;}
        -:  518:
        -:  519:    static int              compare(const char_type* __s1, const char_type* __s2, size_t __n);
        -:  520:    _LIBCPP_INLINE_VISIBILITY
        -:  521:    static size_t           length(const char_type* __s);
        -:  522:    _LIBCPP_INLINE_VISIBILITY
        -:  523:    static const char_type* find(const char_type* __s, size_t __n, const char_type& __a);
        -:  524:    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n);
        -:  525:    _LIBCPP_INLINE_VISIBILITY
        -:  526:    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n);
        -:  527:    _LIBCPP_INLINE_VISIBILITY
        -:  528:    static char_type*       assign(char_type* __s, size_t __n, char_type __a);
        -:  529:
        -:  530:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  531:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  532:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  533:        {return char_type(__c);}
        -:  534:    static inline _LIBCPP_CONSTEXPR int_type  to_int_type(char_type __c) _NOEXCEPT
        -:  535:        {return int_type(__c);}
        -:  536:    static inline _LIBCPP_CONSTEXPR bool      eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  537:        {return __c1 == __c2;}
        -:  538:    static inline _LIBCPP_CONSTEXPR int_type  eof() _NOEXCEPT
        -:  539:        {return int_type(EOF);}
        -:  540:};
        -:  541:
        -:  542:template <class _CharT>
        -:  543:int
        -:  544:char_traits<_CharT>::compare(const char_type* __s1, const char_type* __s2, size_t __n)
        -:  545:{
        -:  546:    for (; __n; --__n, ++__s1, ++__s2)
        -:  547:    {
        -:  548:        if (lt(*__s1, *__s2))
        -:  549:            return -1;
        -:  550:        if (lt(*__s2, *__s1))
        -:  551:            return 1;
        -:  552:    }
        -:  553:    return 0;
        -:  554:}
        -:  555:
        -:  556:template <class _CharT>
        -:  557:inline
        -:  558:size_t
        -:  559:char_traits<_CharT>::length(const char_type* __s)
        -:  560:{
        -:  561:    size_t __len = 0;
        -:  562:    for (; !eq(*__s, char_type(0)); ++__s)
        -:  563:        ++__len;
        -:  564:    return __len;
        -:  565:}
        -:  566:
        -:  567:template <class _CharT>
        -:  568:inline
        -:  569:const _CharT*
        -:  570:char_traits<_CharT>::find(const char_type* __s, size_t __n, const char_type& __a)
        -:  571:{
        -:  572:    for (; __n; --__n)
        -:  573:    {
        -:  574:        if (eq(*__s, __a))
        -:  575:            return __s;
        -:  576:        ++__s;
        -:  577:    }
        -:  578:    return 0;
        -:  579:}
        -:  580:
        -:  581:template <class _CharT>
        -:  582:_CharT*
        -:  583:char_traits<_CharT>::move(char_type* __s1, const char_type* __s2, size_t __n)
        -:  584:{
        -:  585:    char_type* __r = __s1;
        -:  586:    if (__s1 < __s2)
        -:  587:    {
        -:  588:        for (; __n; --__n, ++__s1, ++__s2)
        -:  589:            assign(*__s1, *__s2);
        -:  590:    }
        -:  591:    else if (__s2 < __s1)
        -:  592:    {
        -:  593:        __s1 += __n;
        -:  594:        __s2 += __n;
        -:  595:        for (; __n; --__n)
        -:  596:            assign(*--__s1, *--__s2);
        -:  597:    }
        -:  598:    return __r;
        -:  599:}
        -:  600:
        -:  601:template <class _CharT>
        -:  602:inline
        -:  603:_CharT*
        -:  604:char_traits<_CharT>::copy(char_type* __s1, const char_type* __s2, size_t __n)
        -:  605:{
        -:  606:    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  607:    char_type* __r = __s1;
        -:  608:    for (; __n; --__n, ++__s1, ++__s2)
        -:  609:        assign(*__s1, *__s2);
        -:  610:    return __r;
        -:  611:}
        -:  612:
        -:  613:template <class _CharT>
        -:  614:inline
        -:  615:_CharT*
        -:  616:char_traits<_CharT>::assign(char_type* __s, size_t __n, char_type __a)
        -:  617:{
        -:  618:    char_type* __r = __s;
        -:  619:    for (; __n; --__n, ++__s)
        -:  620:        assign(*__s, __a);
        -:  621:    return __r;
        -:  622:}
        -:  623:
        -:  624:// char_traits<char>
        -:  625:
        -:  626:template <>
        -:  627:struct _LIBCPP_TYPE_VIS_ONLY char_traits<char>
        -:  628:{
        -:  629:    typedef char      char_type;
        -:  630:    typedef int       int_type;
        -:  631:    typedef streamoff off_type;
        -:  632:    typedef streampos pos_type;
        -:  633:    typedef mbstate_t state_type;
        -:  634:
        -:  635:    static inline void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT
        -:  636:        {__c1 = __c2;}
        -:  637:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  638:            {return __c1 == __c2;}
        -:  639:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  640:        {return (unsigned char)__c1 < (unsigned char)__c2;}
        -:  641:
        -:  642:    static inline int compare(const char_type* __s1, const char_type* __s2, size_t __n)
        -:  643:        {return __n == 0 ? 0 : memcmp(__s1, __s2, __n);}
      204:  644:    static inline size_t length(const char_type* __s) {return strlen(__s);}
        -:  645:    static inline const char_type* find(const char_type* __s, size_t __n, const char_type& __a)
        -:  646:        {return __n == 0 ? NULL : (const char_type*) memchr(__s, to_int_type(__a), __n);}
        -:  647:    static inline char_type* move(char_type* __s1, const char_type* __s2, size_t __n)
        -:  648:        {return __n == 0 ? __s1 : (char_type*) memmove(__s1, __s2, __n);}
        -:  649:    static inline char_type* copy(char_type* __s1, const char_type* __s2, size_t __n)
        -:  650:        {
        -:  651:            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  652:            return __n == 0 ? __s1 : (char_type*)memcpy(__s1, __s2, __n);
        -:  653:        }
        -:  654:    static inline char_type* assign(char_type* __s, size_t __n, char_type __a)
        -:  655:        {return __n == 0 ? __s : (char_type*)memset(__s, to_int_type(__a), __n);}
        -:  656:
        -:  657:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  658:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  659:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  660:        {return char_type(__c);}
        -:  661:    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT
        -:  662:        {return int_type((unsigned char)__c);}
        -:  663:    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  664:        {return __c1 == __c2;}
        -:  665:    static inline _LIBCPP_CONSTEXPR int_type  eof() _NOEXCEPT
        -:  666:        {return int_type(EOF);}
        -:  667:};
        -:  668:
        -:  669:// char_traits<wchar_t>
        -:  670:
        -:  671:template <>
        -:  672:struct _LIBCPP_TYPE_VIS_ONLY char_traits<wchar_t>
        -:  673:{
        -:  674:    typedef wchar_t   char_type;
        -:  675:    typedef wint_t    int_type;
        -:  676:    typedef streamoff off_type;
        -:  677:    typedef streampos pos_type;
        -:  678:    typedef mbstate_t state_type;
        -:  679:
        -:  680:    static inline void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT
        -:  681:        {__c1 = __c2;}
        -:  682:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  683:        {return __c1 == __c2;}
        -:  684:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  685:        {return __c1 < __c2;}
        -:  686:
        -:  687:    static inline int compare(const char_type* __s1, const char_type* __s2, size_t __n)
        -:  688:        {return __n == 0 ? 0 : wmemcmp(__s1, __s2, __n);}
        -:  689:    static inline size_t length(const char_type* __s)
        -:  690:        {return wcslen(__s);}
        -:  691:    static inline const char_type* find(const char_type* __s, size_t __n, const char_type& __a)
        -:  692:        {return __n == 0 ? NULL : (const char_type*)wmemchr(__s, __a, __n);}
        -:  693:    static inline char_type* move(char_type* __s1, const char_type* __s2, size_t __n)
        -:  694:        {return __n == 0 ? __s1 : (char_type*)wmemmove(__s1, __s2, __n);}
        -:  695:    static inline char_type* copy(char_type* __s1, const char_type* __s2, size_t __n)
        -:  696:        {
        -:  697:            _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  698:            return __n == 0 ? __s1 : (char_type*)wmemcpy(__s1, __s2, __n);
        -:  699:        }
        -:  700:    static inline char_type* assign(char_type* __s, size_t __n, char_type __a)
        -:  701:        {return __n == 0 ? __s : (char_type*)wmemset(__s, __a, __n);}
        -:  702:
        -:  703:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  704:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  705:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  706:        {return char_type(__c);}
        -:  707:    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT
        -:  708:        {return int_type(__c);}
        -:  709:    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  710:        {return __c1 == __c2;}
        -:  711:    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT
        -:  712:        {return int_type(WEOF);}
        -:  713:};
        -:  714:
        -:  715:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  716:
        -:  717:template <>
        -:  718:struct _LIBCPP_TYPE_VIS_ONLY char_traits<char16_t>
        -:  719:{
        -:  720:    typedef char16_t       char_type;
        -:  721:    typedef uint_least16_t int_type;
        -:  722:    typedef streamoff      off_type;
        -:  723:    typedef u16streampos   pos_type;
        -:  724:    typedef mbstate_t      state_type;
        -:  725:
        -:  726:    static inline void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT
        -:  727:        {__c1 = __c2;}
        -:  728:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  729:        {return __c1 == __c2;}
        -:  730:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  731:        {return __c1 < __c2;}
        -:  732:
        -:  733:    _LIBCPP_INLINE_VISIBILITY
        -:  734:    static int              compare(const char_type* __s1, const char_type* __s2, size_t __n);
        -:  735:    _LIBCPP_INLINE_VISIBILITY
        -:  736:    static size_t           length(const char_type* __s);
        -:  737:    _LIBCPP_INLINE_VISIBILITY
        -:  738:    static const char_type* find(const char_type* __s, size_t __n, const char_type& __a);
        -:  739:    _LIBCPP_INLINE_VISIBILITY
        -:  740:    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n);
        -:  741:    _LIBCPP_INLINE_VISIBILITY
        -:  742:    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n);
        -:  743:    _LIBCPP_INLINE_VISIBILITY
        -:  744:    static char_type*       assign(char_type* __s, size_t __n, char_type __a);
        -:  745:
        -:  746:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  747:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  748:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  749:        {return char_type(__c);}
        -:  750:    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT
        -:  751:        {return int_type(__c);}
        -:  752:    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  753:        {return __c1 == __c2;}
        -:  754:    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT
        -:  755:        {return int_type(0xFFFF);}
        -:  756:};
        -:  757:
        -:  758:inline
        -:  759:int
        -:  760:char_traits<char16_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n)
        -:  761:{
        -:  762:    for (; __n; --__n, ++__s1, ++__s2)
        -:  763:    {
        -:  764:        if (lt(*__s1, *__s2))
        -:  765:            return -1;
        -:  766:        if (lt(*__s2, *__s1))
        -:  767:            return 1;
        -:  768:    }
        -:  769:    return 0;
        -:  770:}
        -:  771:
        -:  772:inline
        -:  773:size_t
        -:  774:char_traits<char16_t>::length(const char_type* __s)
        -:  775:{
        -:  776:    size_t __len = 0;
        -:  777:    for (; !eq(*__s, char_type(0)); ++__s)
        -:  778:        ++__len;
        -:  779:    return __len;
        -:  780:}
        -:  781:
        -:  782:inline
        -:  783:const char16_t*
        -:  784:char_traits<char16_t>::find(const char_type* __s, size_t __n, const char_type& __a)
        -:  785:{
        -:  786:    for (; __n; --__n)
        -:  787:    {
        -:  788:        if (eq(*__s, __a))
        -:  789:            return __s;
        -:  790:        ++__s;
        -:  791:    }
        -:  792:    return 0;
        -:  793:}
        -:  794:
        -:  795:inline
        -:  796:char16_t*
        -:  797:char_traits<char16_t>::move(char_type* __s1, const char_type* __s2, size_t __n)
        -:  798:{
        -:  799:    char_type* __r = __s1;
        -:  800:    if (__s1 < __s2)
        -:  801:    {
        -:  802:        for (; __n; --__n, ++__s1, ++__s2)
        -:  803:            assign(*__s1, *__s2);
        -:  804:    }
        -:  805:    else if (__s2 < __s1)
        -:  806:    {
        -:  807:        __s1 += __n;
        -:  808:        __s2 += __n;
        -:  809:        for (; __n; --__n)
        -:  810:            assign(*--__s1, *--__s2);
        -:  811:    }
        -:  812:    return __r;
        -:  813:}
        -:  814:
        -:  815:inline
        -:  816:char16_t*
        -:  817:char_traits<char16_t>::copy(char_type* __s1, const char_type* __s2, size_t __n)
        -:  818:{
        -:  819:    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  820:    char_type* __r = __s1;
        -:  821:    for (; __n; --__n, ++__s1, ++__s2)
        -:  822:        assign(*__s1, *__s2);
        -:  823:    return __r;
        -:  824:}
        -:  825:
        -:  826:inline
        -:  827:char16_t*
        -:  828:char_traits<char16_t>::assign(char_type* __s, size_t __n, char_type __a)
        -:  829:{
        -:  830:    char_type* __r = __s;
        -:  831:    for (; __n; --__n, ++__s)
        -:  832:        assign(*__s, __a);
        -:  833:    return __r;
        -:  834:}
        -:  835:
        -:  836:template <>
        -:  837:struct _LIBCPP_TYPE_VIS_ONLY char_traits<char32_t>
        -:  838:{
        -:  839:    typedef char32_t       char_type;
        -:  840:    typedef uint_least32_t int_type;
        -:  841:    typedef streamoff      off_type;
        -:  842:    typedef u32streampos   pos_type;
        -:  843:    typedef mbstate_t      state_type;
        -:  844:
        -:  845:    static inline void assign(char_type& __c1, const char_type& __c2) _NOEXCEPT
        -:  846:        {__c1 = __c2;}
        -:  847:    static inline _LIBCPP_CONSTEXPR bool eq(char_type __c1, char_type __c2) _NOEXCEPT
        -:  848:        {return __c1 == __c2;}
        -:  849:    static inline _LIBCPP_CONSTEXPR bool lt(char_type __c1, char_type __c2) _NOEXCEPT
        -:  850:        {return __c1 < __c2;}
        -:  851:
        -:  852:    _LIBCPP_INLINE_VISIBILITY
        -:  853:    static int              compare(const char_type* __s1, const char_type* __s2, size_t __n);
        -:  854:    _LIBCPP_INLINE_VISIBILITY
        -:  855:    static size_t           length(const char_type* __s);
        -:  856:    _LIBCPP_INLINE_VISIBILITY
        -:  857:    static const char_type* find(const char_type* __s, size_t __n, const char_type& __a);
        -:  858:    _LIBCPP_INLINE_VISIBILITY
        -:  859:    static char_type*       move(char_type* __s1, const char_type* __s2, size_t __n);
        -:  860:    _LIBCPP_INLINE_VISIBILITY
        -:  861:    static char_type*       copy(char_type* __s1, const char_type* __s2, size_t __n);
        -:  862:    _LIBCPP_INLINE_VISIBILITY
        -:  863:    static char_type*       assign(char_type* __s, size_t __n, char_type __a);
        -:  864:
        -:  865:    static inline _LIBCPP_CONSTEXPR int_type  not_eof(int_type __c) _NOEXCEPT
        -:  866:        {return eq_int_type(__c, eof()) ? ~eof() : __c;}
        -:  867:    static inline _LIBCPP_CONSTEXPR char_type to_char_type(int_type __c) _NOEXCEPT
        -:  868:        {return char_type(__c);}
        -:  869:    static inline _LIBCPP_CONSTEXPR int_type to_int_type(char_type __c) _NOEXCEPT
        -:  870:        {return int_type(__c);}
        -:  871:    static inline _LIBCPP_CONSTEXPR bool eq_int_type(int_type __c1, int_type __c2) _NOEXCEPT
        -:  872:        {return __c1 == __c2;}
        -:  873:    static inline _LIBCPP_CONSTEXPR int_type eof() _NOEXCEPT
        -:  874:        {return int_type(0xFFFFFFFF);}
        -:  875:};
        -:  876:
        -:  877:inline
        -:  878:int
        -:  879:char_traits<char32_t>::compare(const char_type* __s1, const char_type* __s2, size_t __n)
        -:  880:{
        -:  881:    for (; __n; --__n, ++__s1, ++__s2)
        -:  882:    {
        -:  883:        if (lt(*__s1, *__s2))
        -:  884:            return -1;
        -:  885:        if (lt(*__s2, *__s1))
        -:  886:            return 1;
        -:  887:    }
        -:  888:    return 0;
        -:  889:}
        -:  890:
        -:  891:inline
        -:  892:size_t
        -:  893:char_traits<char32_t>::length(const char_type* __s)
        -:  894:{
        -:  895:    size_t __len = 0;
        -:  896:    for (; !eq(*__s, char_type(0)); ++__s)
        -:  897:        ++__len;
        -:  898:    return __len;
        -:  899:}
        -:  900:
        -:  901:inline
        -:  902:const char32_t*
        -:  903:char_traits<char32_t>::find(const char_type* __s, size_t __n, const char_type& __a)
        -:  904:{
        -:  905:    for (; __n; --__n)
        -:  906:    {
        -:  907:        if (eq(*__s, __a))
        -:  908:            return __s;
        -:  909:        ++__s;
        -:  910:    }
        -:  911:    return 0;
        -:  912:}
        -:  913:
        -:  914:inline
        -:  915:char32_t*
        -:  916:char_traits<char32_t>::move(char_type* __s1, const char_type* __s2, size_t __n)
        -:  917:{
        -:  918:    char_type* __r = __s1;
        -:  919:    if (__s1 < __s2)
        -:  920:    {
        -:  921:        for (; __n; --__n, ++__s1, ++__s2)
        -:  922:            assign(*__s1, *__s2);
        -:  923:    }
        -:  924:    else if (__s2 < __s1)
        -:  925:    {
        -:  926:        __s1 += __n;
        -:  927:        __s2 += __n;
        -:  928:        for (; __n; --__n)
        -:  929:            assign(*--__s1, *--__s2);
        -:  930:    }
        -:  931:    return __r;
        -:  932:}
        -:  933:
        -:  934:inline
        -:  935:char32_t*
        -:  936:char_traits<char32_t>::copy(char_type* __s1, const char_type* __s2, size_t __n)
        -:  937:{
        -:  938:    _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range");
        -:  939:    char_type* __r = __s1;
        -:  940:    for (; __n; --__n, ++__s1, ++__s2)
        -:  941:        assign(*__s1, *__s2);
        -:  942:    return __r;
        -:  943:}
        -:  944:
        -:  945:inline
        -:  946:char32_t*
        -:  947:char_traits<char32_t>::assign(char_type* __s, size_t __n, char_type __a)
        -:  948:{
        -:  949:    char_type* __r = __s;
        -:  950:    for (; __n; --__n, ++__s)
        -:  951:        assign(*__s, __a);
        -:  952:    return __r;
        -:  953:}
        -:  954:
        -:  955:#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS
        -:  956:
        -:  957:// helper fns for basic_string
        -:  958:
        -:  959:// __str_find
        -:  960:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -:  961:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -:  962:__str_find(const _CharT *__p, _SizeT __sz, 
        -:  963:             _CharT __c, _SizeT __pos) _NOEXCEPT
        -:  964:{
        -:  965:    if (__pos >= __sz)
        -:  966:        return __npos;
        -:  967:    const _CharT* __r = _Traits::find(__p + __pos, __sz - __pos, __c);
        -:  968:    if (__r == 0)
        -:  969:        return __npos;
        -:  970:    return static_cast<_SizeT>(__r - __p);
        -:  971:}
        -:  972:
        -:  973:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -:  974:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -:  975:__str_find(const _CharT *__p, _SizeT __sz, 
        -:  976:       const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -:  977:{
        -:  978:    if (__pos > __sz || __sz - __pos < __n)
        -:  979:        return __npos;
        -:  980:    if (__n == 0)
        -:  981:        return __pos;
        -:  982:    const _CharT* __r = 
        -:  983:        _VSTD::__search(__p + __pos, __p + __sz,
        -:  984:                        __s, __s + __n, _Traits::eq,
        -:  985:                        random_access_iterator_tag(), random_access_iterator_tag());
        -:  986:    if (__r == __p + __sz)
        -:  987:        return __npos;
        -:  988:    return static_cast<_SizeT>(__r - __p);
        -:  989:}
        -:  990:
        -:  991:
        -:  992:// __str_rfind
        -:  993:
        -:  994:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -:  995:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -:  996:__str_rfind(const _CharT *__p, _SizeT __sz, 
        -:  997:              _CharT __c, _SizeT __pos) _NOEXCEPT
        -:  998:{
        -:  999:    if (__sz < 1)
        -: 1000:        return __npos;
        -: 1001:    if (__pos < __sz)
        -: 1002:        ++__pos;
        -: 1003:    else
        -: 1004:        __pos = __sz;
        -: 1005:    for (const _CharT* __ps = __p + __pos; __ps != __p;)
        -: 1006:    {
        -: 1007:        if (_Traits::eq(*--__ps, __c))
        -: 1008:            return static_cast<_SizeT>(__ps - __p);
        -: 1009:    }
        -: 1010:    return __npos;
        -: 1011:}
        -: 1012:
        -: 1013:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1014:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1015:__str_rfind(const _CharT *__p, _SizeT __sz, 
        -: 1016:        const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1017:{
        -: 1018:    __pos = _VSTD::min(__pos, __sz);
        -: 1019:    if (__n < __sz - __pos)
        -: 1020:        __pos += __n;
        -: 1021:    else
        -: 1022:        __pos = __sz;
        -: 1023:    const _CharT* __r = _VSTD::__find_end(
        -: 1024:                  __p, __p + __pos, __s, __s + __n, _Traits::eq, 
        -: 1025:                        random_access_iterator_tag(), random_access_iterator_tag());
        -: 1026:    if (__n > 0 && __r == __p + __pos)
        -: 1027:        return __npos;
        -: 1028:    return static_cast<_SizeT>(__r - __p);
        -: 1029:}
        -: 1030:
        -: 1031:// __str_find_first_of
        -: 1032:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1033:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1034:__str_find_first_of(const _CharT *__p, _SizeT __sz,
        -: 1035:                const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1036:{
        -: 1037:    if (__pos >= __sz || __n == 0)
        -: 1038:        return __npos;
        -: 1039:    const _CharT* __r = _VSTD::__find_first_of_ce
        -: 1040:        (__p + __pos, __p + __sz, __s, __s + __n, _Traits::eq );
        -: 1041:    if (__r == __p + __sz)
        -: 1042:        return __npos;
        -: 1043:    return static_cast<_SizeT>(__r - __p);
        -: 1044:}
        -: 1045:
        -: 1046:
        -: 1047:// __str_find_last_of
        -: 1048:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1049:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY 
        -: 1050:__str_find_last_of(const _CharT *__p, _SizeT __sz,
        -: 1051:               const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1052:    {
        -: 1053:    if (__n != 0)
        -: 1054:    {
        -: 1055:        if (__pos < __sz)
        -: 1056:            ++__pos;
        -: 1057:        else
        -: 1058:            __pos = __sz;
        -: 1059:        for (const _CharT* __ps = __p + __pos; __ps != __p;)
        -: 1060:        {
        -: 1061:            const _CharT* __r = _Traits::find(__s, __n, *--__ps);
        -: 1062:            if (__r)
        -: 1063:                return static_cast<_SizeT>(__ps - __p);
        -: 1064:        }
        -: 1065:    }
        -: 1066:    return __npos;
        -: 1067:}
        -: 1068:
        -: 1069:
        -: 1070:// __str_find_first_not_of
        -: 1071:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1072:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1073:__str_find_first_not_of(const _CharT *__p, _SizeT __sz,
        -: 1074:                    const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1075:{
        -: 1076:    if (__pos < __sz)
        -: 1077:    {
        -: 1078:        const _CharT* __pe = __p + __sz;
        -: 1079:        for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)
        -: 1080:            if (_Traits::find(__s, __n, *__ps) == 0)
        -: 1081:                return static_cast<_SizeT>(__ps - __p);
        -: 1082:    }
        -: 1083:    return __npos;
        -: 1084:}
        -: 1085:
        -: 1086:
        -: 1087:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1088:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1089:__str_find_first_not_of(const _CharT *__p, _SizeT __sz,
        -: 1090:                          _CharT __c, _SizeT __pos) _NOEXCEPT
        -: 1091:{
        -: 1092:    if (__pos < __sz)
        -: 1093:    {
        -: 1094:        const _CharT* __pe = __p + __sz;
        -: 1095:        for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps)
        -: 1096:            if (!_Traits::eq(*__ps, __c))
        -: 1097:                return static_cast<_SizeT>(__ps - __p);
        -: 1098:    }
        -: 1099:    return __npos;
        -: 1100:}
        -: 1101:
        -: 1102:
        -: 1103:// __str_find_last_not_of
        -: 1104:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1105:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1106:__str_find_last_not_of(const _CharT *__p, _SizeT __sz,
        -: 1107:                   const _CharT* __s, _SizeT __pos, _SizeT __n) _NOEXCEPT
        -: 1108:{
        -: 1109:    if (__pos < __sz)
        -: 1110:        ++__pos;
        -: 1111:    else
        -: 1112:        __pos = __sz;
        -: 1113:    for (const _CharT* __ps = __p + __pos; __ps != __p;)
        -: 1114:        if (_Traits::find(__s, __n, *--__ps) == 0)
        -: 1115:            return static_cast<_SizeT>(__ps - __p);
        -: 1116:    return __npos;
        -: 1117:}
        -: 1118:
        -: 1119:
        -: 1120:template<class _CharT, class _SizeT, class _Traits, _SizeT __npos>
        -: 1121:_SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1122:__str_find_last_not_of(const _CharT *__p, _SizeT __sz,
        -: 1123:                         _CharT __c, _SizeT __pos) _NOEXCEPT
        -: 1124:{
        -: 1125:    if (__pos < __sz)
        -: 1126:        ++__pos;
        -: 1127:    else
        -: 1128:        __pos = __sz;
        -: 1129:    for (const _CharT* __ps = __p + __pos; __ps != __p;)
        -: 1130:        if (!_Traits::eq(*--__ps, __c))
        -: 1131:            return static_cast<_SizeT>(__ps - __p);
        -: 1132:    return __npos;
        -: 1133:}
        -: 1134:
        -: 1135:template<class _Ptr>
        -: 1136:size_t _LIBCPP_INLINE_VISIBILITY __do_string_hash(_Ptr __p, _Ptr __e)
        -: 1137:{
        -: 1138:    typedef typename iterator_traits<_Ptr>::value_type value_type;
        -: 1139:    return __murmur2_or_cityhash<size_t>()(__p, (__e-__p)*sizeof(value_type));
        -: 1140:}
        -: 1141:
        -: 1142:// basic_string
        -: 1143:
        -: 1144:template<class _CharT, class _Traits, class _Allocator>
        -: 1145:basic_string<_CharT, _Traits, _Allocator>
        -: 1146:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x,
        -: 1147:          const basic_string<_CharT, _Traits, _Allocator>& __y);
        -: 1148:
        -: 1149:template<class _CharT, class _Traits, class _Allocator>
        -: 1150:basic_string<_CharT, _Traits, _Allocator>
        -: 1151:operator+(const _CharT* __x, const basic_string<_CharT,_Traits,_Allocator>& __y);
        -: 1152:
        -: 1153:template<class _CharT, class _Traits, class _Allocator>
        -: 1154:basic_string<_CharT, _Traits, _Allocator>
        -: 1155:operator+(_CharT __x, const basic_string<_CharT,_Traits,_Allocator>& __y);
        -: 1156:
        -: 1157:template<class _CharT, class _Traits, class _Allocator>
        -: 1158:basic_string<_CharT, _Traits, _Allocator>
        -: 1159:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const _CharT* __y);
        -: 1160:
        -: 1161:template<class _CharT, class _Traits, class _Allocator>
        -: 1162:basic_string<_CharT, _Traits, _Allocator>
        -: 1163:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, _CharT __y);
        -: 1164:
        -: 1165:template <bool>
        -: 1166:class _LIBCPP_TYPE_VIS_ONLY __basic_string_common
        -: 1167:{
        -: 1168:protected:
        -: 1169:    void __throw_length_error() const;
        -: 1170:    void __throw_out_of_range() const;
        -: 1171:};
        -: 1172:
        -: 1173:template <bool __b>
        -: 1174:void
        -: 1175:__basic_string_common<__b>::__throw_length_error() const
        -: 1176:{
        -: 1177:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1178:    throw length_error("basic_string");
        -: 1179:#else
        -: 1180:    assert(!"basic_string length_error");
        -: 1181:#endif
        -: 1182:}
        -: 1183:
        -: 1184:template <bool __b>
        -: 1185:void
        -: 1186:__basic_string_common<__b>::__throw_out_of_range() const
        -: 1187:{
        -: 1188:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1189:    throw out_of_range("basic_string");
        -: 1190:#else
        -: 1191:    assert(!"basic_string out_of_range");
        -: 1192:#endif
        -: 1193:}
        -: 1194:
        -: 1195:#ifdef _LIBCPP_MSVC
        -: 1196:#pragma warning( push )
        -: 1197:#pragma warning( disable: 4231 )
        -: 1198:#endif // _LIBCPP_MSVC
        -: 1199:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_TYPE_VIS __basic_string_common<true>)
        -: 1200:#ifdef _LIBCPP_MSVC
        -: 1201:#pragma warning( pop )
        -: 1202:#endif // _LIBCPP_MSVC
        -: 1203:
        -: 1204:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1205:
        -: 1206:template <class _CharT, size_t = sizeof(_CharT)>
        -: 1207:struct __padding
        -: 1208:{
        -: 1209:    unsigned char __xx[sizeof(_CharT)-1];
        -: 1210:};
        -: 1211:
        -: 1212:template <class _CharT>
        -: 1213:struct __padding<_CharT, 1>
        -: 1214:{
        -: 1215:};
        -: 1216:
        -: 1217:#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1218:
        -: 1219:template<class _CharT, class _Traits, class _Allocator>
        -: 1220:class _LIBCPP_TYPE_VIS_ONLY basic_string
        -: 1221:    : private __basic_string_common<true>
        -: 1222:{
        -: 1223:public:
        -: 1224:    typedef basic_string                                 __self;
        -: 1225:    typedef _Traits                                      traits_type;
        -: 1226:    typedef typename traits_type::char_type              value_type;
        -: 1227:    typedef _Allocator                                   allocator_type;
        -: 1228:    typedef allocator_traits<allocator_type>             __alloc_traits;
        -: 1229:    typedef typename __alloc_traits::size_type           size_type;
        -: 1230:    typedef typename __alloc_traits::difference_type     difference_type;
        -: 1231:    typedef value_type&                                  reference;
        -: 1232:    typedef const value_type&                            const_reference;
        -: 1233:    typedef typename __alloc_traits::pointer             pointer;
        -: 1234:    typedef typename __alloc_traits::const_pointer       const_pointer;
        -: 1235:
        -: 1236:    static_assert(is_pod<value_type>::value, "Character type of basic_string must be a POD");
        -: 1237:    static_assert((is_same<_CharT, value_type>::value),
        -: 1238:                  "traits_type::char_type must be the same type as CharT");
        -: 1239:    static_assert((is_same<typename allocator_type::value_type, value_type>::value),
        -: 1240:                  "Allocator::value_type must be same type as value_type");
        -: 1241:#if defined(_LIBCPP_RAW_ITERATORS)
        -: 1242:    typedef pointer                                      iterator;
        -: 1243:    typedef const_pointer                                const_iterator;
        -: 1244:#else  // defined(_LIBCPP_RAW_ITERATORS)
        -: 1245:    typedef __wrap_iter<pointer>                         iterator;
        -: 1246:    typedef __wrap_iter<const_pointer>                   const_iterator;
        -: 1247:#endif  // defined(_LIBCPP_RAW_ITERATORS)
        -: 1248:    typedef _VSTD::reverse_iterator<iterator>             reverse_iterator;
        -: 1249:    typedef _VSTD::reverse_iterator<const_iterator>       const_reverse_iterator;
        -: 1250:
        -: 1251:private:
        -: 1252:
        -: 1253:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1254:
        -: 1255:    struct __long
        -: 1256:    {
        -: 1257:        pointer   __data_;
        -: 1258:        size_type __size_;
        -: 1259:        size_type __cap_;
        -: 1260:    };
        -: 1261:
        -: 1262:#if _LIBCPP_BIG_ENDIAN
        -: 1263:    enum {__short_mask = 0x01};
        -: 1264:    enum {__long_mask  = 0x1ul};
        -: 1265:#else  // _LIBCPP_BIG_ENDIAN
        -: 1266:    enum {__short_mask = 0x80};
        -: 1267:    enum {__long_mask  = ~(size_type(~0) >> 1)};
        -: 1268:#endif  // _LIBCPP_BIG_ENDIAN
        -: 1269:
        -: 1270:    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?
        -: 1271:                      (sizeof(__long) - 1)/sizeof(value_type) : 2};
        -: 1272:
        -: 1273:    struct __short
        -: 1274:    {
        -: 1275:        value_type __data_[__min_cap];
        -: 1276:        struct
        -: 1277:            : __padding<value_type>
        -: 1278:        {
        -: 1279:            unsigned char __size_;
        -: 1280:        };
        -: 1281:    };
        -: 1282:
        -: 1283:#else
        -: 1284:
        -: 1285:    struct __long
        -: 1286:    {
        -: 1287:        size_type __cap_;
        -: 1288:        size_type __size_;
        -: 1289:        pointer   __data_;
        -: 1290:    };
        -: 1291:
        -: 1292:#if _LIBCPP_BIG_ENDIAN
        -: 1293:    enum {__short_mask = 0x80};
        -: 1294:    enum {__long_mask  = ~(size_type(~0) >> 1)};
        -: 1295:#else  // _LIBCPP_BIG_ENDIAN
        -: 1296:    enum {__short_mask = 0x01};
        -: 1297:    enum {__long_mask  = 0x1ul};
        -: 1298:#endif  // _LIBCPP_BIG_ENDIAN
        -: 1299:
        -: 1300:    enum {__min_cap = (sizeof(__long) - 1)/sizeof(value_type) > 2 ?
        -: 1301:                      (sizeof(__long) - 1)/sizeof(value_type) : 2};
        -: 1302:
        -: 1303:    struct __short
        -: 1304:    {
        -: 1305:        union
        -: 1306:        {
        -: 1307:            unsigned char __size_;
        -: 1308:            value_type __lx;
        -: 1309:        };
        -: 1310:        value_type __data_[__min_cap];
        -: 1311:    };
        -: 1312:
        -: 1313:#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1314:
        -: 1315:    union __ulx{__long __lx; __short __lxx;};
        -: 1316:
        -: 1317:    enum {__n_words = sizeof(__ulx) / sizeof(size_type)};
        -: 1318:
        -: 1319:    struct __raw
        -: 1320:    {
        -: 1321:        size_type __words[__n_words];
        -: 1322:    };
        -: 1323:
        -: 1324:    struct __rep
        -: 1325:    {
        -: 1326:        union
        -: 1327:        {
        -: 1328:            __long  __l;
        -: 1329:            __short __s;
        -: 1330:            __raw   __r;
        -: 1331:        };
        -: 1332:    };
        -: 1333:
        -: 1334:    __compressed_pair<__rep, allocator_type> __r_;
        -: 1335:
        -: 1336:public:
        -: 1337:    static const size_type npos = -1;
        -: 1338:
        4: 1339:    _LIBCPP_INLINE_VISIBILITY basic_string()
        -: 1340:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -: 1341:
        -: 1342:    _LIBCPP_INLINE_VISIBILITY explicit basic_string(const allocator_type& __a)
        -: 1343:#if _LIBCPP_STD_VER <= 14
        -: 1344:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);
        -: 1345:#else
        -: 1346:        _NOEXCEPT;
        -: 1347:#endif
        -: 1348:
        -: 1349:    basic_string(const basic_string& __str);
        -: 1350:    basic_string(const basic_string& __str, const allocator_type& __a);
        -: 1351:
        -: 1352:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1353:    _LIBCPP_INLINE_VISIBILITY
        -: 1354:    basic_string(basic_string&& __str)
        -: 1355:#if _LIBCPP_STD_VER <= 14
        -: 1356:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -: 1357:#else
        -: 1358:        _NOEXCEPT;
        -: 1359:#endif
        -: 1360:
        -: 1361:    _LIBCPP_INLINE_VISIBILITY
        -: 1362:    basic_string(basic_string&& __str, const allocator_type& __a);
        -: 1363:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        4: 1364:    _LIBCPP_INLINE_VISIBILITY basic_string(const value_type* __s);
        -: 1365:    _LIBCPP_INLINE_VISIBILITY
        -: 1366:    basic_string(const value_type* __s, const allocator_type& __a);
        -: 1367:    _LIBCPP_INLINE_VISIBILITY
        -: 1368:    basic_string(const value_type* __s, size_type __n);
        -: 1369:    _LIBCPP_INLINE_VISIBILITY
        -: 1370:    basic_string(const value_type* __s, size_type __n, const allocator_type& __a);
        -: 1371:    _LIBCPP_INLINE_VISIBILITY
        -: 1372:    basic_string(size_type __n, value_type __c);
        -: 1373:    _LIBCPP_INLINE_VISIBILITY
        -: 1374:    basic_string(size_type __n, value_type __c, const allocator_type& __a);
        -: 1375:    basic_string(const basic_string& __str, size_type __pos, size_type __n = npos,
        -: 1376:                 const allocator_type& __a = allocator_type());
        -: 1377:    template<class _InputIterator>
        -: 1378:        _LIBCPP_INLINE_VISIBILITY
        -: 1379:        basic_string(_InputIterator __first, _InputIterator __last);
        -: 1380:    template<class _InputIterator>
        -: 1381:        _LIBCPP_INLINE_VISIBILITY
        -: 1382:        basic_string(_InputIterator __first, _InputIterator __last, const allocator_type& __a);
        -: 1383:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1384:    _LIBCPP_INLINE_VISIBILITY
        -: 1385:    basic_string(initializer_list<value_type> __il);
        -: 1386:    _LIBCPP_INLINE_VISIBILITY
        -: 1387:    basic_string(initializer_list<value_type> __il, const allocator_type& __a);
        -: 1388:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1389:
        -: 1390:    ~basic_string();
        -: 1391:
        -: 1392:    basic_string& operator=(const basic_string& __str);
        -: 1393:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1394:    _LIBCPP_INLINE_VISIBILITY
        -: 1395:    basic_string& operator=(basic_string&& __str)
        -: 1396:        _NOEXCEPT_(__alloc_traits::propagate_on_container_move_assignment::value &&
        -: 1397:                   is_nothrow_move_assignable<allocator_type>::value);
        -: 1398:#endif
        -: 1399:    _LIBCPP_INLINE_VISIBILITY basic_string& operator=(const value_type* __s) {return assign(__s);}
        -: 1400:    basic_string& operator=(value_type __c);
        -: 1401:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1402:    _LIBCPP_INLINE_VISIBILITY
        -: 1403:    basic_string& operator=(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}
        -: 1404:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1405:
        -: 1406:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1407:    _LIBCPP_INLINE_VISIBILITY
        -: 1408:    iterator begin() _NOEXCEPT
        -: 1409:        {return iterator(this, __get_pointer());}
        -: 1410:    _LIBCPP_INLINE_VISIBILITY
        -: 1411:    const_iterator begin() const _NOEXCEPT
        -: 1412:        {return const_iterator(this, __get_pointer());}
        -: 1413:    _LIBCPP_INLINE_VISIBILITY
        -: 1414:    iterator end() _NOEXCEPT
        -: 1415:        {return iterator(this, __get_pointer() + size());}
        -: 1416:    _LIBCPP_INLINE_VISIBILITY
        -: 1417:    const_iterator end() const _NOEXCEPT
        -: 1418:        {return const_iterator(this, __get_pointer() + size());}
        -: 1419:#else
        -: 1420:    _LIBCPP_INLINE_VISIBILITY
        -: 1421:    iterator begin() _NOEXCEPT
        -: 1422:        {return iterator(__get_pointer());}
        -: 1423:    _LIBCPP_INLINE_VISIBILITY
        -: 1424:    const_iterator begin() const _NOEXCEPT
        -: 1425:        {return const_iterator(__get_pointer());}
        -: 1426:    _LIBCPP_INLINE_VISIBILITY
        -: 1427:    iterator end() _NOEXCEPT
        -: 1428:        {return iterator(__get_pointer() + size());}
        -: 1429:    _LIBCPP_INLINE_VISIBILITY
        -: 1430:    const_iterator end() const _NOEXCEPT
        -: 1431:        {return const_iterator(__get_pointer() + size());}
        -: 1432:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 1433:    _LIBCPP_INLINE_VISIBILITY
        -: 1434:    reverse_iterator rbegin() _NOEXCEPT
        -: 1435:        {return reverse_iterator(end());}
        -: 1436:    _LIBCPP_INLINE_VISIBILITY
        -: 1437:    const_reverse_iterator rbegin() const _NOEXCEPT
        -: 1438:        {return const_reverse_iterator(end());}
        -: 1439:    _LIBCPP_INLINE_VISIBILITY
        -: 1440:    reverse_iterator rend() _NOEXCEPT
        -: 1441:        {return reverse_iterator(begin());}
        -: 1442:    _LIBCPP_INLINE_VISIBILITY
        -: 1443:    const_reverse_iterator rend() const _NOEXCEPT
        -: 1444:        {return const_reverse_iterator(begin());}
        -: 1445:
        -: 1446:    _LIBCPP_INLINE_VISIBILITY
        -: 1447:    const_iterator cbegin() const _NOEXCEPT
        -: 1448:        {return begin();}
        -: 1449:    _LIBCPP_INLINE_VISIBILITY
        -: 1450:    const_iterator cend() const _NOEXCEPT
        -: 1451:        {return end();}
        -: 1452:    _LIBCPP_INLINE_VISIBILITY
        -: 1453:    const_reverse_iterator crbegin() const _NOEXCEPT
        -: 1454:        {return rbegin();}
        -: 1455:    _LIBCPP_INLINE_VISIBILITY
        -: 1456:    const_reverse_iterator crend() const _NOEXCEPT
        -: 1457:        {return rend();}
        -: 1458:
        -: 1459:    _LIBCPP_INLINE_VISIBILITY size_type size() const _NOEXCEPT
        -: 1460:        {return __is_long() ? __get_long_size() : __get_short_size();}
        -: 1461:    _LIBCPP_INLINE_VISIBILITY size_type length() const _NOEXCEPT {return size();}
        -: 1462:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT;
        -: 1463:    _LIBCPP_INLINE_VISIBILITY size_type capacity() const _NOEXCEPT
        -: 1464:        {return (__is_long() ? __get_long_cap() : __min_cap) - 1;}
        -: 1465:
        -: 1466:    void resize(size_type __n, value_type __c);
        -: 1467:    _LIBCPP_INLINE_VISIBILITY void resize(size_type __n) {resize(__n, value_type());}
        -: 1468:
        -: 1469:    void reserve(size_type res_arg = 0);
        -: 1470:    _LIBCPP_INLINE_VISIBILITY
        -: 1471:    void shrink_to_fit() _NOEXCEPT {reserve();}
        -: 1472:    _LIBCPP_INLINE_VISIBILITY
        -: 1473:    void clear() _NOEXCEPT;
        -: 1474:    _LIBCPP_INLINE_VISIBILITY bool empty() const _NOEXCEPT {return size() == 0;}
        -: 1475:
        -: 1476:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __pos) const;
        -: 1477:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __pos);
        -: 1478:
        -: 1479:    const_reference at(size_type __n) const;
        -: 1480:    reference       at(size_type __n);
        -: 1481:
        -: 1482:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const basic_string& __str) {return append(__str);}
        -: 1483:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(const value_type* __s)         {return append(__s);}
        -: 1484:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(value_type __c)            {push_back(__c); return *this;}
        -: 1485:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1486:    _LIBCPP_INLINE_VISIBILITY basic_string& operator+=(initializer_list<value_type> __il) {return append(__il);}
        -: 1487:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1488:
        -: 1489:    _LIBCPP_INLINE_VISIBILITY
        -: 1490:    basic_string& append(const basic_string& __str);
        -: 1491:    basic_string& append(const basic_string& __str, size_type __pos, size_type __n=npos);
        -: 1492:    basic_string& append(const value_type* __s, size_type __n);
        -: 1493:    basic_string& append(const value_type* __s);
        -: 1494:    basic_string& append(size_type __n, value_type __c);
        -: 1495:    template<class _InputIterator>
        -: 1496:        typename enable_if
        -: 1497:        <
        -: 1498:             __is_input_iterator  <_InputIterator>::value &&
        -: 1499:            !__is_forward_iterator<_InputIterator>::value,
        -: 1500:            basic_string&
        -: 1501:        >::type
        -: 1502:        append(_InputIterator __first, _InputIterator __last);
        -: 1503:    template<class _ForwardIterator>
        -: 1504:        typename enable_if
        -: 1505:        <
        -: 1506:            __is_forward_iterator<_ForwardIterator>::value,
        -: 1507:            basic_string&
        -: 1508:        >::type
        -: 1509:        append(_ForwardIterator __first, _ForwardIterator __last);
        -: 1510:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1511:    _LIBCPP_INLINE_VISIBILITY
        -: 1512:    basic_string& append(initializer_list<value_type> __il) {return append(__il.begin(), __il.size());}
        -: 1513:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1514:
        -: 1515:    void push_back(value_type __c);
        -: 1516:    _LIBCPP_INLINE_VISIBILITY
        -: 1517:    void pop_back();
        -: 1518:    _LIBCPP_INLINE_VISIBILITY reference       front();
        -: 1519:    _LIBCPP_INLINE_VISIBILITY const_reference front() const;
        -: 1520:    _LIBCPP_INLINE_VISIBILITY reference       back();
        -: 1521:    _LIBCPP_INLINE_VISIBILITY const_reference back() const;
        -: 1522:
        -: 1523:    _LIBCPP_INLINE_VISIBILITY
        -: 1524:    basic_string& assign(const basic_string& __str);
        -: 1525:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1526:    _LIBCPP_INLINE_VISIBILITY
        -: 1527:    basic_string& assign(basic_string&& str)
        -: 1528:        {*this = _VSTD::move(str); return *this;}
        -: 1529:#endif
        -: 1530:    basic_string& assign(const basic_string& __str, size_type __pos, size_type __n=npos);
        -: 1531:    basic_string& assign(const value_type* __s, size_type __n);
        -: 1532:    basic_string& assign(const value_type* __s);
        -: 1533:    basic_string& assign(size_type __n, value_type __c);
        -: 1534:    template<class _InputIterator>
        -: 1535:        typename enable_if
        -: 1536:        <
        -: 1537:             __is_input_iterator  <_InputIterator>::value &&
        -: 1538:            !__is_forward_iterator<_InputIterator>::value,
        -: 1539:            basic_string&
        -: 1540:        >::type
        -: 1541:        assign(_InputIterator __first, _InputIterator __last);
        -: 1542:    template<class _ForwardIterator>
        -: 1543:        typename enable_if
        -: 1544:        <
        -: 1545:            __is_forward_iterator<_ForwardIterator>::value,
        -: 1546:            basic_string&
        -: 1547:        >::type
        -: 1548:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -: 1549:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1550:    _LIBCPP_INLINE_VISIBILITY
        -: 1551:    basic_string& assign(initializer_list<value_type> __il) {return assign(__il.begin(), __il.size());}
        -: 1552:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1553:
        -: 1554:    _LIBCPP_INLINE_VISIBILITY
        -: 1555:    basic_string& insert(size_type __pos1, const basic_string& __str);
        -: 1556:    basic_string& insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n=npos);
        -: 1557:    basic_string& insert(size_type __pos, const value_type* __s, size_type __n);
        -: 1558:    basic_string& insert(size_type __pos, const value_type* __s);
        -: 1559:    basic_string& insert(size_type __pos, size_type __n, value_type __c);
        -: 1560:    iterator      insert(const_iterator __pos, value_type __c);
        -: 1561:    _LIBCPP_INLINE_VISIBILITY
        -: 1562:    iterator      insert(const_iterator __pos, size_type __n, value_type __c);
        -: 1563:    template<class _InputIterator>
        -: 1564:        typename enable_if
        -: 1565:        <
        -: 1566:             __is_input_iterator  <_InputIterator>::value &&
        -: 1567:            !__is_forward_iterator<_InputIterator>::value,
        -: 1568:            iterator
        -: 1569:        >::type
        -: 1570:        insert(const_iterator __pos, _InputIterator __first, _InputIterator __last);
        -: 1571:    template<class _ForwardIterator>
        -: 1572:        typename enable_if
        -: 1573:        <
        -: 1574:            __is_forward_iterator<_ForwardIterator>::value,
        -: 1575:            iterator
        -: 1576:        >::type
        -: 1577:        insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last);
        -: 1578:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1579:    _LIBCPP_INLINE_VISIBILITY
        -: 1580:    iterator insert(const_iterator __pos, initializer_list<value_type> __il)
        -: 1581:                    {return insert(__pos, __il.begin(), __il.end());}
        -: 1582:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1583:
        -: 1584:    basic_string& erase(size_type __pos = 0, size_type __n = npos);
        -: 1585:    _LIBCPP_INLINE_VISIBILITY
        -: 1586:    iterator      erase(const_iterator __pos);
        -: 1587:    _LIBCPP_INLINE_VISIBILITY
        -: 1588:    iterator      erase(const_iterator __first, const_iterator __last);
        -: 1589:
        -: 1590:    _LIBCPP_INLINE_VISIBILITY
        -: 1591:    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str);
        -: 1592:    basic_string& replace(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos);
        -: 1593:    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2);
        -: 1594:    basic_string& replace(size_type __pos, size_type __n1, const value_type* __s);
        -: 1595:    basic_string& replace(size_type __pos, size_type __n1, size_type __n2, value_type __c);
        -: 1596:    _LIBCPP_INLINE_VISIBILITY
        -: 1597:    basic_string& replace(const_iterator __i1, const_iterator __i2, const basic_string& __str);
        -: 1598:    _LIBCPP_INLINE_VISIBILITY
        -: 1599:    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n);
        -: 1600:    _LIBCPP_INLINE_VISIBILITY
        -: 1601:    basic_string& replace(const_iterator __i1, const_iterator __i2, const value_type* __s);
        -: 1602:    _LIBCPP_INLINE_VISIBILITY
        -: 1603:    basic_string& replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c);
        -: 1604:    template<class _InputIterator>
        -: 1605:        typename enable_if
        -: 1606:        <
        -: 1607:            __is_input_iterator<_InputIterator>::value,
        -: 1608:            basic_string&
        -: 1609:        >::type
        -: 1610:        replace(const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2);
        -: 1611:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1612:    _LIBCPP_INLINE_VISIBILITY
        -: 1613:    basic_string& replace(const_iterator __i1, const_iterator __i2, initializer_list<value_type> __il)
        -: 1614:        {return replace(__i1, __i2, __il.begin(), __il.end());}
        -: 1615:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 1616:
        -: 1617:    size_type copy(value_type* __s, size_type __n, size_type __pos = 0) const;
        -: 1618:    _LIBCPP_INLINE_VISIBILITY
        -: 1619:    basic_string substr(size_type __pos = 0, size_type __n = npos) const;
        -: 1620:
        -: 1621:    _LIBCPP_INLINE_VISIBILITY
        -: 1622:    void swap(basic_string& __str)
        -: 1623:#if _LIBCPP_STD_VER >= 14
        -: 1624:        _NOEXCEPT;
        -: 1625:#else
        -: 1626:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value || 
        -: 1627:                    __is_nothrow_swappable<allocator_type>::value);
        -: 1628:#endif
        -: 1629:
        -: 1630:    _LIBCPP_INLINE_VISIBILITY
        -: 1631:    const value_type* c_str() const _NOEXCEPT {return data();}
        -: 1632:    _LIBCPP_INLINE_VISIBILITY
        -: 1633:    const value_type* data() const _NOEXCEPT  {return _VSTD::__to_raw_pointer(__get_pointer());}
        -: 1634:
        -: 1635:    _LIBCPP_INLINE_VISIBILITY
        -: 1636:    allocator_type get_allocator() const _NOEXCEPT {return __alloc();}
        -: 1637:
        -: 1638:    _LIBCPP_INLINE_VISIBILITY
        -: 1639:    size_type find(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1640:    size_type find(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1641:    _LIBCPP_INLINE_VISIBILITY
        -: 1642:    size_type find(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1643:    size_type find(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1644:
        -: 1645:    _LIBCPP_INLINE_VISIBILITY
        -: 1646:    size_type rfind(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1647:    size_type rfind(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1648:    _LIBCPP_INLINE_VISIBILITY
        -: 1649:    size_type rfind(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1650:    size_type rfind(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1651:
        -: 1652:    _LIBCPP_INLINE_VISIBILITY
        -: 1653:    size_type find_first_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1654:    size_type find_first_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1655:    _LIBCPP_INLINE_VISIBILITY
        -: 1656:    size_type find_first_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1657:    _LIBCPP_INLINE_VISIBILITY
        -: 1658:    size_type find_first_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1659:
        -: 1660:    _LIBCPP_INLINE_VISIBILITY
        -: 1661:    size_type find_last_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1662:    size_type find_last_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1663:    _LIBCPP_INLINE_VISIBILITY
        -: 1664:    size_type find_last_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1665:    _LIBCPP_INLINE_VISIBILITY
        -: 1666:    size_type find_last_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1667:
        -: 1668:    _LIBCPP_INLINE_VISIBILITY
        -: 1669:    size_type find_first_not_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1670:    size_type find_first_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1671:    _LIBCPP_INLINE_VISIBILITY
        -: 1672:    size_type find_first_not_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1673:    _LIBCPP_INLINE_VISIBILITY
        -: 1674:    size_type find_first_not_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1675:
        -: 1676:    _LIBCPP_INLINE_VISIBILITY
        -: 1677:    size_type find_last_not_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1678:    size_type find_last_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1679:    _LIBCPP_INLINE_VISIBILITY
        -: 1680:    size_type find_last_not_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1681:    _LIBCPP_INLINE_VISIBILITY
        -: 1682:    size_type find_last_not_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1683:
        -: 1684:    _LIBCPP_INLINE_VISIBILITY
        -: 1685:    int compare(const basic_string& __str) const _NOEXCEPT;
        -: 1686:    _LIBCPP_INLINE_VISIBILITY
        -: 1687:    int compare(size_type __pos1, size_type __n1, const basic_string& __str) const;
        -: 1688:    int compare(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2=npos) const;
        -: 1689:    int compare(const value_type* __s) const _NOEXCEPT;
        -: 1690:    int compare(size_type __pos1, size_type __n1, const value_type* __s) const;
        -: 1691:    int compare(size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const;
        -: 1692:
        -: 1693:    _LIBCPP_INLINE_VISIBILITY bool __invariants() const;
        -: 1694:
        -: 1695:    _LIBCPP_INLINE_VISIBILITY
        -: 1696:    bool __is_long() const _NOEXCEPT
        -: 1697:        {return bool(__r_.first().__s.__size_ & __short_mask);}
        -: 1698:
        -: 1699:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1700:
        -: 1701:    bool __dereferenceable(const const_iterator* __i) const;
        -: 1702:    bool __decrementable(const const_iterator* __i) const;
        -: 1703:    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;
        -: 1704:    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;
        -: 1705:
        -: 1706:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 1707:
        -: 1708:private:
        -: 1709:    _LIBCPP_INLINE_VISIBILITY
        -: 1710:    allocator_type& __alloc() _NOEXCEPT
        -: 1711:        {return __r_.second();}
        -: 1712:    _LIBCPP_INLINE_VISIBILITY
        -: 1713:    const allocator_type& __alloc() const _NOEXCEPT
        -: 1714:        {return __r_.second();}
        -: 1715:
        -: 1716:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1717:
        -: 1718:    _LIBCPP_INLINE_VISIBILITY
        -: 1719:    void __set_short_size(size_type __s) _NOEXCEPT
        -: 1720:#   if _LIBCPP_BIG_ENDIAN
        -: 1721:        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}
        -: 1722:#   else
        -: 1723:        {__r_.first().__s.__size_ = (unsigned char)(__s);}
        -: 1724:#   endif
        -: 1725:
        -: 1726:    _LIBCPP_INLINE_VISIBILITY
        -: 1727:    size_type __get_short_size() const _NOEXCEPT
        -: 1728:#   if _LIBCPP_BIG_ENDIAN
        -: 1729:        {return __r_.first().__s.__size_ >> 1;}
        -: 1730:#   else
        -: 1731:        {return __r_.first().__s.__size_;}
        -: 1732:#   endif
        -: 1733:
        -: 1734:#else  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1735:
        -: 1736:    _LIBCPP_INLINE_VISIBILITY
        -: 1737:    void __set_short_size(size_type __s) _NOEXCEPT
        -: 1738:#   if _LIBCPP_BIG_ENDIAN
        -: 1739:        {__r_.first().__s.__size_ = (unsigned char)(__s);}
        -: 1740:#   else
        -: 1741:        {__r_.first().__s.__size_ = (unsigned char)(__s << 1);}
        -: 1742:#   endif
        -: 1743:
        -: 1744:    _LIBCPP_INLINE_VISIBILITY
        -: 1745:    size_type __get_short_size() const _NOEXCEPT
        -: 1746:#   if _LIBCPP_BIG_ENDIAN
        -: 1747:        {return __r_.first().__s.__size_;}
        -: 1748:#   else
        -: 1749:        {return __r_.first().__s.__size_ >> 1;}
        -: 1750:#   endif
        -: 1751:
        -: 1752:#endif  // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -: 1753:
        -: 1754:    _LIBCPP_INLINE_VISIBILITY
        -: 1755:    void __set_long_size(size_type __s) _NOEXCEPT
        -: 1756:        {__r_.first().__l.__size_ = __s;}
        -: 1757:    _LIBCPP_INLINE_VISIBILITY
        -: 1758:    size_type __get_long_size() const _NOEXCEPT
        -: 1759:        {return __r_.first().__l.__size_;}
        -: 1760:    _LIBCPP_INLINE_VISIBILITY
        -: 1761:    void __set_size(size_type __s) _NOEXCEPT
        -: 1762:        {if (__is_long()) __set_long_size(__s); else __set_short_size(__s);}
        -: 1763:
        -: 1764:    _LIBCPP_INLINE_VISIBILITY
        -: 1765:    void __set_long_cap(size_type __s) _NOEXCEPT
        -: 1766:        {__r_.first().__l.__cap_  = __long_mask | __s;}
        -: 1767:    _LIBCPP_INLINE_VISIBILITY
        -: 1768:    size_type __get_long_cap() const _NOEXCEPT
        -: 1769:        {return __r_.first().__l.__cap_ & size_type(~__long_mask);}
        -: 1770:
        -: 1771:    _LIBCPP_INLINE_VISIBILITY
        -: 1772:    void __set_long_pointer(pointer __p) _NOEXCEPT
        -: 1773:        {__r_.first().__l.__data_ = __p;}
        -: 1774:    _LIBCPP_INLINE_VISIBILITY
        -: 1775:    pointer __get_long_pointer() _NOEXCEPT
        -: 1776:        {return __r_.first().__l.__data_;}
        -: 1777:    _LIBCPP_INLINE_VISIBILITY
        -: 1778:    const_pointer __get_long_pointer() const _NOEXCEPT
        -: 1779:        {return __r_.first().__l.__data_;}
        -: 1780:    _LIBCPP_INLINE_VISIBILITY
        -: 1781:    pointer __get_short_pointer() _NOEXCEPT
        -: 1782:        {return pointer_traits<pointer>::pointer_to(__r_.first().__s.__data_[0]);}
        -: 1783:    _LIBCPP_INLINE_VISIBILITY
        -: 1784:    const_pointer __get_short_pointer() const _NOEXCEPT
        -: 1785:        {return pointer_traits<const_pointer>::pointer_to(__r_.first().__s.__data_[0]);}
        -: 1786:    _LIBCPP_INLINE_VISIBILITY
        -: 1787:    pointer __get_pointer() _NOEXCEPT
        -: 1788:        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}
        -: 1789:    _LIBCPP_INLINE_VISIBILITY
        -: 1790:    const_pointer __get_pointer() const _NOEXCEPT
        -: 1791:        {return __is_long() ? __get_long_pointer() : __get_short_pointer();}
        -: 1792:
        -: 1793:    _LIBCPP_INLINE_VISIBILITY
        -: 1794:    void __zero() _NOEXCEPT
        -: 1795:        {
        4: 1796:            size_type (&__a)[__n_words] = __r_.first().__r.__words;
       32: 1797:            for (unsigned __i = 0; __i < __n_words; ++__i)
       12: 1798:                __a[__i] = 0;
        4: 1799:        }
        -: 1800:
        -: 1801:    template <size_type __a> static
        -: 1802:        _LIBCPP_INLINE_VISIBILITY
        -: 1803:        size_type __align_it(size_type __s) _NOEXCEPT
        -: 1804:            {return __s + (__a-1) & ~(__a-1);}
        -: 1805:    enum {__alignment = 16};
        -: 1806:    static _LIBCPP_INLINE_VISIBILITY
        -: 1807:    size_type __recommend(size_type __s) _NOEXCEPT
        -: 1808:        {return (__s < __min_cap ? __min_cap :
        -: 1809:                 __align_it<sizeof(value_type) < __alignment ?
        -: 1810:                            __alignment/sizeof(value_type) : 1 > (__s+1)) - 1;}
        -: 1811:
        -: 1812:    void __init(const value_type* __s, size_type __sz, size_type __reserve);
        -: 1813:    void __init(const value_type* __s, size_type __sz);
        -: 1814:    void __init(size_type __n, value_type __c);
        -: 1815:
        -: 1816:    template <class _InputIterator>
        -: 1817:    typename enable_if
        -: 1818:    <
        -: 1819:         __is_input_iterator  <_InputIterator>::value &&
        -: 1820:        !__is_forward_iterator<_InputIterator>::value,
        -: 1821:        void
        -: 1822:    >::type
        -: 1823:    __init(_InputIterator __first, _InputIterator __last);
        -: 1824:
        -: 1825:    template <class _ForwardIterator>
        -: 1826:    typename enable_if
        -: 1827:    <
        -: 1828:        __is_forward_iterator<_ForwardIterator>::value,
        -: 1829:        void
        -: 1830:    >::type
        -: 1831:    __init(_ForwardIterator __first, _ForwardIterator __last);
        -: 1832:
        -: 1833:    void __grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 1834:                   size_type __n_copy,  size_type __n_del,     size_type __n_add = 0);
        -: 1835:    void __grow_by_and_replace(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 1836:                               size_type __n_copy,  size_type __n_del,
        -: 1837:                               size_type __n_add, const value_type* __p_new_stuff);
        -: 1838:
        -: 1839:    _LIBCPP_INLINE_VISIBILITY
        -: 1840:    void __erase_to_end(size_type __pos);
        -: 1841:
        -: 1842:    _LIBCPP_INLINE_VISIBILITY
        -: 1843:    void __copy_assign_alloc(const basic_string& __str)
        -: 1844:        {__copy_assign_alloc(__str, integral_constant<bool,
        -: 1845:                      __alloc_traits::propagate_on_container_copy_assignment::value>());}
        -: 1846:
        -: 1847:    _LIBCPP_INLINE_VISIBILITY
        -: 1848:    void __copy_assign_alloc(const basic_string& __str, true_type)
        -: 1849:        {
        -: 1850:            if (__alloc() != __str.__alloc())
        -: 1851:            {
        -: 1852:                clear();
        -: 1853:                shrink_to_fit();
        -: 1854:            }
        -: 1855:            __alloc() = __str.__alloc();
        -: 1856:        }
        -: 1857:
        -: 1858:    _LIBCPP_INLINE_VISIBILITY
        -: 1859:    void __copy_assign_alloc(const basic_string&, false_type) _NOEXCEPT
        -: 1860:        {}
        -: 1861:
        -: 1862:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 1863:    _LIBCPP_INLINE_VISIBILITY
        -: 1864:    void __move_assign(basic_string& __str, false_type);
        -: 1865:    _LIBCPP_INLINE_VISIBILITY
        -: 1866:    void __move_assign(basic_string& __str, true_type)
        -: 1867:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -: 1868:#endif
        -: 1869:
        -: 1870:    _LIBCPP_INLINE_VISIBILITY
        -: 1871:    void
        -: 1872:    __move_assign_alloc(basic_string& __str)
        -: 1873:        _NOEXCEPT_(
        -: 1874:            !__alloc_traits::propagate_on_container_move_assignment::value ||
        -: 1875:            is_nothrow_move_assignable<allocator_type>::value)
        -: 1876:    {__move_assign_alloc(__str, integral_constant<bool,
        -: 1877:                      __alloc_traits::propagate_on_container_move_assignment::value>());}
        -: 1878:
        -: 1879:    _LIBCPP_INLINE_VISIBILITY
        -: 1880:    void __move_assign_alloc(basic_string& __c, true_type)
        -: 1881:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 1882:        {
        -: 1883:            __alloc() = _VSTD::move(__c.__alloc());
        -: 1884:        }
        -: 1885:
        -: 1886:    _LIBCPP_INLINE_VISIBILITY
        -: 1887:    void __move_assign_alloc(basic_string&, false_type)
        -: 1888:        _NOEXCEPT
        -: 1889:        {}
        -: 1890:
        -: 1891:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -: 1892:    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(size_type);
        -: 1893:
        -: 1894:    friend basic_string operator+<>(const basic_string&, const basic_string&);
        -: 1895:    friend basic_string operator+<>(const value_type*, const basic_string&);
        -: 1896:    friend basic_string operator+<>(value_type, const basic_string&);
        -: 1897:    friend basic_string operator+<>(const basic_string&, const value_type*);
        -: 1898:    friend basic_string operator+<>(const basic_string&, value_type);
        -: 1899:};
        -: 1900:
        -: 1901:template <class _CharT, class _Traits, class _Allocator>
        -: 1902:inline _LIBCPP_INLINE_VISIBILITY
        -: 1903:void
        -: 1904:basic_string<_CharT, _Traits, _Allocator>::__invalidate_all_iterators()
        -: 1905:{
        -: 1906:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1907:    __get_db()->__invalidate_all(this);
        -: 1908:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 1909:}
        -: 1910:
        -: 1911:template <class _CharT, class _Traits, class _Allocator>
        -: 1912:inline _LIBCPP_INLINE_VISIBILITY
        -: 1913:void
        -: 1914:basic_string<_CharT, _Traits, _Allocator>::__invalidate_iterators_past(size_type
        -: 1915:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1916:                                                                        __pos
        -: 1917:#endif
        -: 1918:                                                                      )
        -: 1919:{
        -: 1920:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1921:    __c_node* __c = __get_db()->__find_c_and_lock(this);
        -: 1922:    if (__c)
        -: 1923:    {
        -: 1924:        const_pointer __new_last = __get_pointer() + __pos;
        -: 1925:        for (__i_node** __p = __c->end_; __p != __c->beg_; )
        -: 1926:        {
        -: 1927:            --__p;
        -: 1928:            const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);
        -: 1929:            if (__i->base() > __new_last)
        -: 1930:            {
        -: 1931:                (*__p)->__c_ = nullptr;
        -: 1932:                if (--__c->end_ != __p)
        -: 1933:                    memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));
        -: 1934:            }
        -: 1935:        }
        -: 1936:        __get_db()->unlock();
        -: 1937:    }
        -: 1938:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 1939:}
        -: 1940:
        -: 1941:template <class _CharT, class _Traits, class _Allocator>
        -: 1942:inline _LIBCPP_INLINE_VISIBILITY
        -: 1943:basic_string<_CharT, _Traits, _Allocator>::basic_string()
        -: 1944:    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
        8: 1945:{
        -: 1946:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1947:    __get_db()->__insert_c(this);
        -: 1948:#endif
        4: 1949:    __zero();
        8: 1950:}
        -: 1951:
        -: 1952:template <class _CharT, class _Traits, class _Allocator>
        -: 1953:inline _LIBCPP_INLINE_VISIBILITY
        -: 1954:basic_string<_CharT, _Traits, _Allocator>::basic_string(const allocator_type& __a)
        -: 1955:#if _LIBCPP_STD_VER <= 14
        -: 1956:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -: 1957:#else
        -: 1958:        _NOEXCEPT
        -: 1959:#endif
        -: 1960:: __r_(__a)
        -: 1961:{
        -: 1962:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1963:    __get_db()->__insert_c(this);
        -: 1964:#endif
        -: 1965:    __zero();
        -: 1966:}
        -: 1967:
        -: 1968:template <class _CharT, class _Traits, class _Allocator>
        -: 1969:void
        -: 1970:basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz, size_type __reserve)
        -: 1971:{
        -: 1972:    if (__reserve > max_size())
        -: 1973:        this->__throw_length_error();
        -: 1974:    pointer __p;
        -: 1975:    if (__reserve < __min_cap)
        -: 1976:    {
        -: 1977:        __set_short_size(__sz);
        -: 1978:        __p = __get_short_pointer();
        -: 1979:    }
        -: 1980:    else
        -: 1981:    {
        -: 1982:        size_type __cap = __recommend(__reserve);
        -: 1983:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 1984:        __set_long_pointer(__p);
        -: 1985:        __set_long_cap(__cap+1);
        -: 1986:        __set_long_size(__sz);
        -: 1987:    }
        -: 1988:    traits_type::copy(_VSTD::__to_raw_pointer(__p), __s, __sz);
        -: 1989:    traits_type::assign(__p[__sz], value_type());
        -: 1990:}
        -: 1991:
        -: 1992:template <class _CharT, class _Traits, class _Allocator>
        -: 1993:void
        -: 1994:basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz)
        -: 1995:{
        -: 1996:    if (__sz > max_size())
        -: 1997:        this->__throw_length_error();
        -: 1998:    pointer __p;
        -: 1999:    if (__sz < __min_cap)
        -: 2000:    {
        -: 2001:        __set_short_size(__sz);
        -: 2002:        __p = __get_short_pointer();
        -: 2003:    }
        -: 2004:    else
        -: 2005:    {
        -: 2006:        size_type __cap = __recommend(__sz);
        -: 2007:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2008:        __set_long_pointer(__p);
        -: 2009:        __set_long_cap(__cap+1);
        -: 2010:        __set_long_size(__sz);
        -: 2011:    }
        -: 2012:    traits_type::copy(_VSTD::__to_raw_pointer(__p), __s, __sz);
        -: 2013:    traits_type::assign(__p[__sz], value_type());
        -: 2014:}
        -: 2015:
        -: 2016:template <class _CharT, class _Traits, class _Allocator>
        -: 2017:inline _LIBCPP_INLINE_VISIBILITY
        -: 2018:basic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s)
        8: 2019:{
        -: 2020:    _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr");
        4: 2021:    __init(__s, traits_type::length(__s));
        -: 2022:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2023:    __get_db()->__insert_c(this);
        -: 2024:#endif
        8: 2025:}
        -: 2026:
        -: 2027:template <class _CharT, class _Traits, class _Allocator>
        -: 2028:inline _LIBCPP_INLINE_VISIBILITY
        -: 2029:basic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s, const allocator_type& __a)
        -: 2030:    : __r_(__a)
        -: 2031:{
        -: 2032:    _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*, allocator) detected nullptr");
        -: 2033:    __init(__s, traits_type::length(__s));
        -: 2034:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2035:    __get_db()->__insert_c(this);
        -: 2036:#endif
        -: 2037:}
        -: 2038:
        -: 2039:template <class _CharT, class _Traits, class _Allocator>
        -: 2040:inline _LIBCPP_INLINE_VISIBILITY
        -: 2041:basic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s, size_type __n)
        -: 2042:{
        -: 2043:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "basic_string(const char*, n) detected nullptr");
        -: 2044:    __init(__s, __n);
        -: 2045:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2046:    __get_db()->__insert_c(this);
        -: 2047:#endif
        -: 2048:}
        -: 2049:
        -: 2050:template <class _CharT, class _Traits, class _Allocator>
        -: 2051:inline _LIBCPP_INLINE_VISIBILITY
        -: 2052:basic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s, size_type __n, const allocator_type& __a)
        -: 2053:    : __r_(__a)
        -: 2054:{
        -: 2055:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "basic_string(const char*, n, allocator) detected nullptr");
        -: 2056:    __init(__s, __n);
        -: 2057:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2058:    __get_db()->__insert_c(this);
        -: 2059:#endif
        -: 2060:}
        -: 2061:
        -: 2062:template <class _CharT, class _Traits, class _Allocator>
        -: 2063:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str)
        -: 2064:    : __r_(__alloc_traits::select_on_container_copy_construction(__str.__alloc()))
        -: 2065:{
        -: 2066:    if (!__str.__is_long())
        -: 2067:        __r_.first().__r = __str.__r_.first().__r;
        -: 2068:    else
        -: 2069:        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());
        -: 2070:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2071:    __get_db()->__insert_c(this);
        -: 2072:#endif
        -: 2073:}
        -: 2074:
        -: 2075:template <class _CharT, class _Traits, class _Allocator>
        -: 2076:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str, const allocator_type& __a)
        -: 2077:    : __r_(__a)
        -: 2078:{
        -: 2079:    if (!__str.__is_long())
        -: 2080:        __r_.first().__r = __str.__r_.first().__r;
        -: 2081:    else
        -: 2082:        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());
        -: 2083:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2084:    __get_db()->__insert_c(this);
        -: 2085:#endif
        -: 2086:}
        -: 2087:
        -: 2088:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2089:
        -: 2090:template <class _CharT, class _Traits, class _Allocator>
        -: 2091:inline _LIBCPP_INLINE_VISIBILITY
        -: 2092:basic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str)
        -: 2093:#if _LIBCPP_STD_VER <= 14
        -: 2094:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 2095:#else
        -: 2096:        _NOEXCEPT
        -: 2097:#endif
        -: 2098:    : __r_(_VSTD::move(__str.__r_))
        -: 2099:{
        -: 2100:    __str.__zero();
        -: 2101:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2102:    __get_db()->__insert_c(this);
        -: 2103:    if (__is_long())
        -: 2104:        __get_db()->swap(this, &__str);
        -: 2105:#endif
        -: 2106:}
        -: 2107:
        -: 2108:template <class _CharT, class _Traits, class _Allocator>
        -: 2109:inline _LIBCPP_INLINE_VISIBILITY
        -: 2110:basic_string<_CharT, _Traits, _Allocator>::basic_string(basic_string&& __str, const allocator_type& __a)
        -: 2111:    : __r_(__a)
        -: 2112:{
        -: 2113:    if (__str.__is_long() && __a != __str.__alloc()) // copy, not move
        -: 2114:        __init(_VSTD::__to_raw_pointer(__str.__get_long_pointer()), __str.__get_long_size());
        -: 2115:    else
        -: 2116:    {
        -: 2117:        __r_.first().__r = __str.__r_.first().__r;
        -: 2118:        __str.__zero();
        -: 2119:    }
        -: 2120:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2121:    __get_db()->__insert_c(this);
        -: 2122:    if (__is_long())
        -: 2123:        __get_db()->swap(this, &__str);
        -: 2124:#endif
        -: 2125:}
        -: 2126:
        -: 2127:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2128:
        -: 2129:template <class _CharT, class _Traits, class _Allocator>
        -: 2130:void
        -: 2131:basic_string<_CharT, _Traits, _Allocator>::__init(size_type __n, value_type __c)
        -: 2132:{
        -: 2133:    if (__n > max_size())
        -: 2134:        this->__throw_length_error();
        -: 2135:    pointer __p;
        -: 2136:    if (__n < __min_cap)
        -: 2137:    {
        -: 2138:        __set_short_size(__n);
        -: 2139:        __p = __get_short_pointer();
        -: 2140:    }
        -: 2141:    else
        -: 2142:    {
        -: 2143:        size_type __cap = __recommend(__n);
        -: 2144:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2145:        __set_long_pointer(__p);
        -: 2146:        __set_long_cap(__cap+1);
        -: 2147:        __set_long_size(__n);
        -: 2148:    }
        -: 2149:    traits_type::assign(_VSTD::__to_raw_pointer(__p), __n, __c);
        -: 2150:    traits_type::assign(__p[__n], value_type());
        -: 2151:}
        -: 2152:
        -: 2153:template <class _CharT, class _Traits, class _Allocator>
        -: 2154:inline _LIBCPP_INLINE_VISIBILITY
        -: 2155:basic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, value_type __c)
        -: 2156:{
        -: 2157:    __init(__n, __c);
        -: 2158:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2159:    __get_db()->__insert_c(this);
        -: 2160:#endif
        -: 2161:}
        -: 2162:
        -: 2163:template <class _CharT, class _Traits, class _Allocator>
        -: 2164:inline _LIBCPP_INLINE_VISIBILITY
        -: 2165:basic_string<_CharT, _Traits, _Allocator>::basic_string(size_type __n, value_type __c, const allocator_type& __a)
        -: 2166:    : __r_(__a)
        -: 2167:{
        -: 2168:    __init(__n, __c);
        -: 2169:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2170:    __get_db()->__insert_c(this);
        -: 2171:#endif
        -: 2172:}
        -: 2173:
        -: 2174:template <class _CharT, class _Traits, class _Allocator>
        -: 2175:basic_string<_CharT, _Traits, _Allocator>::basic_string(const basic_string& __str, size_type __pos, size_type __n,
        -: 2176:                                                        const allocator_type& __a)
        -: 2177:    : __r_(__a)
        -: 2178:{
        -: 2179:    size_type __str_sz = __str.size();
        -: 2180:    if (__pos > __str_sz)
        -: 2181:        this->__throw_out_of_range();
        -: 2182:    __init(__str.data() + __pos, _VSTD::min(__n, __str_sz - __pos));
        -: 2183:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2184:    __get_db()->__insert_c(this);
        -: 2185:#endif
        -: 2186:}
        -: 2187:
        -: 2188:template <class _CharT, class _Traits, class _Allocator>
        -: 2189:template <class _InputIterator>
        -: 2190:typename enable_if
        -: 2191:<
        -: 2192:     __is_input_iterator  <_InputIterator>::value &&
        -: 2193:    !__is_forward_iterator<_InputIterator>::value,
        -: 2194:    void
        -: 2195:>::type
        -: 2196:basic_string<_CharT, _Traits, _Allocator>::__init(_InputIterator __first, _InputIterator __last)
        -: 2197:{
        -: 2198:    __zero();
        -: 2199:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2200:    try
        -: 2201:    {
        -: 2202:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2203:    for (; __first != __last; ++__first)
        -: 2204:        push_back(*__first);
        -: 2205:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2206:    }
        -: 2207:    catch (...)
        -: 2208:    {
        -: 2209:        if (__is_long())
        -: 2210:            __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2211:        throw;
        -: 2212:    }
        -: 2213:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2214:}
        -: 2215:
        -: 2216:template <class _CharT, class _Traits, class _Allocator>
        -: 2217:template <class _ForwardIterator>
        -: 2218:typename enable_if
        -: 2219:<
        -: 2220:    __is_forward_iterator<_ForwardIterator>::value,
        -: 2221:    void
        -: 2222:>::type
        -: 2223:basic_string<_CharT, _Traits, _Allocator>::__init(_ForwardIterator __first, _ForwardIterator __last)
        -: 2224:{
        -: 2225:    size_type __sz = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2226:    if (__sz > max_size())
        -: 2227:        this->__throw_length_error();
        -: 2228:    pointer __p;
        -: 2229:    if (__sz < __min_cap)
        -: 2230:    {
        -: 2231:        __set_short_size(__sz);
        -: 2232:        __p = __get_short_pointer();
        -: 2233:    }
        -: 2234:    else
        -: 2235:    {
        -: 2236:        size_type __cap = __recommend(__sz);
        -: 2237:        __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2238:        __set_long_pointer(__p);
        -: 2239:        __set_long_cap(__cap+1);
        -: 2240:        __set_long_size(__sz);
        -: 2241:    }
        -: 2242:    for (; __first != __last; ++__first, (void) ++__p)
        -: 2243:        traits_type::assign(*__p, *__first);
        -: 2244:    traits_type::assign(*__p, value_type());
        -: 2245:}
        -: 2246:
        -: 2247:template <class _CharT, class _Traits, class _Allocator>
        -: 2248:template<class _InputIterator>
        -: 2249:inline _LIBCPP_INLINE_VISIBILITY
        -: 2250:basic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last)
        -: 2251:{
        -: 2252:    __init(__first, __last);
        -: 2253:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2254:    __get_db()->__insert_c(this);
        -: 2255:#endif
        -: 2256:}
        -: 2257:
        -: 2258:template <class _CharT, class _Traits, class _Allocator>
        -: 2259:template<class _InputIterator>
        -: 2260:inline _LIBCPP_INLINE_VISIBILITY
        -: 2261:basic_string<_CharT, _Traits, _Allocator>::basic_string(_InputIterator __first, _InputIterator __last,
        -: 2262:                                                        const allocator_type& __a)
        -: 2263:    : __r_(__a)
        -: 2264:{
        -: 2265:    __init(__first, __last);
        -: 2266:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2267:    __get_db()->__insert_c(this);
        -: 2268:#endif
        -: 2269:}
        -: 2270:
        -: 2271:#ifndef _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2272:
        -: 2273:template <class _CharT, class _Traits, class _Allocator>
        -: 2274:inline _LIBCPP_INLINE_VISIBILITY
        -: 2275:basic_string<_CharT, _Traits, _Allocator>::basic_string(initializer_list<value_type> __il)
        -: 2276:{
        -: 2277:    __init(__il.begin(), __il.end());
        -: 2278:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2279:    __get_db()->__insert_c(this);
        -: 2280:#endif
        -: 2281:}
        -: 2282:
        -: 2283:template <class _CharT, class _Traits, class _Allocator>
        -: 2284:inline _LIBCPP_INLINE_VISIBILITY
        -: 2285:basic_string<_CharT, _Traits, _Allocator>::basic_string(initializer_list<value_type> __il, const allocator_type& __a)
        -: 2286:    : __r_(__a)
        -: 2287:{
        -: 2288:    __init(__il.begin(), __il.end());
        -: 2289:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2290:    __get_db()->__insert_c(this);
        -: 2291:#endif
        -: 2292:}
        -: 2293:
        -: 2294:#endif  // _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
        -: 2295:
        -: 2296:template <class _CharT, class _Traits, class _Allocator>
        -: 2297:basic_string<_CharT, _Traits, _Allocator>::~basic_string()
        -: 2298:{
        -: 2299:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2300:    __get_db()->__erase_c(this);
        -: 2301:#endif
        -: 2302:    if (__is_long())
        -: 2303:        __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2304:}
        -: 2305:
        -: 2306:template <class _CharT, class _Traits, class _Allocator>
        -: 2307:void
        -: 2308:basic_string<_CharT, _Traits, _Allocator>::__grow_by_and_replace
        -: 2309:    (size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 2310:     size_type __n_copy,  size_type __n_del,     size_type __n_add, const value_type* __p_new_stuff)
        -: 2311:{
        -: 2312:    size_type __ms = max_size();
        -: 2313:    if (__delta_cap > __ms - __old_cap - 1)
        -: 2314:        this->__throw_length_error();
        -: 2315:    pointer __old_p = __get_pointer();
        -: 2316:    size_type __cap = __old_cap < __ms / 2 - __alignment ?
        -: 2317:                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :
        -: 2318:                          __ms - 1;
        -: 2319:    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2320:    __invalidate_all_iterators();
        -: 2321:    if (__n_copy != 0)
        -: 2322:        traits_type::copy(_VSTD::__to_raw_pointer(__p),
        -: 2323:                          _VSTD::__to_raw_pointer(__old_p), __n_copy);
        -: 2324:    if (__n_add != 0)
        -: 2325:        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy, __p_new_stuff, __n_add);
        -: 2326:    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
        -: 2327:    if (__sec_cp_sz != 0)
        -: 2328:        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy + __n_add,
        -: 2329:                          _VSTD::__to_raw_pointer(__old_p) + __n_copy + __n_del, __sec_cp_sz);
        -: 2330:    if (__old_cap+1 != __min_cap)
        -: 2331:        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);
        -: 2332:    __set_long_pointer(__p);
        -: 2333:    __set_long_cap(__cap+1);
        -: 2334:    __old_sz = __n_copy + __n_add + __sec_cp_sz;
        -: 2335:    __set_long_size(__old_sz);
        -: 2336:    traits_type::assign(__p[__old_sz], value_type());
        -: 2337:}
        -: 2338:
        -: 2339:template <class _CharT, class _Traits, class _Allocator>
        -: 2340:void
        -: 2341:basic_string<_CharT, _Traits, _Allocator>::__grow_by(size_type __old_cap, size_type __delta_cap, size_type __old_sz,
        -: 2342:                                                     size_type __n_copy,  size_type __n_del,     size_type __n_add)
        -: 2343:{
        -: 2344:    size_type __ms = max_size();
        -: 2345:    if (__delta_cap > __ms - __old_cap)
        -: 2346:        this->__throw_length_error();
        -: 2347:    pointer __old_p = __get_pointer();
        -: 2348:    size_type __cap = __old_cap < __ms / 2 - __alignment ?
        -: 2349:                          __recommend(_VSTD::max(__old_cap + __delta_cap, 2 * __old_cap)) :
        -: 2350:                          __ms - 1;
        -: 2351:    pointer __p = __alloc_traits::allocate(__alloc(), __cap+1);
        -: 2352:    __invalidate_all_iterators();
        -: 2353:    if (__n_copy != 0)
        -: 2354:        traits_type::copy(_VSTD::__to_raw_pointer(__p),
        -: 2355:                          _VSTD::__to_raw_pointer(__old_p), __n_copy);
        -: 2356:    size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
        -: 2357:    if (__sec_cp_sz != 0)
        -: 2358:        traits_type::copy(_VSTD::__to_raw_pointer(__p) + __n_copy + __n_add,
        -: 2359:                          _VSTD::__to_raw_pointer(__old_p) + __n_copy + __n_del,
        -: 2360:                          __sec_cp_sz);
        -: 2361:    if (__old_cap+1 != __min_cap)
        -: 2362:        __alloc_traits::deallocate(__alloc(), __old_p, __old_cap+1);
        -: 2363:    __set_long_pointer(__p);
        -: 2364:    __set_long_cap(__cap+1);
        -: 2365:}
        -: 2366:
        -: 2367:// assign
        -: 2368:
        -: 2369:template <class _CharT, class _Traits, class _Allocator>
        -: 2370:basic_string<_CharT, _Traits, _Allocator>&
        -: 2371:basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s, size_type __n)
        -: 2372:{
        -: 2373:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::assign received nullptr");
        -: 2374:    size_type __cap = capacity();
        -: 2375:    if (__cap >= __n)
        -: 2376:    {
        -: 2377:        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2378:        traits_type::move(__p, __s, __n);
        -: 2379:        traits_type::assign(__p[__n], value_type());
        -: 2380:        __set_size(__n);
        -: 2381:        __invalidate_iterators_past(__n);
        -: 2382:    }
        -: 2383:    else
        -: 2384:    {
        -: 2385:        size_type __sz = size();
        -: 2386:        __grow_by_and_replace(__cap, __n - __cap, __sz, 0, __sz, __n, __s);
        -: 2387:    }
        -: 2388:    return *this;
        -: 2389:}
        -: 2390:
        -: 2391:template <class _CharT, class _Traits, class _Allocator>
        -: 2392:basic_string<_CharT, _Traits, _Allocator>&
        -: 2393:basic_string<_CharT, _Traits, _Allocator>::assign(size_type __n, value_type __c)
        -: 2394:{
        -: 2395:    size_type __cap = capacity();
        -: 2396:    if (__cap < __n)
        -: 2397:    {
        -: 2398:        size_type __sz = size();
        -: 2399:        __grow_by(__cap, __n - __cap, __sz, 0, __sz);
        -: 2400:    }
        -: 2401:    else
        -: 2402:        __invalidate_iterators_past(__n);
        -: 2403:    value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2404:    traits_type::assign(__p, __n, __c);
        -: 2405:    traits_type::assign(__p[__n], value_type());
        -: 2406:    __set_size(__n);
        -: 2407:    return *this;
        -: 2408:}
        -: 2409:
        -: 2410:template <class _CharT, class _Traits, class _Allocator>
        -: 2411:basic_string<_CharT, _Traits, _Allocator>&
        -: 2412:basic_string<_CharT, _Traits, _Allocator>::operator=(value_type __c)
        -: 2413:{
        -: 2414:    pointer __p;
        -: 2415:    if (__is_long())
        -: 2416:    {
        -: 2417:        __p = __get_long_pointer();
        -: 2418:        __set_long_size(1);
        -: 2419:    }
        -: 2420:    else
        -: 2421:    {
        -: 2422:        __p = __get_short_pointer();
        -: 2423:        __set_short_size(1);
        -: 2424:    }
        -: 2425:    traits_type::assign(*__p, __c);
        -: 2426:    traits_type::assign(*++__p, value_type());
        -: 2427:    __invalidate_iterators_past(1);
        -: 2428:    return *this;
        -: 2429:}
        -: 2430:
        -: 2431:template <class _CharT, class _Traits, class _Allocator>
        -: 2432:basic_string<_CharT, _Traits, _Allocator>&
        -: 2433:basic_string<_CharT, _Traits, _Allocator>::operator=(const basic_string& __str)
        -: 2434:{
        -: 2435:    if (this != &__str)
        -: 2436:    {
        -: 2437:        __copy_assign_alloc(__str);
        -: 2438:        assign(__str);
        -: 2439:    }
        -: 2440:    return *this;
        -: 2441:}
        -: 2442:
        -: 2443:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2444:
        -: 2445:template <class _CharT, class _Traits, class _Allocator>
        -: 2446:inline _LIBCPP_INLINE_VISIBILITY
        -: 2447:void
        -: 2448:basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, false_type)
        -: 2449:{
        -: 2450:    if (__alloc() != __str.__alloc())
        -: 2451:        assign(__str);
        -: 2452:    else
        -: 2453:        __move_assign(__str, true_type());
        -: 2454:}
        -: 2455:
        -: 2456:template <class _CharT, class _Traits, class _Allocator>
        -: 2457:inline _LIBCPP_INLINE_VISIBILITY
        -: 2458:void
        -: 2459:basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, true_type)
        -: 2460:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2461:{
        -: 2462:    clear();
        -: 2463:    shrink_to_fit();
        -: 2464:    __r_.first() = __str.__r_.first();
        -: 2465:    __move_assign_alloc(__str);
        -: 2466:    __str.__zero();
        -: 2467:}
        -: 2468:
        -: 2469:template <class _CharT, class _Traits, class _Allocator>
        -: 2470:inline _LIBCPP_INLINE_VISIBILITY
        -: 2471:basic_string<_CharT, _Traits, _Allocator>&
        -: 2472:basic_string<_CharT, _Traits, _Allocator>::operator=(basic_string&& __str)
        -: 2473:    _NOEXCEPT_(__alloc_traits::propagate_on_container_move_assignment::value &&
        -: 2474:               is_nothrow_move_assignable<allocator_type>::value)
        -: 2475:{
        -: 2476:    __move_assign(__str, integral_constant<bool,
        -: 2477:          __alloc_traits::propagate_on_container_move_assignment::value>());
        -: 2478:    return *this;
        -: 2479:}
        -: 2480:
        -: 2481:#endif
        -: 2482:
        -: 2483:template <class _CharT, class _Traits, class _Allocator>
        -: 2484:template<class _InputIterator>
        -: 2485:typename enable_if
        -: 2486:<
        -: 2487:     __is_input_iterator  <_InputIterator>::value &&
        -: 2488:    !__is_forward_iterator<_InputIterator>::value,
        -: 2489:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2490:>::type
        -: 2491:basic_string<_CharT, _Traits, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 2492:{
        -: 2493:    clear();
        -: 2494:    for (; __first != __last; ++__first)
        -: 2495:        push_back(*__first);
        -: 2496:    return *this;
        -: 2497:}
        -: 2498:
        -: 2499:template <class _CharT, class _Traits, class _Allocator>
        -: 2500:template<class _ForwardIterator>
        -: 2501:typename enable_if
        -: 2502:<
        -: 2503:    __is_forward_iterator<_ForwardIterator>::value,
        -: 2504:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2505:>::type
        -: 2506:basic_string<_CharT, _Traits, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 2507:{
        -: 2508:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2509:    size_type __cap = capacity();
        -: 2510:    if (__cap < __n)
        -: 2511:    {
        -: 2512:        size_type __sz = size();
        -: 2513:        __grow_by(__cap, __n - __cap, __sz, 0, __sz);
        -: 2514:    }
        -: 2515:    else
        -: 2516:        __invalidate_iterators_past(__n);
        -: 2517:    pointer __p = __get_pointer();
        -: 2518:    for (; __first != __last; ++__first, ++__p)
        -: 2519:        traits_type::assign(*__p, *__first);
        -: 2520:    traits_type::assign(*__p, value_type());
        -: 2521:    __set_size(__n);
        -: 2522:    return *this;
        -: 2523:}
        -: 2524:
        -: 2525:template <class _CharT, class _Traits, class _Allocator>
        -: 2526:inline _LIBCPP_INLINE_VISIBILITY
        -: 2527:basic_string<_CharT, _Traits, _Allocator>&
        -: 2528:basic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str)
        -: 2529:{
        -: 2530:    return assign(__str.data(), __str.size());
        -: 2531:}
        -: 2532:
        -: 2533:template <class _CharT, class _Traits, class _Allocator>
        -: 2534:basic_string<_CharT, _Traits, _Allocator>&
        -: 2535:basic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str, size_type __pos, size_type __n)
        -: 2536:{
        -: 2537:    size_type __sz = __str.size();
        -: 2538:    if (__pos > __sz)
        -: 2539:        this->__throw_out_of_range();
        -: 2540:    return assign(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2541:}
        -: 2542:
        -: 2543:template <class _CharT, class _Traits, class _Allocator>
        -: 2544:basic_string<_CharT, _Traits, _Allocator>&
        -: 2545:basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s)
        -: 2546:{
        -: 2547:    _LIBCPP_ASSERT(__s != nullptr, "string::assign received nullptr");
        -: 2548:    return assign(__s, traits_type::length(__s));
        -: 2549:}
        -: 2550:
        -: 2551:// append
        -: 2552:
        -: 2553:template <class _CharT, class _Traits, class _Allocator>
        -: 2554:basic_string<_CharT, _Traits, _Allocator>&
        -: 2555:basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n)
        -: 2556:{
        -: 2557:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::append received nullptr");
        -: 2558:    size_type __cap = capacity();
        -: 2559:    size_type __sz = size();
        -: 2560:    if (__cap - __sz >= __n)
        -: 2561:    {
        -: 2562:        if (__n)
        -: 2563:        {
        -: 2564:            value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2565:            traits_type::copy(__p + __sz, __s, __n);
        -: 2566:            __sz += __n;
        -: 2567:            __set_size(__sz);
        -: 2568:            traits_type::assign(__p[__sz], value_type());
        -: 2569:        }
        -: 2570:    }
        -: 2571:    else
        -: 2572:        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);
        -: 2573:    return *this;
        -: 2574:}
        -: 2575:
        -: 2576:template <class _CharT, class _Traits, class _Allocator>
        -: 2577:basic_string<_CharT, _Traits, _Allocator>&
        -: 2578:basic_string<_CharT, _Traits, _Allocator>::append(size_type __n, value_type __c)
        -: 2579:{
        -: 2580:    if (__n)
        -: 2581:    {
        -: 2582:        size_type __cap = capacity();
        -: 2583:        size_type __sz = size();
        -: 2584:        if (__cap - __sz < __n)
        -: 2585:            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2586:        pointer __p = __get_pointer();
        -: 2587:        traits_type::assign(_VSTD::__to_raw_pointer(__p) + __sz, __n, __c);
        -: 2588:        __sz += __n;
        -: 2589:        __set_size(__sz);
        -: 2590:        traits_type::assign(__p[__sz], value_type());
        -: 2591:    }
        -: 2592:    return *this;
        -: 2593:}
        -: 2594:
        -: 2595:template <class _CharT, class _Traits, class _Allocator>
        -: 2596:void
        -: 2597:basic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c)
        -: 2598:{
        -: 2599:    bool __is_short = !__is_long();
        -: 2600:    size_type __cap;
        -: 2601:    size_type __sz;
        -: 2602:    if (__is_short)
        -: 2603:    {
        -: 2604:        __cap = __min_cap - 1;
        -: 2605:        __sz = __get_short_size();
        -: 2606:    }
        -: 2607:    else
        -: 2608:    {
        -: 2609:        __cap = __get_long_cap() - 1;
        -: 2610:        __sz = __get_long_size();
        -: 2611:    }
        -: 2612:    if (__sz == __cap)
        -: 2613:    {
        -: 2614:        __grow_by(__cap, 1, __sz, __sz, 0);
        -: 2615:        __is_short = !__is_long();
        -: 2616:    }
        -: 2617:    pointer __p;
        -: 2618:    if (__is_short)
        -: 2619:    {
        -: 2620:        __p = __get_short_pointer() + __sz;
        -: 2621:        __set_short_size(__sz+1);
        -: 2622:    }
        -: 2623:    else
        -: 2624:    {
        -: 2625:        __p = __get_long_pointer() + __sz;
        -: 2626:        __set_long_size(__sz+1);
        -: 2627:    }
        -: 2628:    traits_type::assign(*__p, __c);
        -: 2629:    traits_type::assign(*++__p, value_type());
        -: 2630:}
        -: 2631:
        -: 2632:template <class _CharT, class _Traits, class _Allocator>
        -: 2633:template<class _InputIterator>
        -: 2634:typename enable_if
        -: 2635:<
        -: 2636:     __is_input_iterator  <_InputIterator>::value &&
        -: 2637:    !__is_forward_iterator<_InputIterator>::value,
        -: 2638:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2639:>::type
        -: 2640:basic_string<_CharT, _Traits, _Allocator>::append(_InputIterator __first, _InputIterator __last)
        -: 2641:{
        -: 2642:    for (; __first != __last; ++__first)
        -: 2643:        push_back(*__first);
        -: 2644:    return *this;
        -: 2645:}
        -: 2646:
        -: 2647:template <class _CharT, class _Traits, class _Allocator>
        -: 2648:template<class _ForwardIterator>
        -: 2649:typename enable_if
        -: 2650:<
        -: 2651:    __is_forward_iterator<_ForwardIterator>::value,
        -: 2652:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2653:>::type
        -: 2654:basic_string<_CharT, _Traits, _Allocator>::append(_ForwardIterator __first, _ForwardIterator __last)
        -: 2655:{
        -: 2656:    size_type __sz = size();
        -: 2657:    size_type __cap = capacity();
        -: 2658:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2659:    if (__n)
        -: 2660:    {
        -: 2661:        if (__cap - __sz < __n)
        -: 2662:            __grow_by(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2663:        pointer __p = __get_pointer() + __sz;
        -: 2664:        for (; __first != __last; ++__p, ++__first)
        -: 2665:            traits_type::assign(*__p, *__first);
        -: 2666:        traits_type::assign(*__p, value_type());
        -: 2667:        __set_size(__sz + __n);
        -: 2668:    }
        -: 2669:    return *this;
        -: 2670:}
        -: 2671:
        -: 2672:template <class _CharT, class _Traits, class _Allocator>
        -: 2673:inline _LIBCPP_INLINE_VISIBILITY
        -: 2674:basic_string<_CharT, _Traits, _Allocator>&
        -: 2675:basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str)
        -: 2676:{
        -: 2677:    return append(__str.data(), __str.size());
        -: 2678:}
        -: 2679:
        -: 2680:template <class _CharT, class _Traits, class _Allocator>
        -: 2681:basic_string<_CharT, _Traits, _Allocator>&
        -: 2682:basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str, size_type __pos, size_type __n)
        -: 2683:{
        -: 2684:    size_type __sz = __str.size();
        -: 2685:    if (__pos > __sz)
        -: 2686:        this->__throw_out_of_range();
        -: 2687:    return append(__str.data() + __pos, _VSTD::min(__n, __sz - __pos));
        -: 2688:}
        -: 2689:
        -: 2690:template <class _CharT, class _Traits, class _Allocator>
        -: 2691:basic_string<_CharT, _Traits, _Allocator>&
        -: 2692:basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s)
        -: 2693:{
        -: 2694:    _LIBCPP_ASSERT(__s != nullptr, "string::append received nullptr");
        -: 2695:    return append(__s, traits_type::length(__s));
        -: 2696:}
        -: 2697:
        -: 2698:// insert
        -: 2699:
        -: 2700:template <class _CharT, class _Traits, class _Allocator>
        -: 2701:basic_string<_CharT, _Traits, _Allocator>&
        -: 2702:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s, size_type __n)
        -: 2703:{
        -: 2704:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::insert received nullptr");
        -: 2705:    size_type __sz = size();
        -: 2706:    if (__pos > __sz)
        -: 2707:        this->__throw_out_of_range();
        -: 2708:    size_type __cap = capacity();
        -: 2709:    if (__cap - __sz >= __n)
        -: 2710:    {
        -: 2711:        if (__n)
        -: 2712:        {
        -: 2713:            value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2714:            size_type __n_move = __sz - __pos;
        -: 2715:            if (__n_move != 0)
        -: 2716:            {
        -: 2717:                if (__p + __pos <= __s && __s < __p + __sz)
        -: 2718:                    __s += __n;
        -: 2719:                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
        -: 2720:            }
        -: 2721:            traits_type::move(__p + __pos, __s, __n);
        -: 2722:            __sz += __n;
        -: 2723:            __set_size(__sz);
        -: 2724:            traits_type::assign(__p[__sz], value_type());
        -: 2725:        }
        -: 2726:    }
        -: 2727:    else
        -: 2728:        __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n, __s);
        -: 2729:    return *this;
        -: 2730:}
        -: 2731:
        -: 2732:template <class _CharT, class _Traits, class _Allocator>
        -: 2733:basic_string<_CharT, _Traits, _Allocator>&
        -: 2734:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, size_type __n, value_type __c)
        -: 2735:{
        -: 2736:    size_type __sz = size();
        -: 2737:    if (__pos > __sz)
        -: 2738:        this->__throw_out_of_range();
        -: 2739:    if (__n)
        -: 2740:    {
        -: 2741:        size_type __cap = capacity();
        -: 2742:        value_type* __p;
        -: 2743:        if (__cap - __sz >= __n)
        -: 2744:        {
        -: 2745:            __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2746:            size_type __n_move = __sz - __pos;
        -: 2747:            if (__n_move != 0)
        -: 2748:                traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
        -: 2749:        }
        -: 2750:        else
        -: 2751:        {
        -: 2752:            __grow_by(__cap, __sz + __n - __cap, __sz, __pos, 0, __n);
        -: 2753:            __p = _VSTD::__to_raw_pointer(__get_long_pointer());
        -: 2754:        }
        -: 2755:        traits_type::assign(__p + __pos, __n, __c);
        -: 2756:        __sz += __n;
        -: 2757:        __set_size(__sz);
        -: 2758:        traits_type::assign(__p[__sz], value_type());
        -: 2759:    }
        -: 2760:    return *this;
        -: 2761:}
        -: 2762:
        -: 2763:template <class _CharT, class _Traits, class _Allocator>
        -: 2764:template<class _InputIterator>
        -: 2765:typename enable_if
        -: 2766:<
        -: 2767:     __is_input_iterator  <_InputIterator>::value &&
        -: 2768:    !__is_forward_iterator<_InputIterator>::value,
        -: 2769:    typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2770:>::type
        -: 2771:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _InputIterator __first, _InputIterator __last)
        -: 2772:{
        -: 2773:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2774:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2775:        "string::insert(iterator, range) called with an iterator not"
        -: 2776:        " referring to this string");
        -: 2777:#endif
        -: 2778:    size_type __old_sz = size();
        -: 2779:    difference_type __ip = __pos - begin();
        -: 2780:    for (; __first != __last; ++__first)
        -: 2781:        push_back(*__first);
        -: 2782:    pointer __p = __get_pointer();
        -: 2783:    _VSTD::rotate(__p + __ip, __p + __old_sz, __p + size());
        -: 2784:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2785:    return iterator(this, __p + __ip);
        -: 2786:#else
        -: 2787:    return iterator(__p + __ip);
        -: 2788:#endif
        -: 2789:}
        -: 2790:
        -: 2791:template <class _CharT, class _Traits, class _Allocator>
        -: 2792:template<class _ForwardIterator>
        -: 2793:typename enable_if
        -: 2794:<
        -: 2795:    __is_forward_iterator<_ForwardIterator>::value,
        -: 2796:    typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2797:>::type
        -: 2798:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last)
        -: 2799:{
        -: 2800:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2801:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2802:        "string::insert(iterator, range) called with an iterator not"
        -: 2803:        " referring to this string");
        -: 2804:#endif
        -: 2805:    size_type __ip = static_cast<size_type>(__pos - begin());
        -: 2806:    size_type __sz = size();
        -: 2807:    size_type __cap = capacity();
        -: 2808:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2809:    if (__n)
        -: 2810:    {
        -: 2811:        value_type* __p;
        -: 2812:        if (__cap - __sz >= __n)
        -: 2813:        {
        -: 2814:            __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2815:            size_type __n_move = __sz - __ip;
        -: 2816:            if (__n_move != 0)
        -: 2817:                traits_type::move(__p + __ip + __n, __p + __ip, __n_move);
        -: 2818:        }
        -: 2819:        else
        -: 2820:        {
        -: 2821:            __grow_by(__cap, __sz + __n - __cap, __sz, __ip, 0, __n);
        -: 2822:            __p = _VSTD::__to_raw_pointer(__get_long_pointer());
        -: 2823:        }
        -: 2824:        __sz += __n;
        -: 2825:        __set_size(__sz);
        -: 2826:        traits_type::assign(__p[__sz], value_type());
        -: 2827:        for (__p += __ip; __first != __last; ++__p, ++__first)
        -: 2828:            traits_type::assign(*__p, *__first);
        -: 2829:    }
        -: 2830:    return begin() + __ip;
        -: 2831:}
        -: 2832:
        -: 2833:template <class _CharT, class _Traits, class _Allocator>
        -: 2834:inline _LIBCPP_INLINE_VISIBILITY
        -: 2835:basic_string<_CharT, _Traits, _Allocator>&
        -: 2836:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str)
        -: 2837:{
        -: 2838:    return insert(__pos1, __str.data(), __str.size());
        -: 2839:}
        -: 2840:
        -: 2841:template <class _CharT, class _Traits, class _Allocator>
        -: 2842:basic_string<_CharT, _Traits, _Allocator>&
        -: 2843:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const basic_string& __str,
        -: 2844:                                                  size_type __pos2, size_type __n)
        -: 2845:{
        -: 2846:    size_type __str_sz = __str.size();
        -: 2847:    if (__pos2 > __str_sz)
        -: 2848:        this->__throw_out_of_range();
        -: 2849:    return insert(__pos1, __str.data() + __pos2, _VSTD::min(__n, __str_sz - __pos2));
        -: 2850:}
        -: 2851:
        -: 2852:template <class _CharT, class _Traits, class _Allocator>
        -: 2853:basic_string<_CharT, _Traits, _Allocator>&
        -: 2854:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s)
        -: 2855:{
        -: 2856:    _LIBCPP_ASSERT(__s != nullptr, "string::insert received nullptr");
        -: 2857:    return insert(__pos, __s, traits_type::length(__s));
        -: 2858:}
        -: 2859:
        -: 2860:template <class _CharT, class _Traits, class _Allocator>
        -: 2861:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2862:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, value_type __c)
        -: 2863:{
        -: 2864:    size_type __ip = static_cast<size_type>(__pos - begin());
        -: 2865:    size_type __sz = size();
        -: 2866:    size_type __cap = capacity();
        -: 2867:    value_type* __p;
        -: 2868:    if (__cap == __sz)
        -: 2869:    {
        -: 2870:        __grow_by(__cap, 1, __sz, __ip, 0, 1);
        -: 2871:        __p = _VSTD::__to_raw_pointer(__get_long_pointer());
        -: 2872:    }
        -: 2873:    else
        -: 2874:    {
        -: 2875:        __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2876:        size_type __n_move = __sz - __ip;
        -: 2877:        if (__n_move != 0)
        -: 2878:            traits_type::move(__p + __ip + 1, __p + __ip, __n_move);
        -: 2879:    }
        -: 2880:    traits_type::assign(__p[__ip], __c);
        -: 2881:    traits_type::assign(__p[++__sz], value_type());
        -: 2882:    __set_size(__sz);
        -: 2883:    return begin() + static_cast<difference_type>(__ip);
        -: 2884:}
        -: 2885:
        -: 2886:template <class _CharT, class _Traits, class _Allocator>
        -: 2887:inline _LIBCPP_INLINE_VISIBILITY
        -: 2888:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 2889:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, size_type __n, value_type __c)
        -: 2890:{
        -: 2891:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2892:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 2893:        "string::insert(iterator, n, value) called with an iterator not"
        -: 2894:        " referring to this string");
        -: 2895:#endif
        -: 2896:    difference_type __p = __pos - begin();
        -: 2897:    insert(static_cast<size_type>(__p), __n, __c);
        -: 2898:    return begin() + __p;
        -: 2899:}
        -: 2900:
        -: 2901:// replace
        -: 2902:
        -: 2903:template <class _CharT, class _Traits, class _Allocator>
        -: 2904:basic_string<_CharT, _Traits, _Allocator>&
        -: 2905:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2)
        -: 2906:{
        -: 2907:    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, "string::replace received nullptr");
        -: 2908:    size_type __sz = size();
        -: 2909:    if (__pos > __sz)
        -: 2910:        this->__throw_out_of_range();
        -: 2911:    __n1 = _VSTD::min(__n1, __sz - __pos);
        -: 2912:    size_type __cap = capacity();
        -: 2913:    if (__cap - __sz + __n1 >= __n2)
        -: 2914:    {
        -: 2915:        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2916:        if (__n1 != __n2)
        -: 2917:        {
        -: 2918:            size_type __n_move = __sz - __pos - __n1;
        -: 2919:            if (__n_move != 0)
        -: 2920:            {
        -: 2921:                if (__n1 > __n2)
        -: 2922:                {
        -: 2923:                    traits_type::move(__p + __pos, __s, __n2);
        -: 2924:                    traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 2925:                    goto __finish;
        -: 2926:                }
        -: 2927:                if (__p + __pos < __s && __s < __p + __sz)
        -: 2928:                {
        -: 2929:                    if (__p + __pos + __n1 <= __s)
        -: 2930:                        __s += __n2 - __n1;
        -: 2931:                    else // __p + __pos < __s < __p + __pos + __n1
        -: 2932:                    {
        -: 2933:                        traits_type::move(__p + __pos, __s, __n1);
        -: 2934:                        __pos += __n1;
        -: 2935:                        __s += __n2;
        -: 2936:                        __n2 -= __n1;
        -: 2937:                        __n1 = 0;
        -: 2938:                    }
        -: 2939:                }
        -: 2940:                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 2941:            }
        -: 2942:        }
        -: 2943:        traits_type::move(__p + __pos, __s, __n2);
        -: 2944:__finish:
        -: 2945:        __sz += __n2 - __n1;
        -: 2946:        __set_size(__sz);
        -: 2947:        __invalidate_iterators_past(__sz);
        -: 2948:        traits_type::assign(__p[__sz], value_type());
        -: 2949:    }
        -: 2950:    else
        -: 2951:        __grow_by_and_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2, __s);
        -: 2952:    return *this;
        -: 2953:}
        -: 2954:
        -: 2955:template <class _CharT, class _Traits, class _Allocator>
        -: 2956:basic_string<_CharT, _Traits, _Allocator>&
        -: 2957:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, size_type __n2, value_type __c)
        -: 2958:{
        -: 2959:    size_type __sz = size();
        -: 2960:    if (__pos > __sz)
        -: 2961:        this->__throw_out_of_range();
        -: 2962:    __n1 = _VSTD::min(__n1, __sz - __pos);
        -: 2963:    size_type __cap = capacity();
        -: 2964:    value_type* __p;
        -: 2965:    if (__cap - __sz + __n1 >= __n2)
        -: 2966:    {
        -: 2967:        __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 2968:        if (__n1 != __n2)
        -: 2969:        {
        -: 2970:            size_type __n_move = __sz - __pos - __n1;
        -: 2971:            if (__n_move != 0)
        -: 2972:                traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 2973:        }
        -: 2974:    }
        -: 2975:    else
        -: 2976:    {
        -: 2977:        __grow_by(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2);
        -: 2978:        __p = _VSTD::__to_raw_pointer(__get_long_pointer());
        -: 2979:    }
        -: 2980:    traits_type::assign(__p + __pos, __n2, __c);
        -: 2981:    __sz += __n2 - __n1;
        -: 2982:    __set_size(__sz);
        -: 2983:    __invalidate_iterators_past(__sz);
        -: 2984:    traits_type::assign(__p[__sz], value_type());
        -: 2985:    return *this;
        -: 2986:}
        -: 2987:
        -: 2988:template <class _CharT, class _Traits, class _Allocator>
        -: 2989:template<class _InputIterator>
        -: 2990:typename enable_if
        -: 2991:<
        -: 2992:    __is_input_iterator<_InputIterator>::value,
        -: 2993:    basic_string<_CharT, _Traits, _Allocator>&
        -: 2994:>::type
        -: 2995:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2,
        -: 2996:                                                   _InputIterator __j1, _InputIterator __j2)
        -: 2997:{
        -: 2998:    for (; true; ++__i1, ++__j1)
        -: 2999:    {
        -: 3000:        if (__i1 == __i2)
        -: 3001:        {
        -: 3002:            if (__j1 != __j2)
        -: 3003:                insert(__i1, __j1, __j2);
        -: 3004:            break;
        -: 3005:        }
        -: 3006:        if (__j1 == __j2)
        -: 3007:        {
        -: 3008:            erase(__i1, __i2);
        -: 3009:            break;
        -: 3010:        }
        -: 3011:        traits_type::assign(const_cast<value_type&>(*__i1), *__j1);
        -: 3012:    }
        -: 3013:    return *this;
        -: 3014:}
        -: 3015:
        -: 3016:template <class _CharT, class _Traits, class _Allocator>
        -: 3017:inline _LIBCPP_INLINE_VISIBILITY
        -: 3018:basic_string<_CharT, _Traits, _Allocator>&
        -: 3019:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str)
        -: 3020:{
        -: 3021:    return replace(__pos1, __n1, __str.data(), __str.size());
        -: 3022:}
        -: 3023:
        -: 3024:template <class _CharT, class _Traits, class _Allocator>
        -: 3025:basic_string<_CharT, _Traits, _Allocator>&
        -: 3026:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos1, size_type __n1, const basic_string& __str,
        -: 3027:                                                   size_type __pos2, size_type __n2)
        -: 3028:{
        -: 3029:    size_type __str_sz = __str.size();
        -: 3030:    if (__pos2 > __str_sz)
        -: 3031:        this->__throw_out_of_range();
        -: 3032:    return replace(__pos1, __n1, __str.data() + __pos2, _VSTD::min(__n2, __str_sz - __pos2));
        -: 3033:}
        -: 3034:
        -: 3035:template <class _CharT, class _Traits, class _Allocator>
        -: 3036:basic_string<_CharT, _Traits, _Allocator>&
        -: 3037:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s)
        -: 3038:{
        -: 3039:    _LIBCPP_ASSERT(__s != nullptr, "string::replace received nullptr");
        -: 3040:    return replace(__pos, __n1, __s, traits_type::length(__s));
        -: 3041:}
        -: 3042:
        -: 3043:template <class _CharT, class _Traits, class _Allocator>
        -: 3044:inline _LIBCPP_INLINE_VISIBILITY
        -: 3045:basic_string<_CharT, _Traits, _Allocator>&
        -: 3046:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const basic_string& __str)
        -: 3047:{
        -: 3048:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1),
        -: 3049:                   __str.data(), __str.size());
        -: 3050:}
        -: 3051:
        -: 3052:template <class _CharT, class _Traits, class _Allocator>
        -: 3053:inline _LIBCPP_INLINE_VISIBILITY
        -: 3054:basic_string<_CharT, _Traits, _Allocator>&
        -: 3055:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n)
        -: 3056:{
        -: 3057:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s, __n);
        -: 3058:}
        -: 3059:
        -: 3060:template <class _CharT, class _Traits, class _Allocator>
        -: 3061:inline _LIBCPP_INLINE_VISIBILITY
        -: 3062:basic_string<_CharT, _Traits, _Allocator>&
        -: 3063:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, const value_type* __s)
        -: 3064:{
        -: 3065:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s);
        -: 3066:}
        -: 3067:
        -: 3068:template <class _CharT, class _Traits, class _Allocator>
        -: 3069:inline _LIBCPP_INLINE_VISIBILITY
        -: 3070:basic_string<_CharT, _Traits, _Allocator>&
        -: 3071:basic_string<_CharT, _Traits, _Allocator>::replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c)
        -: 3072:{
        -: 3073:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __n, __c);
        -: 3074:}
        -: 3075:
        -: 3076:// erase
        -: 3077:
        -: 3078:template <class _CharT, class _Traits, class _Allocator>
        -: 3079:basic_string<_CharT, _Traits, _Allocator>&
        -: 3080:basic_string<_CharT, _Traits, _Allocator>::erase(size_type __pos, size_type __n)
        -: 3081:{
        -: 3082:    size_type __sz = size();
        -: 3083:    if (__pos > __sz)
        -: 3084:        this->__throw_out_of_range();
        -: 3085:    if (__n)
        -: 3086:    {
        -: 3087:        value_type* __p = _VSTD::__to_raw_pointer(__get_pointer());
        -: 3088:        __n = _VSTD::min(__n, __sz - __pos);
        -: 3089:        size_type __n_move = __sz - __pos - __n;
        -: 3090:        if (__n_move != 0)
        -: 3091:            traits_type::move(__p + __pos, __p + __pos + __n, __n_move);
        -: 3092:        __sz -= __n;
        -: 3093:        __set_size(__sz);
        -: 3094:        __invalidate_iterators_past(__sz);
        -: 3095:        traits_type::assign(__p[__sz], value_type());
        -: 3096:    }
        -: 3097:    return *this;
        -: 3098:}
        -: 3099:
        -: 3100:template <class _CharT, class _Traits, class _Allocator>
        -: 3101:inline _LIBCPP_INLINE_VISIBILITY
        -: 3102:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3103:basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __pos)
        -: 3104:{
        -: 3105:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 3106:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__pos) == this,
        -: 3107:        "string::erase(iterator) called with an iterator not"
        -: 3108:        " referring to this string");
        -: 3109:#endif
        -: 3110:    _LIBCPP_ASSERT(__pos != end(),
        -: 3111:        "string::erase(iterator) called with a non-dereferenceable iterator");
        -: 3112:    iterator __b = begin();
        -: 3113:    size_type __r = static_cast<size_type>(__pos - __b);
        -: 3114:    erase(__r, 1);
        -: 3115:    return __b + static_cast<difference_type>(__r);
        -: 3116:}
        -: 3117:
        -: 3118:template <class _CharT, class _Traits, class _Allocator>
        -: 3119:inline _LIBCPP_INLINE_VISIBILITY
        -: 3120:typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3121:basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 3122:{
        -: 3123:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 3124:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,
        -: 3125:        "string::erase(iterator,  iterator) called with an iterator not"
        -: 3126:        " referring to this string");
        -: 3127:#endif
        -: 3128:    _LIBCPP_ASSERT(__first <= __last, "string::erase(first, last) called with invalid range");
        -: 3129:    iterator __b = begin();
        -: 3130:    size_type __r = static_cast<size_type>(__first - __b);
        -: 3131:    erase(__r, static_cast<size_type>(__last - __first));
        -: 3132:    return __b + static_cast<difference_type>(__r);
        -: 3133:}
        -: 3134:
        -: 3135:template <class _CharT, class _Traits, class _Allocator>
        -: 3136:inline _LIBCPP_INLINE_VISIBILITY
        -: 3137:void
        -: 3138:basic_string<_CharT, _Traits, _Allocator>::pop_back()
        -: 3139:{
        -: 3140:    _LIBCPP_ASSERT(!empty(), "string::pop_back(): string is already empty");
        -: 3141:    size_type __sz;
        -: 3142:    if (__is_long())
        -: 3143:    {
        -: 3144:        __sz = __get_long_size() - 1;
        -: 3145:        __set_long_size(__sz);
        -: 3146:        traits_type::assign(*(__get_long_pointer() + __sz), value_type());
        -: 3147:    }
        -: 3148:    else
        -: 3149:    {
        -: 3150:        __sz = __get_short_size() - 1;
        -: 3151:        __set_short_size(__sz);
        -: 3152:        traits_type::assign(*(__get_short_pointer() + __sz), value_type());
        -: 3153:    }
        -: 3154:    __invalidate_iterators_past(__sz);
        -: 3155:}
        -: 3156:
        -: 3157:template <class _CharT, class _Traits, class _Allocator>
        -: 3158:inline _LIBCPP_INLINE_VISIBILITY
        -: 3159:void
        -: 3160:basic_string<_CharT, _Traits, _Allocator>::clear() _NOEXCEPT
        -: 3161:{
        -: 3162:    __invalidate_all_iterators();
        -: 3163:    if (__is_long())
        -: 3164:    {
        -: 3165:        traits_type::assign(*__get_long_pointer(), value_type());
        -: 3166:        __set_long_size(0);
        -: 3167:    }
        -: 3168:    else
        -: 3169:    {
        -: 3170:        traits_type::assign(*__get_short_pointer(), value_type());
        -: 3171:        __set_short_size(0);
        -: 3172:    }
        -: 3173:}
        -: 3174:
        -: 3175:template <class _CharT, class _Traits, class _Allocator>
        -: 3176:inline _LIBCPP_INLINE_VISIBILITY
        -: 3177:void
        -: 3178:basic_string<_CharT, _Traits, _Allocator>::__erase_to_end(size_type __pos)
        -: 3179:{
        -: 3180:    if (__is_long())
        -: 3181:    {
        -: 3182:        traits_type::assign(*(__get_long_pointer() + __pos), value_type());
        -: 3183:        __set_long_size(__pos);
        -: 3184:    }
        -: 3185:    else
        -: 3186:    {
        -: 3187:        traits_type::assign(*(__get_short_pointer() + __pos), value_type());
        -: 3188:        __set_short_size(__pos);
        -: 3189:    }
        -: 3190:    __invalidate_iterators_past(__pos);
        -: 3191:}
        -: 3192:
        -: 3193:template <class _CharT, class _Traits, class _Allocator>
        -: 3194:void
        -: 3195:basic_string<_CharT, _Traits, _Allocator>::resize(size_type __n, value_type __c)
        -: 3196:{
        -: 3197:    size_type __sz = size();
        -: 3198:    if (__n > __sz)
        -: 3199:        append(__n - __sz, __c);
        -: 3200:    else
        -: 3201:        __erase_to_end(__n);
        -: 3202:}
        -: 3203:
        -: 3204:template <class _CharT, class _Traits, class _Allocator>
        -: 3205:inline _LIBCPP_INLINE_VISIBILITY
        -: 3206:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3207:basic_string<_CharT, _Traits, _Allocator>::max_size() const _NOEXCEPT
        -: 3208:{
        -: 3209:    size_type __m = __alloc_traits::max_size(__alloc());
        -: 3210:#if _LIBCPP_BIG_ENDIAN
        -: 3211:    return (__m <= ~__long_mask ? __m : __m/2) - __alignment;
        -: 3212:#else
        -: 3213:    return __m - __alignment;
        -: 3214:#endif
        -: 3215:}
        -: 3216:
        -: 3217:template <class _CharT, class _Traits, class _Allocator>
        -: 3218:void
        -: 3219:basic_string<_CharT, _Traits, _Allocator>::reserve(size_type __res_arg)
        -: 3220:{
        -: 3221:    if (__res_arg > max_size())
        -: 3222:        this->__throw_length_error();
        -: 3223:    size_type __cap = capacity();
        -: 3224:    size_type __sz = size();
        -: 3225:    __res_arg = _VSTD::max(__res_arg, __sz);
        -: 3226:    __res_arg = __recommend(__res_arg);
        -: 3227:    if (__res_arg != __cap)
        -: 3228:    {
        -: 3229:        pointer __new_data, __p;
        -: 3230:        bool __was_long, __now_long;
        -: 3231:        if (__res_arg == __min_cap - 1)
        -: 3232:        {
        -: 3233:            __was_long = true;
        -: 3234:            __now_long = false;
        -: 3235:            __new_data = __get_short_pointer();
        -: 3236:            __p = __get_long_pointer();
        -: 3237:        }
        -: 3238:        else
        -: 3239:        {
        -: 3240:            if (__res_arg > __cap)
        -: 3241:                __new_data = __alloc_traits::allocate(__alloc(), __res_arg+1);
        -: 3242:            else
        -: 3243:            {
        -: 3244:            #ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3245:                try
        -: 3246:                {
        -: 3247:            #endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3248:                    __new_data = __alloc_traits::allocate(__alloc(), __res_arg+1);
        -: 3249:            #ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3250:                }
        -: 3251:                catch (...)
        -: 3252:                {
        -: 3253:                    return;
        -: 3254:                }
        -: 3255:            #else  // _LIBCPP_NO_EXCEPTIONS
        -: 3256:                if (__new_data == nullptr)
        -: 3257:                    return;
        -: 3258:            #endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3259:            }
        -: 3260:            __now_long = true;
        -: 3261:            __was_long = __is_long();
        -: 3262:            __p = __get_pointer();
        -: 3263:        }
        -: 3264:        traits_type::copy(_VSTD::__to_raw_pointer(__new_data),
        -: 3265:                          _VSTD::__to_raw_pointer(__p), size()+1);
        -: 3266:        if (__was_long)
        -: 3267:            __alloc_traits::deallocate(__alloc(), __p, __cap+1);
        -: 3268:        if (__now_long)
        -: 3269:        {
        -: 3270:            __set_long_cap(__res_arg+1);
        -: 3271:            __set_long_size(__sz);
        -: 3272:            __set_long_pointer(__new_data);
        -: 3273:        }
        -: 3274:        else
        -: 3275:            __set_short_size(__sz);
        -: 3276:        __invalidate_all_iterators();
        -: 3277:    }
        -: 3278:}
        -: 3279:
        -: 3280:template <class _CharT, class _Traits, class _Allocator>
        -: 3281:inline _LIBCPP_INLINE_VISIBILITY
        -: 3282:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3283:basic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos) const
        -: 3284:{
        -: 3285:    _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds");
        -: 3286:    return *(data() + __pos);
        -: 3287:}
        -: 3288:
        -: 3289:template <class _CharT, class _Traits, class _Allocator>
        -: 3290:inline _LIBCPP_INLINE_VISIBILITY
        -: 3291:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3292:basic_string<_CharT, _Traits, _Allocator>::operator[](size_type __pos)
        -: 3293:{
        -: 3294:    _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds");
        -: 3295:    return *(__get_pointer() + __pos);
        -: 3296:}
        -: 3297:
        -: 3298:template <class _CharT, class _Traits, class _Allocator>
        -: 3299:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3300:basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) const
        -: 3301:{
        -: 3302:    if (__n >= size())
        -: 3303:        this->__throw_out_of_range();
        -: 3304:    return (*this)[__n];
        -: 3305:}
        -: 3306:
        -: 3307:template <class _CharT, class _Traits, class _Allocator>
        -: 3308:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3309:basic_string<_CharT, _Traits, _Allocator>::at(size_type __n)
        -: 3310:{
        -: 3311:    if (__n >= size())
        -: 3312:        this->__throw_out_of_range();
        -: 3313:    return (*this)[__n];
        -: 3314:}
        -: 3315:
        -: 3316:template <class _CharT, class _Traits, class _Allocator>
        -: 3317:inline _LIBCPP_INLINE_VISIBILITY
        -: 3318:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3319:basic_string<_CharT, _Traits, _Allocator>::front()
        -: 3320:{
        -: 3321:    _LIBCPP_ASSERT(!empty(), "string::front(): string is empty");
        -: 3322:    return *__get_pointer();
        -: 3323:}
        -: 3324:
        -: 3325:template <class _CharT, class _Traits, class _Allocator>
        -: 3326:inline _LIBCPP_INLINE_VISIBILITY
        -: 3327:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3328:basic_string<_CharT, _Traits, _Allocator>::front() const
        -: 3329:{
        -: 3330:    _LIBCPP_ASSERT(!empty(), "string::front(): string is empty");
        -: 3331:    return *data();
        -: 3332:}
        -: 3333:
        -: 3334:template <class _CharT, class _Traits, class _Allocator>
        -: 3335:inline _LIBCPP_INLINE_VISIBILITY
        -: 3336:typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3337:basic_string<_CharT, _Traits, _Allocator>::back()
        -: 3338:{
        -: 3339:    _LIBCPP_ASSERT(!empty(), "string::back(): string is empty");
        -: 3340:    return *(__get_pointer() + size() - 1);
        -: 3341:}
        -: 3342:
        -: 3343:template <class _CharT, class _Traits, class _Allocator>
        -: 3344:inline _LIBCPP_INLINE_VISIBILITY
        -: 3345:typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3346:basic_string<_CharT, _Traits, _Allocator>::back() const
        -: 3347:{
        -: 3348:    _LIBCPP_ASSERT(!empty(), "string::back(): string is empty");
        -: 3349:    return *(data() + size() - 1);
        -: 3350:}
        -: 3351:
        -: 3352:template <class _CharT, class _Traits, class _Allocator>
        -: 3353:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3354:basic_string<_CharT, _Traits, _Allocator>::copy(value_type* __s, size_type __n, size_type __pos) const
        -: 3355:{
        -: 3356:    size_type __sz = size();
        -: 3357:    if (__pos > __sz)
        -: 3358:        this->__throw_out_of_range();
        -: 3359:    size_type __rlen = _VSTD::min(__n, __sz - __pos);
        -: 3360:    traits_type::copy(__s, data() + __pos, __rlen);
        -: 3361:    return __rlen;
        -: 3362:}
        -: 3363:
        -: 3364:template <class _CharT, class _Traits, class _Allocator>
        -: 3365:inline _LIBCPP_INLINE_VISIBILITY
        -: 3366:basic_string<_CharT, _Traits, _Allocator>
        -: 3367:basic_string<_CharT, _Traits, _Allocator>::substr(size_type __pos, size_type __n) const
        -: 3368:{
        -: 3369:    return basic_string(*this, __pos, __n, __alloc());
        -: 3370:}
        -: 3371:
        -: 3372:template <class _CharT, class _Traits, class _Allocator>
        -: 3373:inline _LIBCPP_INLINE_VISIBILITY
        -: 3374:void
        -: 3375:basic_string<_CharT, _Traits, _Allocator>::swap(basic_string& __str)
        -: 3376:#if _LIBCPP_STD_VER >= 14
        -: 3377:        _NOEXCEPT
        -: 3378:#else
        -: 3379:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value || 
        -: 3380:                    __is_nothrow_swappable<allocator_type>::value)
        -: 3381:#endif
        -: 3382:{
        -: 3383:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 3384:    if (!__is_long())
        -: 3385:        __get_db()->__invalidate_all(this);
        -: 3386:    if (!__str.__is_long())
        -: 3387:        __get_db()->__invalidate_all(&__str);
        -: 3388:    __get_db()->swap(this, &__str);
        -: 3389:#endif
        -: 3390:    _VSTD::swap(__r_.first(), __str.__r_.first());
        -: 3391:    __swap_allocator(__alloc(), __str.__alloc());
        -: 3392:}
        -: 3393:
        -: 3394:// find
        -: 3395:
        -: 3396:template <class _Traits>
        -: 3397:struct _LIBCPP_HIDDEN __traits_eq
        -: 3398:{
        -: 3399:    typedef typename _Traits::char_type char_type;
        -: 3400:    _LIBCPP_INLINE_VISIBILITY
        -: 3401:    bool operator()(const char_type& __x, const char_type& __y) _NOEXCEPT
        -: 3402:        {return _Traits::eq(__x, __y);}
        -: 3403:};
        -: 3404:
        -: 3405:template<class _CharT, class _Traits, class _Allocator>
        -: 3406:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3407:basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,
        -: 3408:                                                size_type __pos,
        -: 3409:                                                size_type __n) const _NOEXCEPT
        -: 3410:{
        -: 3411:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find(): received nullptr");
        -: 3412:    return _VSTD::__str_find<value_type, size_type, traits_type, npos>
        -: 3413:        (data(), size(), __s, __pos, __n);
        -: 3414:}
        -: 3415:
        -: 3416:template<class _CharT, class _Traits, class _Allocator>
        -: 3417:inline _LIBCPP_INLINE_VISIBILITY
        -: 3418:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3419:basic_string<_CharT, _Traits, _Allocator>::find(const basic_string& __str,
        -: 3420:                                                size_type __pos) const _NOEXCEPT
        -: 3421:{
        -: 3422:    return _VSTD::__str_find<value_type, size_type, traits_type, npos>
        -: 3423:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3424:}
        -: 3425:
        -: 3426:template<class _CharT, class _Traits, class _Allocator>
        -: 3427:inline _LIBCPP_INLINE_VISIBILITY
        -: 3428:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3429:basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s,
        -: 3430:                                                size_type __pos) const _NOEXCEPT
        -: 3431:{
        -: 3432:    _LIBCPP_ASSERT(__s != nullptr, "string::find(): received nullptr");
        -: 3433:    return _VSTD::__str_find<value_type, size_type, traits_type, npos>
        -: 3434:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3435:}
        -: 3436:
        -: 3437:template<class _CharT, class _Traits, class _Allocator>
        -: 3438:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3439:basic_string<_CharT, _Traits, _Allocator>::find(value_type __c,
        -: 3440:                                                size_type __pos) const _NOEXCEPT
        -: 3441:{
        -: 3442:    return _VSTD::__str_find<value_type, size_type, traits_type, npos>
        -: 3443:        (data(), size(), __c, __pos);
        -: 3444:}
        -: 3445:
        -: 3446:// rfind
        -: 3447:
        -: 3448:template<class _CharT, class _Traits, class _Allocator>
        -: 3449:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3450:basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,
        -: 3451:                                                 size_type __pos,
        -: 3452:                                                 size_type __n) const _NOEXCEPT
        -: 3453:{
        -: 3454:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::rfind(): received nullptr");
        -: 3455:    return _VSTD::__str_rfind<value_type, size_type, traits_type, npos>
        -: 3456:        (data(), size(), __s, __pos, __n);
        -: 3457:}
        -: 3458:
        -: 3459:template<class _CharT, class _Traits, class _Allocator>
        -: 3460:inline _LIBCPP_INLINE_VISIBILITY
        -: 3461:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3462:basic_string<_CharT, _Traits, _Allocator>::rfind(const basic_string& __str,
        -: 3463:                                                 size_type __pos) const _NOEXCEPT
        -: 3464:{
        -: 3465:    return _VSTD::__str_rfind<value_type, size_type, traits_type, npos>
        -: 3466:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3467:}
        -: 3468:
        -: 3469:template<class _CharT, class _Traits, class _Allocator>
        -: 3470:inline _LIBCPP_INLINE_VISIBILITY
        -: 3471:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3472:basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s,
        -: 3473:                                                 size_type __pos) const _NOEXCEPT
        -: 3474:{
        -: 3475:    _LIBCPP_ASSERT(__s != nullptr, "string::rfind(): received nullptr");
        -: 3476:    return _VSTD::__str_rfind<value_type, size_type, traits_type, npos>
        -: 3477:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3478:}
        -: 3479:
        -: 3480:template<class _CharT, class _Traits, class _Allocator>
        -: 3481:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3482:basic_string<_CharT, _Traits, _Allocator>::rfind(value_type __c,
        -: 3483:                                                 size_type __pos) const _NOEXCEPT
        -: 3484:{
        -: 3485:    return _VSTD::__str_rfind<value_type, size_type, traits_type, npos>
        -: 3486:        (data(), size(), __c, __pos);
        -: 3487:}
        -: 3488:
        -: 3489:// find_first_of
        -: 3490:
        -: 3491:template<class _CharT, class _Traits, class _Allocator>
        -: 3492:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3493:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,
        -: 3494:                                                         size_type __pos,
        -: 3495:                                                         size_type __n) const _NOEXCEPT
        -: 3496:{
        -: 3497:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_first_of(): received nullptr");
        -: 3498:    return _VSTD::__str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3499:        (data(), size(), __s, __pos, __n);
        -: 3500:}
        -: 3501:
        -: 3502:template<class _CharT, class _Traits, class _Allocator>
        -: 3503:inline _LIBCPP_INLINE_VISIBILITY
        -: 3504:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3505:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const basic_string& __str,
        -: 3506:                                                         size_type __pos) const _NOEXCEPT
        -: 3507:{
        -: 3508:    return _VSTD::__str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3509:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3510:}
        -: 3511:
        -: 3512:template<class _CharT, class _Traits, class _Allocator>
        -: 3513:inline _LIBCPP_INLINE_VISIBILITY
        -: 3514:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3515:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s,
        -: 3516:                                                         size_type __pos) const _NOEXCEPT
        -: 3517:{
        -: 3518:    _LIBCPP_ASSERT(__s != nullptr, "string::find_first_of(): received nullptr");
        -: 3519:    return _VSTD::__str_find_first_of<value_type, size_type, traits_type, npos>
        -: 3520:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3521:}
        -: 3522:
        -: 3523:template<class _CharT, class _Traits, class _Allocator>
        -: 3524:inline _LIBCPP_INLINE_VISIBILITY
        -: 3525:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3526:basic_string<_CharT, _Traits, _Allocator>::find_first_of(value_type __c,
        -: 3527:                                                         size_type __pos) const _NOEXCEPT
        -: 3528:{
        -: 3529:    return find(__c, __pos);
        -: 3530:}
        -: 3531:
        -: 3532:// find_last_of
        -: 3533:
        -: 3534:template<class _CharT, class _Traits, class _Allocator>
        -: 3535:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3536:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,
        -: 3537:                                                        size_type __pos,
        -: 3538:                                                        size_type __n) const _NOEXCEPT
        -: 3539:{
        -: 3540:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_last_of(): received nullptr");
        -: 3541:    return _VSTD::__str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3542:        (data(), size(), __s, __pos, __n);
        -: 3543:}
        -: 3544:
        -: 3545:template<class _CharT, class _Traits, class _Allocator>
        -: 3546:inline _LIBCPP_INLINE_VISIBILITY
        -: 3547:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3548:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const basic_string& __str,
        -: 3549:                                                        size_type __pos) const _NOEXCEPT
        -: 3550:{
        -: 3551:    return _VSTD::__str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3552:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3553:}
        -: 3554:
        -: 3555:template<class _CharT, class _Traits, class _Allocator>
        -: 3556:inline _LIBCPP_INLINE_VISIBILITY
        -: 3557:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3558:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s,
        -: 3559:                                                        size_type __pos) const _NOEXCEPT
        -: 3560:{
        -: 3561:    _LIBCPP_ASSERT(__s != nullptr, "string::find_last_of(): received nullptr");
        -: 3562:    return _VSTD::__str_find_last_of<value_type, size_type, traits_type, npos>
        -: 3563:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3564:}
        -: 3565:
        -: 3566:template<class _CharT, class _Traits, class _Allocator>
        -: 3567:inline _LIBCPP_INLINE_VISIBILITY
        -: 3568:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3569:basic_string<_CharT, _Traits, _Allocator>::find_last_of(value_type __c,
        -: 3570:                                                        size_type __pos) const _NOEXCEPT
        -: 3571:{
        -: 3572:    return rfind(__c, __pos);
        -: 3573:}
        -: 3574:
        -: 3575:// find_first_not_of
        -: 3576:
        -: 3577:template<class _CharT, class _Traits, class _Allocator>
        -: 3578:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3579:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,
        -: 3580:                                                             size_type __pos,
        -: 3581:                                                             size_type __n) const _NOEXCEPT
        -: 3582:{
        -: 3583:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_first_not_of(): received nullptr");
        -: 3584:    return _VSTD::__str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3585:        (data(), size(), __s, __pos, __n);
        -: 3586:}
        -: 3587:
        -: 3588:template<class _CharT, class _Traits, class _Allocator>
        -: 3589:inline _LIBCPP_INLINE_VISIBILITY
        -: 3590:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3591:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const basic_string& __str,
        -: 3592:                                                             size_type __pos) const _NOEXCEPT
        -: 3593:{
        -: 3594:    return _VSTD::__str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3595:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3596:}
        -: 3597:
        -: 3598:template<class _CharT, class _Traits, class _Allocator>
        -: 3599:inline _LIBCPP_INLINE_VISIBILITY
        -: 3600:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3601:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s,
        -: 3602:                                                             size_type __pos) const _NOEXCEPT
        -: 3603:{
        -: 3604:    _LIBCPP_ASSERT(__s != nullptr, "string::find_first_not_of(): received nullptr");
        -: 3605:    return _VSTD::__str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3606:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3607:}
        -: 3608:
        -: 3609:template<class _CharT, class _Traits, class _Allocator>
        -: 3610:inline _LIBCPP_INLINE_VISIBILITY
        -: 3611:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3612:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(value_type __c,
        -: 3613:                                                             size_type __pos) const _NOEXCEPT
        -: 3614:{
        -: 3615:    return _VSTD::__str_find_first_not_of<value_type, size_type, traits_type, npos>
        -: 3616:        (data(), size(), __c, __pos);
        -: 3617:}
        -: 3618:
        -: 3619:// find_last_not_of
        -: 3620:
        -: 3621:template<class _CharT, class _Traits, class _Allocator>
        -: 3622:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3623:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,
        -: 3624:                                                            size_type __pos,
        -: 3625:                                                            size_type __n) const _NOEXCEPT
        -: 3626:{
        -: 3627:    _LIBCPP_ASSERT(__n == 0 || __s != nullptr, "string::find_last_not_of(): received nullptr");
        -: 3628:    return _VSTD::__str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3629:        (data(), size(), __s, __pos, __n);
        -: 3630:}
        -: 3631:
        -: 3632:template<class _CharT, class _Traits, class _Allocator>
        -: 3633:inline _LIBCPP_INLINE_VISIBILITY
        -: 3634:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3635:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const basic_string& __str,
        -: 3636:                                                            size_type __pos) const _NOEXCEPT
        -: 3637:{
        -: 3638:    return _VSTD::__str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3639:        (data(), size(), __str.data(), __pos, __str.size());
        -: 3640:}
        -: 3641:
        -: 3642:template<class _CharT, class _Traits, class _Allocator>
        -: 3643:inline _LIBCPP_INLINE_VISIBILITY
        -: 3644:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3645:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s,
        -: 3646:                                                            size_type __pos) const _NOEXCEPT
        -: 3647:{
        -: 3648:    _LIBCPP_ASSERT(__s != nullptr, "string::find_last_not_of(): received nullptr");
        -: 3649:    return _VSTD::__str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3650:        (data(), size(), __s, __pos, traits_type::length(__s));
        -: 3651:}
        -: 3652:
        -: 3653:template<class _CharT, class _Traits, class _Allocator>
        -: 3654:inline _LIBCPP_INLINE_VISIBILITY
        -: 3655:typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3656:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(value_type __c,
        -: 3657:                                                            size_type __pos) const _NOEXCEPT
        -: 3658:{
        -: 3659:    return _VSTD::__str_find_last_not_of<value_type, size_type, traits_type, npos>
        -: 3660:        (data(), size(), __c, __pos);
        -: 3661:}
        -: 3662:
        -: 3663:// compare
        -: 3664:
        -: 3665:template <class _CharT, class _Traits, class _Allocator>
        -: 3666:inline _LIBCPP_INLINE_VISIBILITY
        -: 3667:int
        -: 3668:basic_string<_CharT, _Traits, _Allocator>::compare(const basic_string& __str) const _NOEXCEPT
        -: 3669:{
        -: 3670:    size_t __lhs_sz = size();
        -: 3671:    size_t __rhs_sz = __str.size();
        -: 3672:    int __result = traits_type::compare(data(), __str.data(),
        -: 3673:                                        _VSTD::min(__lhs_sz, __rhs_sz));
        -: 3674:    if (__result != 0)
        -: 3675:        return __result;
        -: 3676:    if (__lhs_sz < __rhs_sz)
        -: 3677:        return -1;
        -: 3678:    if (__lhs_sz > __rhs_sz)
        -: 3679:        return 1;
        -: 3680:    return 0;
        -: 3681:}
        -: 3682:
        -: 3683:template <class _CharT, class _Traits, class _Allocator>
        -: 3684:inline _LIBCPP_INLINE_VISIBILITY
        -: 3685:int
        -: 3686:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3687:                                                   size_type __n1,
        -: 3688:                                                   const basic_string& __str) const
        -: 3689:{
        -: 3690:    return compare(__pos1, __n1, __str.data(), __str.size());
        -: 3691:}
        -: 3692:
        -: 3693:template <class _CharT, class _Traits, class _Allocator>
        -: 3694:int
        -: 3695:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3696:                                                   size_type __n1,
        -: 3697:                                                   const basic_string& __str,
        -: 3698:                                                   size_type __pos2,
        -: 3699:                                                   size_type __n2) const
        -: 3700:{
        -: 3701:    size_type __sz = __str.size();
        -: 3702:    if (__pos2 > __sz)
        -: 3703:        this->__throw_out_of_range();
        -: 3704:    return compare(__pos1, __n1, __str.data() + __pos2, _VSTD::min(__n2,
        -: 3705:                                                                  __sz - __pos2));
        -: 3706:}
        -: 3707:
        -: 3708:template <class _CharT, class _Traits, class _Allocator>
        -: 3709:int
        -: 3710:basic_string<_CharT, _Traits, _Allocator>::compare(const value_type* __s) const _NOEXCEPT
        -: 3711:{
        -: 3712:    _LIBCPP_ASSERT(__s != nullptr, "string::compare(): received nullptr");
        -: 3713:    return compare(0, npos, __s, traits_type::length(__s));
        -: 3714:}
        -: 3715:
        -: 3716:template <class _CharT, class _Traits, class _Allocator>
        -: 3717:int
        -: 3718:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3719:                                                   size_type __n1,
        -: 3720:                                                   const value_type* __s) const
        -: 3721:{
        -: 3722:    _LIBCPP_ASSERT(__s != nullptr, "string::compare(): received nullptr");
        -: 3723:    return compare(__pos1, __n1, __s, traits_type::length(__s));
        -: 3724:}
        -: 3725:
        -: 3726:template <class _CharT, class _Traits, class _Allocator>
        -: 3727:int
        -: 3728:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1,
        -: 3729:                                                   size_type __n1,
        -: 3730:                                                   const value_type* __s,
        -: 3731:                                                   size_type __n2) const
        -: 3732:{
        -: 3733:    _LIBCPP_ASSERT(__n2 == 0 || __s != nullptr, "string::compare(): received nullptr");
        -: 3734:    size_type __sz = size();
        -: 3735:    if (__pos1 > __sz || __n2 == npos)
        -: 3736:        this->__throw_out_of_range();
        -: 3737:    size_type __rlen = _VSTD::min(__n1, __sz - __pos1);
        -: 3738:    int __r = traits_type::compare(data() + __pos1, __s, _VSTD::min(__rlen, __n2));
        -: 3739:    if (__r == 0)
        -: 3740:    {
        -: 3741:        if (__rlen < __n2)
        -: 3742:            __r = -1;
        -: 3743:        else if (__rlen > __n2)
        -: 3744:            __r = 1;
        -: 3745:    }
        -: 3746:    return __r;
        -: 3747:}
        -: 3748:
        -: 3749:// __invariants
        -: 3750:
        -: 3751:template<class _CharT, class _Traits, class _Allocator>
        -: 3752:inline _LIBCPP_INLINE_VISIBILITY
        -: 3753:bool
        -: 3754:basic_string<_CharT, _Traits, _Allocator>::__invariants() const
        -: 3755:{
        -: 3756:    if (size() > capacity())
        -: 3757:        return false;
        -: 3758:    if (capacity() < __min_cap - 1)
        -: 3759:        return false;
        -: 3760:    if (data() == 0)
        -: 3761:        return false;
        -: 3762:    if (data()[size()] != value_type(0))
        -: 3763:        return false;
        -: 3764:    return true;
        -: 3765:}
        -: 3766:
        -: 3767:// operator==
        -: 3768:
        -: 3769:template<class _CharT, class _Traits, class _Allocator>
        -: 3770:inline _LIBCPP_INLINE_VISIBILITY
        -: 3771:bool
        -: 3772:operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3773:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3774:{
        -: 3775:    size_t __lhs_sz = __lhs.size();
        -: 3776:    return __lhs_sz == __rhs.size() && _Traits::compare(__lhs.data(),
        -: 3777:                                                        __rhs.data(),
        -: 3778:                                                        __lhs_sz) == 0;
        -: 3779:}
        -: 3780:
        -: 3781:template<class _Allocator>
        -: 3782:inline _LIBCPP_INLINE_VISIBILITY
        -: 3783:bool
        -: 3784:operator==(const basic_string<char, char_traits<char>, _Allocator>& __lhs,
        -: 3785:           const basic_string<char, char_traits<char>, _Allocator>& __rhs) _NOEXCEPT
        -: 3786:{
        -: 3787:    size_t __lhs_sz = __lhs.size();
        -: 3788:    if (__lhs_sz != __rhs.size())
        -: 3789:        return false;
        -: 3790:    const char* __lp = __lhs.data();
        -: 3791:    const char* __rp = __rhs.data();
        -: 3792:    if (__lhs.__is_long())
        -: 3793:        return char_traits<char>::compare(__lp, __rp, __lhs_sz) == 0;
        -: 3794:    for (; __lhs_sz != 0; --__lhs_sz, ++__lp, ++__rp)
        -: 3795:        if (*__lp != *__rp)
        -: 3796:            return false;
        -: 3797:    return true;
        -: 3798:}
        -: 3799:
        -: 3800:template<class _CharT, class _Traits, class _Allocator>
        -: 3801:inline _LIBCPP_INLINE_VISIBILITY
        -: 3802:bool
        -: 3803:operator==(const _CharT* __lhs,
        -: 3804:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3805:{
        -: 3806:    return __rhs.compare(__lhs) == 0;
        -: 3807:}
        -: 3808:
        -: 3809:template<class _CharT, class _Traits, class _Allocator>
        -: 3810:inline _LIBCPP_INLINE_VISIBILITY
        -: 3811:bool
        -: 3812:operator==(const basic_string<_CharT,_Traits,_Allocator>& __lhs,
        -: 3813:           const _CharT* __rhs) _NOEXCEPT
        -: 3814:{
        -: 3815:    return __lhs.compare(__rhs) == 0;
        -: 3816:}
        -: 3817:
        -: 3818:// operator!=
        -: 3819:
        -: 3820:template<class _CharT, class _Traits, class _Allocator>
        -: 3821:inline _LIBCPP_INLINE_VISIBILITY
        -: 3822:bool
        -: 3823:operator!=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,
        -: 3824:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3825:{
        -: 3826:    return !(__lhs == __rhs);
        -: 3827:}
        -: 3828:
        -: 3829:template<class _CharT, class _Traits, class _Allocator>
        -: 3830:inline _LIBCPP_INLINE_VISIBILITY
        -: 3831:bool
        -: 3832:operator!=(const _CharT* __lhs,
        -: 3833:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3834:{
        -: 3835:    return !(__lhs == __rhs);
        -: 3836:}
        -: 3837:
        -: 3838:template<class _CharT, class _Traits, class _Allocator>
        -: 3839:inline _LIBCPP_INLINE_VISIBILITY
        -: 3840:bool
        -: 3841:operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3842:           const _CharT* __rhs) _NOEXCEPT
        -: 3843:{
        -: 3844:    return !(__lhs == __rhs);
        -: 3845:}
        -: 3846:
        -: 3847:// operator<
        -: 3848:
        -: 3849:template<class _CharT, class _Traits, class _Allocator>
        -: 3850:inline _LIBCPP_INLINE_VISIBILITY
        -: 3851:bool
        -: 3852:operator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3853:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3854:{
        -: 3855:    return __lhs.compare(__rhs) < 0;
        -: 3856:}
        -: 3857:
        -: 3858:template<class _CharT, class _Traits, class _Allocator>
        -: 3859:inline _LIBCPP_INLINE_VISIBILITY
        -: 3860:bool
        -: 3861:operator< (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3862:           const _CharT* __rhs) _NOEXCEPT
        -: 3863:{
        -: 3864:    return __lhs.compare(__rhs) < 0;
        -: 3865:}
        -: 3866:
        -: 3867:template<class _CharT, class _Traits, class _Allocator>
        -: 3868:inline _LIBCPP_INLINE_VISIBILITY
        -: 3869:bool
        -: 3870:operator< (const _CharT* __lhs,
        -: 3871:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3872:{
        -: 3873:    return __rhs.compare(__lhs) > 0;
        -: 3874:}
        -: 3875:
        -: 3876:// operator>
        -: 3877:
        -: 3878:template<class _CharT, class _Traits, class _Allocator>
        -: 3879:inline _LIBCPP_INLINE_VISIBILITY
        -: 3880:bool
        -: 3881:operator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3882:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3883:{
        -: 3884:    return __rhs < __lhs;
        -: 3885:}
        -: 3886:
        -: 3887:template<class _CharT, class _Traits, class _Allocator>
        -: 3888:inline _LIBCPP_INLINE_VISIBILITY
        -: 3889:bool
        -: 3890:operator> (const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3891:           const _CharT* __rhs) _NOEXCEPT
        -: 3892:{
        -: 3893:    return __rhs < __lhs;
        -: 3894:}
        -: 3895:
        -: 3896:template<class _CharT, class _Traits, class _Allocator>
        -: 3897:inline _LIBCPP_INLINE_VISIBILITY
        -: 3898:bool
        -: 3899:operator> (const _CharT* __lhs,
        -: 3900:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3901:{
        -: 3902:    return __rhs < __lhs;
        -: 3903:}
        -: 3904:
        -: 3905:// operator<=
        -: 3906:
        -: 3907:template<class _CharT, class _Traits, class _Allocator>
        -: 3908:inline _LIBCPP_INLINE_VISIBILITY
        -: 3909:bool
        -: 3910:operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3911:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3912:{
        -: 3913:    return !(__rhs < __lhs);
        -: 3914:}
        -: 3915:
        -: 3916:template<class _CharT, class _Traits, class _Allocator>
        -: 3917:inline _LIBCPP_INLINE_VISIBILITY
        -: 3918:bool
        -: 3919:operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3920:           const _CharT* __rhs) _NOEXCEPT
        -: 3921:{
        -: 3922:    return !(__rhs < __lhs);
        -: 3923:}
        -: 3924:
        -: 3925:template<class _CharT, class _Traits, class _Allocator>
        -: 3926:inline _LIBCPP_INLINE_VISIBILITY
        -: 3927:bool
        -: 3928:operator<=(const _CharT* __lhs,
        -: 3929:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3930:{
        -: 3931:    return !(__rhs < __lhs);
        -: 3932:}
        -: 3933:
        -: 3934:// operator>=
        -: 3935:
        -: 3936:template<class _CharT, class _Traits, class _Allocator>
        -: 3937:inline _LIBCPP_INLINE_VISIBILITY
        -: 3938:bool
        -: 3939:operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3940:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3941:{
        -: 3942:    return !(__lhs < __rhs);
        -: 3943:}
        -: 3944:
        -: 3945:template<class _CharT, class _Traits, class _Allocator>
        -: 3946:inline _LIBCPP_INLINE_VISIBILITY
        -: 3947:bool
        -: 3948:operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3949:           const _CharT* __rhs) _NOEXCEPT
        -: 3950:{
        -: 3951:    return !(__lhs < __rhs);
        -: 3952:}
        -: 3953:
        -: 3954:template<class _CharT, class _Traits, class _Allocator>
        -: 3955:inline _LIBCPP_INLINE_VISIBILITY
        -: 3956:bool
        -: 3957:operator>=(const _CharT* __lhs,
        -: 3958:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT
        -: 3959:{
        -: 3960:    return !(__lhs < __rhs);
        -: 3961:}
        -: 3962:
        -: 3963:// operator +
        -: 3964:
        -: 3965:template<class _CharT, class _Traits, class _Allocator>
        -: 3966:basic_string<_CharT, _Traits, _Allocator>
        -: 3967:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3968:          const basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 3969:{
        -: 3970:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 3971:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 3972:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
        -: 3973:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);
        -: 3974:    __r.append(__rhs.data(), __rhs_sz);
        -: 3975:    return __r;
        -: 3976:}
        -: 3977:
        -: 3978:template<class _CharT, class _Traits, class _Allocator>
        -: 3979:basic_string<_CharT, _Traits, _Allocator>
        -: 3980:operator+(const _CharT* __lhs , const basic_string<_CharT,_Traits,_Allocator>& __rhs)
        -: 3981:{
        -: 3982:    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());
        -: 3983:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = _Traits::length(__lhs);
        -: 3984:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
        -: 3985:    __r.__init(__lhs, __lhs_sz, __lhs_sz + __rhs_sz);
        -: 3986:    __r.append(__rhs.data(), __rhs_sz);
        -: 3987:    return __r;
        -: 3988:}
        -: 3989:
        -: 3990:template<class _CharT, class _Traits, class _Allocator>
        -: 3991:basic_string<_CharT, _Traits, _Allocator>
        -: 3992:operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Allocator>& __rhs)
        -: 3993:{
        -: 3994:    basic_string<_CharT, _Traits, _Allocator> __r(__rhs.get_allocator());
        -: 3995:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = __rhs.size();
        -: 3996:    __r.__init(&__lhs, 1, 1 + __rhs_sz);
        -: 3997:    __r.append(__rhs.data(), __rhs_sz);
        -: 3998:    return __r;
        -: 3999:}
        -: 4000:
        -: 4001:template<class _CharT, class _Traits, class _Allocator>
        -: 4002:basic_string<_CharT, _Traits, _Allocator>
        -: 4003:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs)
        -: 4004:{
        -: 4005:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 4006:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 4007:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __rhs_sz = _Traits::length(__rhs);
        -: 4008:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + __rhs_sz);
        -: 4009:    __r.append(__rhs, __rhs_sz);
        -: 4010:    return __r;
        -: 4011:}
        -: 4012:
        -: 4013:template<class _CharT, class _Traits, class _Allocator>
        -: 4014:basic_string<_CharT, _Traits, _Allocator>
        -: 4015:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, _CharT __rhs)
        -: 4016:{
        -: 4017:    basic_string<_CharT, _Traits, _Allocator> __r(__lhs.get_allocator());
        -: 4018:    typename basic_string<_CharT, _Traits, _Allocator>::size_type __lhs_sz = __lhs.size();
        -: 4019:    __r.__init(__lhs.data(), __lhs_sz, __lhs_sz + 1);
        -: 4020:    __r.push_back(__rhs);
        -: 4021:    return __r;
        -: 4022:}
        -: 4023:
        -: 4024:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4025:
        -: 4026:template<class _CharT, class _Traits, class _Allocator>
        -: 4027:inline _LIBCPP_INLINE_VISIBILITY
        -: 4028:basic_string<_CharT, _Traits, _Allocator>
        -: 4029:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4030:{
        -: 4031:    return _VSTD::move(__lhs.append(__rhs));
        -: 4032:}
        -: 4033:
        -: 4034:template<class _CharT, class _Traits, class _Allocator>
        -: 4035:inline _LIBCPP_INLINE_VISIBILITY
        -: 4036:basic_string<_CharT, _Traits, _Allocator>
        -: 4037:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)
        -: 4038:{
        -: 4039:    return _VSTD::move(__rhs.insert(0, __lhs));
        -: 4040:}
        -: 4041:
        -: 4042:template<class _CharT, class _Traits, class _Allocator>
        -: 4043:inline _LIBCPP_INLINE_VISIBILITY
        -: 4044:basic_string<_CharT, _Traits, _Allocator>
        -: 4045:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs)
        -: 4046:{
        -: 4047:    return _VSTD::move(__lhs.append(__rhs));
        -: 4048:}
        -: 4049:
        -: 4050:template<class _CharT, class _Traits, class _Allocator>
        -: 4051:inline _LIBCPP_INLINE_VISIBILITY
        -: 4052:basic_string<_CharT, _Traits, _Allocator>
        -: 4053:operator+(const _CharT* __lhs , basic_string<_CharT,_Traits,_Allocator>&& __rhs)
        -: 4054:{
        -: 4055:    return _VSTD::move(__rhs.insert(0, __lhs));
        -: 4056:}
        -: 4057:
        -: 4058:template<class _CharT, class _Traits, class _Allocator>
        -: 4059:inline _LIBCPP_INLINE_VISIBILITY
        -: 4060:basic_string<_CharT, _Traits, _Allocator>
        -: 4061:operator+(_CharT __lhs, basic_string<_CharT,_Traits,_Allocator>&& __rhs)
        -: 4062:{
        -: 4063:    __rhs.insert(__rhs.begin(), __lhs);
        -: 4064:    return _VSTD::move(__rhs);
        -: 4065:}
        -: 4066:
        -: 4067:template<class _CharT, class _Traits, class _Allocator>
        -: 4068:inline _LIBCPP_INLINE_VISIBILITY
        -: 4069:basic_string<_CharT, _Traits, _Allocator>
        -: 4070:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs)
        -: 4071:{
        -: 4072:    return _VSTD::move(__lhs.append(__rhs));
        -: 4073:}
        -: 4074:
        -: 4075:template<class _CharT, class _Traits, class _Allocator>
        -: 4076:inline _LIBCPP_INLINE_VISIBILITY
        -: 4077:basic_string<_CharT, _Traits, _Allocator>
        -: 4078:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, _CharT __rhs)
        -: 4079:{
        -: 4080:    __lhs.push_back(__rhs);
        -: 4081:    return _VSTD::move(__lhs);
        -: 4082:}
        -: 4083:
        -: 4084:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4085:
        -: 4086:// swap
        -: 4087:
        -: 4088:template<class _CharT, class _Traits, class _Allocator>
        -: 4089:inline _LIBCPP_INLINE_VISIBILITY
        -: 4090:void
        -: 4091:swap(basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4092:     basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4093:     _NOEXCEPT_(_NOEXCEPT_(__lhs.swap(__rhs)))
        -: 4094:{
        -: 4095:    __lhs.swap(__rhs);
        -: 4096:}
        -: 4097:
        -: 4098:#ifndef _LIBCPP_HAS_NO_UNICODE_CHARS
        -: 4099:
        -: 4100:typedef basic_string<char16_t> u16string;
        -: 4101:typedef basic_string<char32_t> u32string;
        -: 4102:
        -: 4103:#endif  // _LIBCPP_HAS_NO_UNICODE_CHARS
        -: 4104:
        -: 4105:_LIBCPP_FUNC_VIS int                stoi  (const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4106:_LIBCPP_FUNC_VIS long               stol  (const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4107:_LIBCPP_FUNC_VIS unsigned long      stoul (const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4108:_LIBCPP_FUNC_VIS long long          stoll (const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4109:_LIBCPP_FUNC_VIS unsigned long long stoull(const string& __str, size_t* __idx = 0, int __base = 10);
        -: 4110:
        -: 4111:_LIBCPP_FUNC_VIS float       stof (const string& __str, size_t* __idx = 0);
        -: 4112:_LIBCPP_FUNC_VIS double      stod (const string& __str, size_t* __idx = 0);
        -: 4113:_LIBCPP_FUNC_VIS long double stold(const string& __str, size_t* __idx = 0);
        -: 4114:
        -: 4115:_LIBCPP_FUNC_VIS string to_string(int __val);
        -: 4116:_LIBCPP_FUNC_VIS string to_string(unsigned __val);
        -: 4117:_LIBCPP_FUNC_VIS string to_string(long __val);
        -: 4118:_LIBCPP_FUNC_VIS string to_string(unsigned long __val);
        -: 4119:_LIBCPP_FUNC_VIS string to_string(long long __val);
        -: 4120:_LIBCPP_FUNC_VIS string to_string(unsigned long long __val);
        -: 4121:_LIBCPP_FUNC_VIS string to_string(float __val);
        -: 4122:_LIBCPP_FUNC_VIS string to_string(double __val);
        -: 4123:_LIBCPP_FUNC_VIS string to_string(long double __val);
        -: 4124:
        -: 4125:_LIBCPP_FUNC_VIS int                stoi  (const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4126:_LIBCPP_FUNC_VIS long               stol  (const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4127:_LIBCPP_FUNC_VIS unsigned long      stoul (const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4128:_LIBCPP_FUNC_VIS long long          stoll (const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4129:_LIBCPP_FUNC_VIS unsigned long long stoull(const wstring& __str, size_t* __idx = 0, int __base = 10);
        -: 4130:
        -: 4131:_LIBCPP_FUNC_VIS float       stof (const wstring& __str, size_t* __idx = 0);
        -: 4132:_LIBCPP_FUNC_VIS double      stod (const wstring& __str, size_t* __idx = 0);
        -: 4133:_LIBCPP_FUNC_VIS long double stold(const wstring& __str, size_t* __idx = 0);
        -: 4134:
        -: 4135:_LIBCPP_FUNC_VIS wstring to_wstring(int __val);
        -: 4136:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned __val);
        -: 4137:_LIBCPP_FUNC_VIS wstring to_wstring(long __val);
        -: 4138:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long __val);
        -: 4139:_LIBCPP_FUNC_VIS wstring to_wstring(long long __val);
        -: 4140:_LIBCPP_FUNC_VIS wstring to_wstring(unsigned long long __val);
        -: 4141:_LIBCPP_FUNC_VIS wstring to_wstring(float __val);
        -: 4142:_LIBCPP_FUNC_VIS wstring to_wstring(double __val);
        -: 4143:_LIBCPP_FUNC_VIS wstring to_wstring(long double __val);
        -: 4144:
        -: 4145:template<class _CharT, class _Traits, class _Allocator>
        -: 4146:    const typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 4147:                   basic_string<_CharT, _Traits, _Allocator>::npos;
        -: 4148:
        -: 4149:template<class _CharT, class _Traits, class _Allocator>
        -: 4150:struct _LIBCPP_TYPE_VIS_ONLY hash<basic_string<_CharT, _Traits, _Allocator> >
        -: 4151:    : public unary_function<basic_string<_CharT, _Traits, _Allocator>, size_t>
        -: 4152:{
        -: 4153:    size_t
        -: 4154:        operator()(const basic_string<_CharT, _Traits, _Allocator>& __val) const _NOEXCEPT;
        -: 4155:};
        -: 4156:
        -: 4157:template<class _CharT, class _Traits, class _Allocator>
        -: 4158:size_t
        -: 4159:hash<basic_string<_CharT, _Traits, _Allocator> >::operator()(
        -: 4160:        const basic_string<_CharT, _Traits, _Allocator>& __val) const _NOEXCEPT
        -: 4161:{
        -: 4162:    return __do_string_hash(__val.data(), __val.data() + __val.size());
        -: 4163:}
        -: 4164:
        -: 4165:template<class _CharT, class _Traits, class _Allocator>
        -: 4166:basic_ostream<_CharT, _Traits>&
        -: 4167:operator<<(basic_ostream<_CharT, _Traits>& __os,
        -: 4168:           const basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4169:
        -: 4170:template<class _CharT, class _Traits, class _Allocator>
        -: 4171:basic_istream<_CharT, _Traits>&
        -: 4172:operator>>(basic_istream<_CharT, _Traits>& __is,
        -: 4173:           basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4174:
        -: 4175:template<class _CharT, class _Traits, class _Allocator>
        -: 4176:basic_istream<_CharT, _Traits>&
        -: 4177:getline(basic_istream<_CharT, _Traits>& __is,
        -: 4178:        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);
        -: 4179:
        -: 4180:template<class _CharT, class _Traits, class _Allocator>
        -: 4181:inline _LIBCPP_INLINE_VISIBILITY
        -: 4182:basic_istream<_CharT, _Traits>&
        -: 4183:getline(basic_istream<_CharT, _Traits>& __is,
        -: 4184:        basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4185:
        -: 4186:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4187:
        -: 4188:template<class _CharT, class _Traits, class _Allocator>
        -: 4189:inline _LIBCPP_INLINE_VISIBILITY
        -: 4190:basic_istream<_CharT, _Traits>&
        -: 4191:getline(basic_istream<_CharT, _Traits>&& __is,
        -: 4192:        basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);
        -: 4193:
        -: 4194:template<class _CharT, class _Traits, class _Allocator>
        -: 4195:inline _LIBCPP_INLINE_VISIBILITY
        -: 4196:basic_istream<_CharT, _Traits>&
        -: 4197:getline(basic_istream<_CharT, _Traits>&& __is,
        -: 4198:        basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4199:
        -: 4200:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4201:
        -: 4202:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 4203:
        -: 4204:template<class _CharT, class _Traits, class _Allocator>
        -: 4205:bool
        -: 4206:basic_string<_CharT, _Traits, _Allocator>::__dereferenceable(const const_iterator* __i) const
        -: 4207:{
        -: 4208:    return this->data() <= _VSTD::__to_raw_pointer(__i->base()) &&
        -: 4209:           _VSTD::__to_raw_pointer(__i->base()) < this->data() + this->size();
        -: 4210:}
        -: 4211:
        -: 4212:template<class _CharT, class _Traits, class _Allocator>
        -: 4213:bool
        -: 4214:basic_string<_CharT, _Traits, _Allocator>::__decrementable(const const_iterator* __i) const
        -: 4215:{
        -: 4216:    return this->data() < _VSTD::__to_raw_pointer(__i->base()) &&
        -: 4217:           _VSTD::__to_raw_pointer(__i->base()) <= this->data() + this->size();
        -: 4218:}
        -: 4219:
        -: 4220:template<class _CharT, class _Traits, class _Allocator>
        -: 4221:bool
        -: 4222:basic_string<_CharT, _Traits, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const
        -: 4223:{
        -: 4224:    const value_type* __p = _VSTD::__to_raw_pointer(__i->base()) + __n;
        -: 4225:    return this->data() <= __p && __p <= this->data() + this->size();
        -: 4226:}
        -: 4227:
        -: 4228:template<class _CharT, class _Traits, class _Allocator>
        -: 4229:bool
        -: 4230:basic_string<_CharT, _Traits, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const
        -: 4231:{
        -: 4232:    const value_type* __p = _VSTD::__to_raw_pointer(__i->base()) + __n;
        -: 4233:    return this->data() <= __p && __p < this->data() + this->size();
        -: 4234:}
        -: 4235:
        -: 4236:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 4237:
        -: 4238:#if _LIBCPP_STD_VER > 11 
        -: 4239:// Literal suffixes for basic_string [basic.string.literals]
        -: 4240:inline namespace literals
        -: 4241:{
        -: 4242:  inline namespace string_literals
        -: 4243:  {
        -: 4244:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4245:    basic_string<char> operator "" s( const char *__str, size_t __len )
        -: 4246:    {
        -: 4247:        return basic_string<char> (__str, __len);
        -: 4248:    }
        -: 4249:
        -: 4250:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4251:    basic_string<wchar_t> operator "" s( const wchar_t *__str, size_t __len )
        -: 4252:    {
        -: 4253:        return basic_string<wchar_t> (__str, __len);
        -: 4254:    }
        -: 4255:
        -: 4256:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4257:    basic_string<char16_t> operator "" s( const char16_t *__str, size_t __len )
        -: 4258:    {
        -: 4259:        return basic_string<char16_t> (__str, __len);
        -: 4260:    }
        -: 4261:
        -: 4262:    inline _LIBCPP_INLINE_VISIBILITY
        -: 4263:    basic_string<char32_t> operator "" s( const char32_t *__str, size_t __len )
        -: 4264:    {
        -: 4265:        return basic_string<char32_t> (__str, __len);
        -: 4266:    }
        -: 4267:  }
        -: 4268:}
        -: 4269:#endif
        -: 4270:
        -: 4271:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_TYPE_VIS basic_string<char>)
        -: 4272:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_TYPE_VIS basic_string<wchar_t>)
        -: 4273:_LIBCPP_EXTERN_TEMPLATE(string operator+<char, char_traits<char>, allocator<char> >(char const*, string const&))
        -: 4274:
        -: 4275:_LIBCPP_END_NAMESPACE_STD
        -: 4276:
        -: 4277:#endif  // _LIBCPP_STRING
