        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/memory
        -:    0:Graph:./CMakeFiles/Multimap.dir/main.gcno
        -:    0:Data:./CMakeFiles/Multimap.dir/main.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- memory ------------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_MEMORY
        -:   12:#define _LIBCPP_MEMORY
        -:   13:
        -:   14:/*
        -:   15:    memory synopsis
        -:   16:
        -:   17:namespace std
        -:   18:{
        -:   19:
        -:   20:struct allocator_arg_t { };
        -:   21:constexpr allocator_arg_t allocator_arg = allocator_arg_t();
        -:   22:
        -:   23:template <class T, class Alloc> struct uses_allocator;
        -:   24:
        -:   25:template <class Ptr>
        -:   26:struct pointer_traits
        -:   27:{
        -:   28:    typedef Ptr pointer;
        -:   29:    typedef <details> element_type;
        -:   30:    typedef <details> difference_type;
        -:   31:
        -:   32:    template <class U> using rebind = <details>;
        -:   33:
        -:   34:    static pointer pointer_to(<details>);
        -:   35:};
        -:   36:
        -:   37:template <class T>
        -:   38:struct pointer_traits<T*>
        -:   39:{
        -:   40:    typedef T* pointer;
        -:   41:    typedef T element_type;
        -:   42:    typedef ptrdiff_t difference_type;
        -:   43:
        -:   44:    template <class U> using rebind = U*;
        -:   45:
        -:   46:    static pointer pointer_to(<details>) noexcept;
        -:   47:};
        -:   48:
        -:   49:template <class Alloc>
        -:   50:struct allocator_traits
        -:   51:{
        -:   52:    typedef Alloc                        allocator_type;
        -:   53:    typedef typename allocator_type::value_type
        -:   54:                                         value_type;
        -:   55:
        -:   56:    typedef Alloc::pointer | value_type* pointer;
        -:   57:    typedef Alloc::const_pointer
        -:   58:          | pointer_traits<pointer>::rebind<const value_type>
        -:   59:                                         const_pointer;
        -:   60:    typedef Alloc::void_pointer
        -:   61:          | pointer_traits<pointer>::rebind<void>
        -:   62:                                         void_pointer;
        -:   63:    typedef Alloc::const_void_pointer
        -:   64:          | pointer_traits<pointer>::rebind<const void>
        -:   65:                                         const_void_pointer;
        -:   66:    typedef Alloc::difference_type
        -:   67:          | pointer_traits<pointer>::difference_type
        -:   68:                                         difference_type;
        -:   69:    typedef Alloc::size_type
        -:   70:          | make_unsigned<difference_type>::type
        -:   71:                                         size_type;
        -:   72:    typedef Alloc::propagate_on_container_copy_assignment
        -:   73:          | false_type                   propagate_on_container_copy_assignment;
        -:   74:    typedef Alloc::propagate_on_container_move_assignment
        -:   75:          | false_type                   propagate_on_container_move_assignment;
        -:   76:    typedef Alloc::propagate_on_container_swap
        -:   77:          | false_type                   propagate_on_container_swap;
        -:   78:    typedef Alloc::is_always_equal
        -:   79:          | is_empty                     is_always_equal;
        -:   80:
        -:   81:    template <class T> using rebind_alloc  = Alloc::rebind<U>::other | Alloc<T, Args...>;
        -:   82:    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;
        -:   83:
        -:   84:    static pointer allocate(allocator_type& a, size_type n);
        -:   85:    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint);
        -:   86:
        -:   87:    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept;
        -:   88:
        -:   89:    template <class T, class... Args>
        -:   90:        static void construct(allocator_type& a, T* p, Args&&... args);
        -:   91:
        -:   92:    template <class T>
        -:   93:        static void destroy(allocator_type& a, T* p);
        -:   94:
        -:   95:    static size_type max_size(const allocator_type& a); // noexcept in C++14
        -:   96:
        -:   97:    static allocator_type
        -:   98:        select_on_container_copy_construction(const allocator_type& a);
        -:   99:};
        -:  100:
        -:  101:template <>
        -:  102:class allocator<void>
        -:  103:{
        -:  104:public:
        -:  105:    typedef void*                                 pointer;
        -:  106:    typedef const void*                           const_pointer;
        -:  107:    typedef void                                  value_type;
        -:  108:
        -:  109:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  110:};
        -:  111:
        -:  112:template <class T>
        -:  113:class allocator
        -:  114:{
        -:  115:public:
        -:  116:    typedef size_t                                size_type;
        -:  117:    typedef ptrdiff_t                             difference_type;
        -:  118:    typedef T*                                    pointer;
        -:  119:    typedef const T*                              const_pointer;
        -:  120:    typedef typename add_lvalue_reference<T>::type       reference;
        -:  121:    typedef typename add_lvalue_reference<const T>::type const_reference;
        -:  122:    typedef T                                     value_type;
        -:  123:
        -:  124:    template <class U> struct rebind {typedef allocator<U> other;};
        -:  125:
        -:  126:    allocator() noexcept;
        -:  127:    allocator(const allocator&) noexcept;
        -:  128:    template <class U> allocator(const allocator<U>&) noexcept;
        -:  129:    ~allocator();
        -:  130:    pointer address(reference x) const noexcept;
        -:  131:    const_pointer address(const_reference x) const noexcept;
        -:  132:    pointer allocate(size_type, allocator<void>::const_pointer hint = 0);
        -:  133:    void deallocate(pointer p, size_type n) noexcept;
        -:  134:    size_type max_size() const noexcept;
        -:  135:    template<class U, class... Args>
        -:  136:        void construct(U* p, Args&&... args);
        -:  137:    template <class U>
        -:  138:        void destroy(U* p);
        -:  139:};
        -:  140:
        -:  141:template <class T, class U>
        -:  142:bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
        -:  143:
        -:  144:template <class T, class U>
        -:  145:bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;
        -:  146:
        -:  147:template <class OutputIterator, class T>
        -:  148:class raw_storage_iterator
        -:  149:    : public iterator<output_iterator_tag,
        -:  150:                      T,                               // purposefully not C++03
        -:  151:                      ptrdiff_t,                       // purposefully not C++03
        -:  152:                      T*,                              // purposefully not C++03
        -:  153:                      raw_storage_iterator&>           // purposefully not C++03
        -:  154:{
        -:  155:public:
        -:  156:    explicit raw_storage_iterator(OutputIterator x);
        -:  157:    raw_storage_iterator& operator*();
        -:  158:    raw_storage_iterator& operator=(const T& element);
        -:  159:    raw_storage_iterator& operator++();
        -:  160:    raw_storage_iterator  operator++(int);
        -:  161:};
        -:  162:
        -:  163:template <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
        -:  164:template <class T> void               return_temporary_buffer(T* p) noexcept;
        -:  165:
        -:  166:template <class T> T* addressof(T& r) noexcept;
        -:  167:
        -:  168:template <class InputIterator, class ForwardIterator>
        -:  169:ForwardIterator
        -:  170:uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);
        -:  171:
        -:  172:template <class InputIterator, class Size, class ForwardIterator>
        -:  173:ForwardIterator
        -:  174:uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);
        -:  175:
        -:  176:template <class ForwardIterator, class T>
        -:  177:void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
        -:  178:
        -:  179:template <class ForwardIterator, class Size, class T>
        -:  180:ForwardIterator
        -:  181:uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
        -:  182:
        -:  183:template <class Y> struct auto_ptr_ref {};
        -:  184:
        -:  185:template<class X>
        -:  186:class auto_ptr
        -:  187:{
        -:  188:public:
        -:  189:    typedef X element_type;
        -:  190:
        -:  191:    explicit auto_ptr(X* p =0) throw();
        -:  192:    auto_ptr(auto_ptr&) throw();
        -:  193:    template<class Y> auto_ptr(auto_ptr<Y>&) throw();
        -:  194:    auto_ptr& operator=(auto_ptr&) throw();
        -:  195:    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
        -:  196:    auto_ptr& operator=(auto_ptr_ref<X> r) throw();
        -:  197:    ~auto_ptr() throw();
        -:  198:
        -:  199:    typename add_lvalue_reference<X>::type operator*() const throw();
        -:  200:    X* operator->() const throw();
        -:  201:    X* get() const throw();
        -:  202:    X* release() throw();
        -:  203:    void reset(X* p =0) throw();
        -:  204:
        -:  205:    auto_ptr(auto_ptr_ref<X>) throw();
        -:  206:    template<class Y> operator auto_ptr_ref<Y>() throw();
        -:  207:    template<class Y> operator auto_ptr<Y>() throw();
        -:  208:};
        -:  209:
        -:  210:template <class T>
        -:  211:struct default_delete
        -:  212:{
        -:  213:    constexpr default_delete() noexcept = default;
        -:  214:    template <class U> default_delete(const default_delete<U>&) noexcept;
        -:  215:
        -:  216:    void operator()(T*) const noexcept;
        -:  217:};
        -:  218:
        -:  219:template <class T>
        -:  220:struct default_delete<T[]>
        -:  221:{
        -:  222:    constexpr default_delete() noexcept = default;
        -:  223:    void operator()(T*) const noexcept;
        -:  224:    template <class U> void operator()(U*) const = delete;
        -:  225:};
        -:  226:
        -:  227:template <class T, class D = default_delete<T>>
        -:  228:class unique_ptr
        -:  229:{
        -:  230:public:
        -:  231:    typedef see below pointer;
        -:  232:    typedef T element_type;
        -:  233:    typedef D deleter_type;
        -:  234:
        -:  235:    // constructors
        -:  236:    constexpr unique_ptr() noexcept;
        -:  237:    explicit unique_ptr(pointer p) noexcept;
        -:  238:    unique_ptr(pointer p, see below d1) noexcept;
        -:  239:    unique_ptr(pointer p, see below d2) noexcept;
        -:  240:    unique_ptr(unique_ptr&& u) noexcept;
        -:  241:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  242:    template <class U, class E>
        -:  243:        unique_ptr(unique_ptr<U, E>&& u) noexcept;
        -:  244:    template <class U>
        -:  245:        unique_ptr(auto_ptr<U>&& u) noexcept;
        -:  246:
        -:  247:    // destructor
        -:  248:    ~unique_ptr();
        -:  249:
        -:  250:    // assignment
        -:  251:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  252:    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
        -:  253:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  254:
        -:  255:    // observers
        -:  256:    typename add_lvalue_reference<T>::type operator*() const;
        -:  257:    pointer operator->() const noexcept;
        -:  258:    pointer get() const noexcept;
        -:  259:    deleter_type& get_deleter() noexcept;
        -:  260:    const deleter_type& get_deleter() const noexcept;
        -:  261:    explicit operator bool() const noexcept;
        -:  262:
        -:  263:    // modifiers
        -:  264:    pointer release() noexcept;
        -:  265:    void reset(pointer p = pointer()) noexcept;
        -:  266:    void swap(unique_ptr& u) noexcept;
        -:  267:};
        -:  268:
        -:  269:template <class T, class D>
        -:  270:class unique_ptr<T[], D>
        -:  271:{
        -:  272:public:
        -:  273:    typedef implementation-defined pointer;
        -:  274:    typedef T element_type;
        -:  275:    typedef D deleter_type;
        -:  276:
        -:  277:    // constructors
        -:  278:    constexpr unique_ptr() noexcept;
        -:  279:    explicit unique_ptr(pointer p) noexcept;
        -:  280:    unique_ptr(pointer p, see below d) noexcept;
        -:  281:    unique_ptr(pointer p, see below d) noexcept;
        -:  282:    unique_ptr(unique_ptr&& u) noexcept;
        -:  283:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  284:
        -:  285:    // destructor
        -:  286:    ~unique_ptr();
        -:  287:
        -:  288:    // assignment
        -:  289:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  290:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  291:
        -:  292:    // observers
        -:  293:    T& operator[](size_t i) const;
        -:  294:    pointer get() const noexcept;
        -:  295:    deleter_type& get_deleter() noexcept;
        -:  296:    const deleter_type& get_deleter() const noexcept;
        -:  297:    explicit operator bool() const noexcept;
        -:  298:
        -:  299:    // modifiers
        -:  300:    pointer release() noexcept;
        -:  301:    void reset(pointer p = pointer()) noexcept;
        -:  302:    void reset(nullptr_t) noexcept;
        -:  303:    template <class U> void reset(U) = delete;
        -:  304:    void swap(unique_ptr& u) noexcept;
        -:  305:};
        -:  306:
        -:  307:template <class T, class D>
        -:  308:    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
        -:  309:
        -:  310:template <class T1, class D1, class T2, class D2>
        -:  311:    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  312:template <class T1, class D1, class T2, class D2>
        -:  313:    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  314:template <class T1, class D1, class T2, class D2>
        -:  315:    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  316:template <class T1, class D1, class T2, class D2>
        -:  317:    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  318:template <class T1, class D1, class T2, class D2>
        -:  319:    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  320:template <class T1, class D1, class T2, class D2>
        -:  321:    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  322:
        -:  323:template <class T, class D>
        -:  324:    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  325:template <class T, class D>
        -:  326:    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  327:template <class T, class D>
        -:  328:    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  329:template <class T, class D>
        -:  330:    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  331:
        -:  332:template <class T, class D>
        -:  333:    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
        -:  334:template <class T, class D>
        -:  335:    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
        -:  336:template <class T, class D>
        -:  337:    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
        -:  338:template <class T, class D>
        -:  339:    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
        -:  340:template <class T, class D>
        -:  341:    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
        -:  342:template <class T, class D>
        -:  343:    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
        -:  344:template <class T, class D>
        -:  345:    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
        -:  346:template <class T, class D>
        -:  347:    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
        -:  348:
        -:  349:class bad_weak_ptr
        -:  350:    : public std::exception
        -:  351:{
        -:  352:    bad_weak_ptr() noexcept;
        -:  353:};
        -:  354:
        -:  355:template<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14
        -:  356:template<class T>                unique_ptr<T> make_unique(size_t n);           // C++14
        -:  357:template<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]
        -:  358:
        -:  359:template<class T>
        -:  360:class shared_ptr
        -:  361:{
        -:  362:public:
        -:  363:    typedef T element_type;
        -:  364:
        -:  365:    // constructors:
        -:  366:    constexpr shared_ptr() noexcept;
        -:  367:    template<class Y> explicit shared_ptr(Y* p);
        -:  368:    template<class Y, class D> shared_ptr(Y* p, D d);
        -:  369:    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
        -:  370:    template <class D> shared_ptr(nullptr_t p, D d);
        -:  371:    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
        -:  372:    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;
        -:  373:    shared_ptr(const shared_ptr& r) noexcept;
        -:  374:    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
        -:  375:    shared_ptr(shared_ptr&& r) noexcept;
        -:  376:    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
        -:  377:    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
        -:  378:    template<class Y> shared_ptr(auto_ptr<Y>&& r);
        -:  379:    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
        -:  380:    shared_ptr(nullptr_t) : shared_ptr() { }
        -:  381:
        -:  382:    // destructor:
        -:  383:    ~shared_ptr();
        -:  384:
        -:  385:    // assignment:
        -:  386:    shared_ptr& operator=(const shared_ptr& r) noexcept;
        -:  387:    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
        -:  388:    shared_ptr& operator=(shared_ptr&& r) noexcept;
        -:  389:    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);
        -:  390:    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r);
        -:  391:    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
        -:  392:
        -:  393:    // modifiers:
        -:  394:    void swap(shared_ptr& r) noexcept;
        -:  395:    void reset() noexcept;
        -:  396:    template<class Y> void reset(Y* p);
        -:  397:    template<class Y, class D> void reset(Y* p, D d);
        -:  398:    template<class Y, class D, class A> void reset(Y* p, D d, A a);
        -:  399:
        -:  400:    // observers:
        -:  401:    T* get() const noexcept;
        -:  402:    T& operator*() const noexcept;
        -:  403:    T* operator->() const noexcept;
        -:  404:    long use_count() const noexcept;
        -:  405:    bool unique() const noexcept;
        -:  406:    explicit operator bool() const noexcept;
        -:  407:    template<class U> bool owner_before(shared_ptr<U> const& b) const;
        -:  408:    template<class U> bool owner_before(weak_ptr<U> const& b) const;
        -:  409:};
        -:  410:
        -:  411:// shared_ptr comparisons:
        -:  412:template<class T, class U>
        -:  413:    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  414:template<class T, class U>
        -:  415:    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  416:template<class T, class U>
        -:  417:    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  418:template<class T, class U>
        -:  419:    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  420:template<class T, class U>
        -:  421:    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  422:template<class T, class U>
        -:  423:    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  424:
        -:  425:template <class T>
        -:  426:    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  427:template <class T>
        -:  428:    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  429:template <class T>
        -:  430:    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  431:template <class T>
        -:  432:    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  433:template <class T>
        -:  434:    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  435:template <class T>
        -:  436:bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  437:template <class T>
        -:  438:    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  439:template <class T>
        -:  440:    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  441:template <class T>
        -:  442:    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  443:template <class T>
        -:  444:    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  445:template <class T>
        -:  446:    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  447:template <class T>
        -:  448:    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  449:
        -:  450:// shared_ptr specialized algorithms:
        -:  451:template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;
        -:  452:
        -:  453:// shared_ptr casts:
        -:  454:template<class T, class U>
        -:  455:    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  456:template<class T, class U>
        -:  457:    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  458:template<class T, class U>
        -:  459:    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  460:
        -:  461:// shared_ptr I/O:
        -:  462:template<class E, class T, class Y>
        -:  463:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);
        -:  464:
        -:  465:// shared_ptr get_deleter:
        -:  466:template<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;
        -:  467:
        -:  468:template<class T, class... Args>
        -:  469:    shared_ptr<T> make_shared(Args&&... args);
        -:  470:template<class T, class A, class... Args>
        -:  471:    shared_ptr<T> allocate_shared(const A& a, Args&&... args);
        -:  472:
        -:  473:template<class T>
        -:  474:class weak_ptr
        -:  475:{
        -:  476:public:
        -:  477:    typedef T element_type;
        -:  478:
        -:  479:    // constructors
        -:  480:    constexpr weak_ptr() noexcept;
        -:  481:    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;
        -:  482:    weak_ptr(weak_ptr const& r) noexcept;
        -:  483:    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;
        -:  484:    weak_ptr(weak_ptr&& r) noexcept;                      // C++14
        -:  485:    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14
        -:  486:
        -:  487:    // destructor
        -:  488:    ~weak_ptr();
        -:  489:
        -:  490:    // assignment
        -:  491:    weak_ptr& operator=(weak_ptr const& r) noexcept;
        -:  492:    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;
        -:  493:    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;
        -:  494:    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14
        -:  495:    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14
        -:  496:
        -:  497:    // modifiers
        -:  498:    void swap(weak_ptr& r) noexcept;
        -:  499:    void reset() noexcept;
        -:  500:
        -:  501:    // observers
        -:  502:    long use_count() const noexcept;
        -:  503:    bool expired() const noexcept;
        -:  504:    shared_ptr<T> lock() const noexcept;
        -:  505:    template<class U> bool owner_before(shared_ptr<U> const& b) const;
        -:  506:    template<class U> bool owner_before(weak_ptr<U> const& b) const;
        -:  507:};
        -:  508:
        -:  509:// weak_ptr specialized algorithms:
        -:  510:template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
        -:  511:
        -:  512:// class owner_less:
        -:  513:template<class T> struct owner_less;
        -:  514:
        -:  515:template<class T>
        -:  516:struct owner_less<shared_ptr<T>>
        -:  517:    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>
        -:  518:{
        -:  519:    typedef bool result_type;
        -:  520:    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const;
        -:  521:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const;
        -:  522:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const;
        -:  523:};
        -:  524:
        -:  525:template<class T>
        -:  526:struct owner_less<weak_ptr<T>>
        -:  527:    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>
        -:  528:{
        -:  529:    typedef bool result_type;
        -:  530:    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const;
        -:  531:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const;
        -:  532:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const;
        -:  533:};
        -:  534:
        -:  535:template<class T>
        -:  536:class enable_shared_from_this
        -:  537:{
        -:  538:protected:
        -:  539:    constexpr enable_shared_from_this() noexcept;
        -:  540:    enable_shared_from_this(enable_shared_from_this const&) noexcept;
        -:  541:    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;
        -:  542:    ~enable_shared_from_this();
        -:  543:public:
        -:  544:    shared_ptr<T> shared_from_this();
        -:  545:    shared_ptr<T const> shared_from_this() const;
        -:  546:};
        -:  547:
        -:  548:template<class T>
        -:  549:    bool atomic_is_lock_free(const shared_ptr<T>* p);
        -:  550:template<class T>
        -:  551:    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
        -:  552:template<class T>
        -:  553:    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
        -:  554:template<class T>
        -:  555:    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
        -:  556:template<class T>
        -:  557:    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  558:template<class T>
        -:  559:    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
        -:  560:template<class T>
        -:  561:    shared_ptr<T>
        -:  562:    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  563:template<class T>
        -:  564:    bool
        -:  565:    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  566:template<class T>
        -:  567:    bool
        -:  568:    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  569:template<class T>
        -:  570:    bool
        -:  571:    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  572:                                          shared_ptr<T> w, memory_order success,
        -:  573:                                          memory_order failure);
        -:  574:template<class T>
        -:  575:    bool
        -:  576:    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  577:                                            shared_ptr<T> w, memory_order success,
        -:  578:                                            memory_order failure);
        -:  579:// Hash support
        -:  580:template <class T> struct hash;
        -:  581:template <class T, class D> struct hash<unique_ptr<T, D> >;
        -:  582:template <class T> struct hash<shared_ptr<T> >;
        -:  583:
        -:  584:// Pointer safety
        -:  585:enum class pointer_safety { relaxed, preferred, strict };
        -:  586:void declare_reachable(void *p);
        -:  587:template <class T> T *undeclare_reachable(T *p);
        -:  588:void declare_no_pointers(char *p, size_t n);
        -:  589:void undeclare_no_pointers(char *p, size_t n);
        -:  590:pointer_safety get_pointer_safety() noexcept;
        -:  591:
        -:  592:void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
        -:  593:
        -:  594:}  // std
        -:  595:
        -:  596:*/
        -:  597:
        -:  598:#include <__config>
        -:  599:#include <type_traits>
        -:  600:#include <typeinfo>
        -:  601:#include <cstddef>
        -:  602:#include <cstdint>
        -:  603:#include <new>
        -:  604:#include <utility>
        -:  605:#include <limits>
        -:  606:#include <iterator>
        -:  607:#include <__functional_base>
        -:  608:#include <iosfwd>
        -:  609:#include <tuple>
        -:  610:#include <cstring>
        -:  611:#if defined(_LIBCPP_NO_EXCEPTIONS)
        -:  612:    #include <cassert>
        -:  613:#endif
        -:  614:
        -:  615:#if __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -:  616:#  include <atomic>
        -:  617:#endif
        -:  618:
        -:  619:#include <__undef_min_max>
        -:  620:#include <__undef___deallocate>
        -:  621:
        -:  622:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  623:#pragma GCC system_header
        -:  624:#endif
        -:  625:
        -:  626:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  627:
        -:  628:template <class _ValueType>
        -:  629:inline _LIBCPP_ALWAYS_INLINE
        -:  630:_ValueType __libcpp_relaxed_load(_ValueType const* __value) {
        -:  631:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  632:    defined(__ATOMIC_RELAXED) &&        \
        -:  633:    (__has_builtin(__atomic_load_n) || _GNUC_VER >= 407)
        -:  634:    return __atomic_load_n(__value, __ATOMIC_RELAXED);
        -:  635:#else
        -:  636:    return *__value;
        -:  637:#endif
        -:  638:}
        -:  639:
        -:  640:template <class _ValueType>
        -:  641:inline _LIBCPP_ALWAYS_INLINE
        -:  642:_ValueType __libcpp_acquire_load(_ValueType const* __value) {
        -:  643:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  644:    defined(__ATOMIC_ACQUIRE) &&        \
        -:  645:    (__has_builtin(__atomic_load_n) || _GNUC_VER >= 407)
        -:  646:    return __atomic_load_n(__value, __ATOMIC_ACQUIRE);
        -:  647:#else
        -:  648:    return *__value;
        -:  649:#endif
        -:  650:}
        -:  651:
        -:  652:// addressof moved to <__functional_base>
        -:  653:
        -:  654:template <class _Tp> class allocator;
        -:  655:
        -:  656:template <>
        -:  657:class _LIBCPP_TYPE_VIS_ONLY allocator<void>
        -:  658:{
        -:  659:public:
        -:  660:    typedef void*             pointer;
        -:  661:    typedef const void*       const_pointer;
        -:  662:    typedef void              value_type;
        -:  663:
        -:  664:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  665:};
        -:  666:
        -:  667:template <>
        -:  668:class _LIBCPP_TYPE_VIS_ONLY allocator<const void>
        -:  669:{
        -:  670:public:
        -:  671:    typedef const void*       pointer;
        -:  672:    typedef const void*       const_pointer;
        -:  673:    typedef const void        value_type;
        -:  674:
        -:  675:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  676:};
        -:  677:
        -:  678:// pointer_traits
        -:  679:
        -:  680:template <class _Tp>
        -:  681:struct __has_element_type
        -:  682:{
        -:  683:private:
        -:  684:    struct __two {char __lx; char __lxx;};
        -:  685:    template <class _Up> static __two __test(...);
        -:  686:    template <class _Up> static char __test(typename _Up::element_type* = 0);
        -:  687:public:
        -:  688:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  689:};
        -:  690:
        -:  691:template <class _Ptr, bool = __has_element_type<_Ptr>::value>
        -:  692:struct __pointer_traits_element_type;
        -:  693:
        -:  694:template <class _Ptr>
        -:  695:struct __pointer_traits_element_type<_Ptr, true>
        -:  696:{
        -:  697:    typedef typename _Ptr::element_type type;
        -:  698:};
        -:  699:
        -:  700:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  701:
        -:  702:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  703:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
        -:  704:{
        -:  705:    typedef typename _Sp<_Tp, _Args...>::element_type type;
        -:  706:};
        -:  707:
        -:  708:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  709:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
        -:  710:{
        -:  711:    typedef _Tp type;
        -:  712:};
        -:  713:
        -:  714:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  715:
        -:  716:template <template <class> class _Sp, class _Tp>
        -:  717:struct __pointer_traits_element_type<_Sp<_Tp>, true>
        -:  718:{
        -:  719:    typedef typename _Sp<_Tp>::element_type type;
        -:  720:};
        -:  721:
        -:  722:template <template <class> class _Sp, class _Tp>
        -:  723:struct __pointer_traits_element_type<_Sp<_Tp>, false>
        -:  724:{
        -:  725:    typedef _Tp type;
        -:  726:};
        -:  727:
        -:  728:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  729:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, true>
        -:  730:{
        -:  731:    typedef typename _Sp<_Tp, _A0>::element_type type;
        -:  732:};
        -:  733:
        -:  734:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  735:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, false>
        -:  736:{
        -:  737:    typedef _Tp type;
        -:  738:};
        -:  739:
        -:  740:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  741:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, true>
        -:  742:{
        -:  743:    typedef typename _Sp<_Tp, _A0, _A1>::element_type type;
        -:  744:};
        -:  745:
        -:  746:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  747:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, false>
        -:  748:{
        -:  749:    typedef _Tp type;
        -:  750:};
        -:  751:
        -:  752:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  753:                                                           class _A1, class _A2>
        -:  754:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, true>
        -:  755:{
        -:  756:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::element_type type;
        -:  757:};
        -:  758:
        -:  759:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  760:                                                           class _A1, class _A2>
        -:  761:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, false>
        -:  762:{
        -:  763:    typedef _Tp type;
        -:  764:};
        -:  765:
        -:  766:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  767:
        -:  768:template <class _Tp>
        -:  769:struct __has_difference_type
        -:  770:{
        -:  771:private:
        -:  772:    struct __two {char __lx; char __lxx;};
        -:  773:    template <class _Up> static __two __test(...);
        -:  774:    template <class _Up> static char __test(typename _Up::difference_type* = 0);
        -:  775:public:
        -:  776:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  777:};
        -:  778:
        -:  779:template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
        -:  780:struct __pointer_traits_difference_type
        -:  781:{
        -:  782:    typedef ptrdiff_t type;
        -:  783:};
        -:  784:
        -:  785:template <class _Ptr>
        -:  786:struct __pointer_traits_difference_type<_Ptr, true>
        -:  787:{
        -:  788:    typedef typename _Ptr::difference_type type;
        -:  789:};
        -:  790:
        -:  791:template <class _Tp, class _Up>
        -:  792:struct __has_rebind
        -:  793:{
        -:  794:private:
        -:  795:    struct __two {char __lx; char __lxx;};
        -:  796:    template <class _Xp> static __two __test(...);
        -:  797:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>* = 0);
        -:  798:public:
        -:  799:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  800:};
        -:  801:
        -:  802:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -:  803:struct __pointer_traits_rebind
        -:  804:{
        -:  805:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  806:    typedef typename _Tp::template rebind<_Up> type;
        -:  807:#else
        -:  808:    typedef typename _Tp::template rebind<_Up>::other type;
        -:  809:#endif
        -:  810:};
        -:  811:
        -:  812:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  813:
        -:  814:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  815:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
        -:  816:{
        -:  817:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  818:    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
        -:  819:#else
        -:  820:    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;
        -:  821:#endif
        -:  822:};
        -:  823:
        -:  824:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  825:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
        -:  826:{
        -:  827:    typedef _Sp<_Up, _Args...> type;
        -:  828:};
        -:  829:
        -:  830:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  831:
        -:  832:template <template <class> class _Sp, class _Tp, class _Up>
        -:  833:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, true>
        -:  834:{
        -:  835:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  836:    typedef typename _Sp<_Tp>::template rebind<_Up> type;
        -:  837:#else
        -:  838:    typedef typename _Sp<_Tp>::template rebind<_Up>::other type;
        -:  839:#endif
        -:  840:};
        -:  841:
        -:  842:template <template <class> class _Sp, class _Tp, class _Up>
        -:  843:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, false>
        -:  844:{
        -:  845:    typedef _Sp<_Up> type;
        -:  846:};
        -:  847:
        -:  848:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  849:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, true>
        -:  850:{
        -:  851:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  852:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up> type;
        -:  853:#else
        -:  854:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up>::other type;
        -:  855:#endif
        -:  856:};
        -:  857:
        -:  858:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  859:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, false>
        -:  860:{
        -:  861:    typedef _Sp<_Up, _A0> type;
        -:  862:};
        -:  863:
        -:  864:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  865:                                         class _A1, class _Up>
        -:  866:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, true>
        -:  867:{
        -:  868:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  869:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up> type;
        -:  870:#else
        -:  871:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -:  872:#endif
        -:  873:};
        -:  874:
        -:  875:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  876:                                         class _A1, class _Up>
        -:  877:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, false>
        -:  878:{
        -:  879:    typedef _Sp<_Up, _A0, _A1> type;
        -:  880:};
        -:  881:
        -:  882:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  883:                                                class _A1, class _A2, class _Up>
        -:  884:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, true>
        -:  885:{
        -:  886:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  887:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up> type;
        -:  888:#else
        -:  889:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -:  890:#endif
        -:  891:};
        -:  892:
        -:  893:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  894:                                                class _A1, class _A2, class _Up>
        -:  895:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, false>
        -:  896:{
        -:  897:    typedef _Sp<_Up, _A0, _A1, _A2> type;
        -:  898:};
        -:  899:
        -:  900:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  901:
        -:  902:template <class _Ptr>
        -:  903:struct _LIBCPP_TYPE_VIS_ONLY pointer_traits
        -:  904:{
        -:  905:    typedef _Ptr                                                     pointer;
        -:  906:    typedef typename __pointer_traits_element_type<pointer>::type    element_type;
        -:  907:    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;
        -:  908:
        -:  909:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  910:    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;
        -:  911:#else
        -:  912:    template <class _Up> struct rebind
        -:  913:        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};
        -:  914:#endif  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  915:
        -:  916:private:
        -:  917:    struct __nat {};
        -:  918:public:
        -:  919:    _LIBCPP_INLINE_VISIBILITY
        -:  920:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  921:                                           __nat, element_type>::type& __r)
        -:  922:        {return pointer::pointer_to(__r);}
        -:  923:};
        -:  924:
        -:  925:template <class _Tp>
        -:  926:struct _LIBCPP_TYPE_VIS_ONLY pointer_traits<_Tp*>
        -:  927:{
        -:  928:    typedef _Tp*      pointer;
        -:  929:    typedef _Tp       element_type;
        -:  930:    typedef ptrdiff_t difference_type;
        -:  931:
        -:  932:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  933:    template <class _Up> using rebind = _Up*;
        -:  934:#else
        -:  935:    template <class _Up> struct rebind {typedef _Up* other;};
        -:  936:#endif
        -:  937:
        -:  938:private:
        -:  939:    struct __nat {};
        -:  940:public:
        -:  941:    _LIBCPP_INLINE_VISIBILITY
        -:  942:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  943:                                      __nat, element_type>::type& __r) _NOEXCEPT
        -:  944:        {return _VSTD::addressof(__r);}
        -:  945:};
        -:  946:
        -:  947:template <class _From, class _To>
        -:  948:struct __rebind_pointer {
        -:  949:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  950:    typedef typename pointer_traits<_From>::template rebind<_To>        type;
        -:  951:#else
        -:  952:    typedef typename pointer_traits<_From>::template rebind<_To>::other type;
        -:  953:#endif
        -:  954:};
        -:  955:
        -:  956:// allocator_traits
        -:  957:
        -:  958:namespace __has_pointer_type_imp
        -:  959:{
        -:  960:    template <class _Up> static __two __test(...);
        -:  961:    template <class _Up> static char __test(typename _Up::pointer* = 0);
        -:  962:}
        -:  963:
        -:  964:template <class _Tp>
        -:  965:struct __has_pointer_type
        -:  966:    : public integral_constant<bool, sizeof(__has_pointer_type_imp::__test<_Tp>(0)) == 1>
        -:  967:{
        -:  968:};
        -:  969:
        -:  970:namespace __pointer_type_imp
        -:  971:{
        -:  972:
        -:  973:template <class _Tp, class _Dp, bool = __has_pointer_type<_Dp>::value>
        -:  974:struct __pointer_type
        -:  975:{
        -:  976:    typedef typename _Dp::pointer type;
        -:  977:};
        -:  978:
        -:  979:template <class _Tp, class _Dp>
        -:  980:struct __pointer_type<_Tp, _Dp, false>
        -:  981:{
        -:  982:    typedef _Tp* type;
        -:  983:};
        -:  984:
        -:  985:}  // __pointer_type_imp
        -:  986:
        -:  987:template <class _Tp, class _Dp>
        -:  988:struct __pointer_type
        -:  989:{
        -:  990:    typedef typename __pointer_type_imp::__pointer_type<_Tp, typename remove_reference<_Dp>::type>::type type;
        -:  991:};
        -:  992:
        -:  993:template <class _Tp>
        -:  994:struct __has_const_pointer
        -:  995:{
        -:  996:private:
        -:  997:    struct __two {char __lx; char __lxx;};
        -:  998:    template <class _Up> static __two __test(...);
        -:  999:    template <class _Up> static char __test(typename _Up::const_pointer* = 0);
        -: 1000:public:
        -: 1001:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1002:};
        -: 1003:
        -: 1004:template <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>
        -: 1005:struct __const_pointer
        -: 1006:{
        -: 1007:    typedef typename _Alloc::const_pointer type;
        -: 1008:};
        -: 1009:
        -: 1010:template <class _Tp, class _Ptr, class _Alloc>
        -: 1011:struct __const_pointer<_Tp, _Ptr, _Alloc, false>
        -: 1012:{
        -: 1013:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1014:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp> type;
        -: 1015:#else
        -: 1016:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp>::other type;
        -: 1017:#endif
        -: 1018:};
        -: 1019:
        -: 1020:template <class _Tp>
        -: 1021:struct __has_void_pointer
        -: 1022:{
        -: 1023:private:
        -: 1024:    struct __two {char __lx; char __lxx;};
        -: 1025:    template <class _Up> static __two __test(...);
        -: 1026:    template <class _Up> static char __test(typename _Up::void_pointer* = 0);
        -: 1027:public:
        -: 1028:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1029:};
        -: 1030:
        -: 1031:template <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>
        -: 1032:struct __void_pointer
        -: 1033:{
        -: 1034:    typedef typename _Alloc::void_pointer type;
        -: 1035:};
        -: 1036:
        -: 1037:template <class _Ptr, class _Alloc>
        -: 1038:struct __void_pointer<_Ptr, _Alloc, false>
        -: 1039:{
        -: 1040:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1041:    typedef typename pointer_traits<_Ptr>::template rebind<void> type;
        -: 1042:#else
        -: 1043:    typedef typename pointer_traits<_Ptr>::template rebind<void>::other type;
        -: 1044:#endif
        -: 1045:};
        -: 1046:
        -: 1047:template <class _Tp>
        -: 1048:struct __has_const_void_pointer
        -: 1049:{
        -: 1050:private:
        -: 1051:    struct __two {char __lx; char __lxx;};
        -: 1052:    template <class _Up> static __two __test(...);
        -: 1053:    template <class _Up> static char __test(typename _Up::const_void_pointer* = 0);
        -: 1054:public:
        -: 1055:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1056:};
        -: 1057:
        -: 1058:template <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>
        -: 1059:struct __const_void_pointer
        -: 1060:{
        -: 1061:    typedef typename _Alloc::const_void_pointer type;
        -: 1062:};
        -: 1063:
        -: 1064:template <class _Ptr, class _Alloc>
        -: 1065:struct __const_void_pointer<_Ptr, _Alloc, false>
        -: 1066:{
        -: 1067:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1068:    typedef typename pointer_traits<_Ptr>::template rebind<const void> type;
        -: 1069:#else
        -: 1070:    typedef typename pointer_traits<_Ptr>::template rebind<const void>::other type;
        -: 1071:#endif
        -: 1072:};
        -: 1073:
        -: 1074:template <class _Tp>
        -: 1075:inline _LIBCPP_INLINE_VISIBILITY
        -: 1076:_Tp*
        -: 1077:__to_raw_pointer(_Tp* __p) _NOEXCEPT
        -: 1078:{
        -: 1079:    return __p;
        -: 1080:}
        -: 1081:
        -: 1082:template <class _Pointer>
        -: 1083:inline _LIBCPP_INLINE_VISIBILITY
        -: 1084:typename pointer_traits<_Pointer>::element_type*
        -: 1085:__to_raw_pointer(_Pointer __p) _NOEXCEPT
        -: 1086:{
        -: 1087:    return _VSTD::__to_raw_pointer(__p.operator->());
        -: 1088:}
        -: 1089:
        -: 1090:template <class _Tp>
        -: 1091:struct __has_size_type
        -: 1092:{
        -: 1093:private:
        -: 1094:    struct __two {char __lx; char __lxx;};
        -: 1095:    template <class _Up> static __two __test(...);
        -: 1096:    template <class _Up> static char __test(typename _Up::size_type* = 0);
        -: 1097:public:
        -: 1098:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1099:};
        -: 1100:
        -: 1101:template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>
        -: 1102:struct __size_type
        -: 1103:{
        -: 1104:    typedef typename make_unsigned<_DiffType>::type type;
        -: 1105:};
        -: 1106:
        -: 1107:template <class _Alloc, class _DiffType>
        -: 1108:struct __size_type<_Alloc, _DiffType, true>
        -: 1109:{
        -: 1110:    typedef typename _Alloc::size_type type;
        -: 1111:};
        -: 1112:
        -: 1113:template <class _Tp>
        -: 1114:struct __has_propagate_on_container_copy_assignment
        -: 1115:{
        -: 1116:private:
        -: 1117:    struct __two {char __lx; char __lxx;};
        -: 1118:    template <class _Up> static __two __test(...);
        -: 1119:    template <class _Up> static char __test(typename _Up::propagate_on_container_copy_assignment* = 0);
        -: 1120:public:
        -: 1121:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1122:};
        -: 1123:
        -: 1124:template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>
        -: 1125:struct __propagate_on_container_copy_assignment
        -: 1126:{
        -: 1127:    typedef false_type type;
        -: 1128:};
        -: 1129:
        -: 1130:template <class _Alloc>
        -: 1131:struct __propagate_on_container_copy_assignment<_Alloc, true>
        -: 1132:{
        -: 1133:    typedef typename _Alloc::propagate_on_container_copy_assignment type;
        -: 1134:};
        -: 1135:
        -: 1136:template <class _Tp>
        -: 1137:struct __has_propagate_on_container_move_assignment
        -: 1138:{
        -: 1139:private:
        -: 1140:    struct __two {char __lx; char __lxx;};
        -: 1141:    template <class _Up> static __two __test(...);
        -: 1142:    template <class _Up> static char __test(typename _Up::propagate_on_container_move_assignment* = 0);
        -: 1143:public:
        -: 1144:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1145:};
        -: 1146:
        -: 1147:template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>
        -: 1148:struct __propagate_on_container_move_assignment
        -: 1149:{
        -: 1150:    typedef false_type type;
        -: 1151:};
        -: 1152:
        -: 1153:template <class _Alloc>
        -: 1154:struct __propagate_on_container_move_assignment<_Alloc, true>
        -: 1155:{
        -: 1156:    typedef typename _Alloc::propagate_on_container_move_assignment type;
        -: 1157:};
        -: 1158:
        -: 1159:template <class _Tp>
        -: 1160:struct __has_propagate_on_container_swap
        -: 1161:{
        -: 1162:private:
        -: 1163:    struct __two {char __lx; char __lxx;};
        -: 1164:    template <class _Up> static __two __test(...);
        -: 1165:    template <class _Up> static char __test(typename _Up::propagate_on_container_swap* = 0);
        -: 1166:public:
        -: 1167:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1168:};
        -: 1169:
        -: 1170:template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>
        -: 1171:struct __propagate_on_container_swap
        -: 1172:{
        -: 1173:    typedef false_type type;
        -: 1174:};
        -: 1175:
        -: 1176:template <class _Alloc>
        -: 1177:struct __propagate_on_container_swap<_Alloc, true>
        -: 1178:{
        -: 1179:    typedef typename _Alloc::propagate_on_container_swap type;
        -: 1180:};
        -: 1181:
        -: 1182:template <class _Tp>
        -: 1183:struct __has_is_always_equal
        -: 1184:{
        -: 1185:private:
        -: 1186:    struct __two {char __lx; char __lxx;};
        -: 1187:    template <class _Up> static __two __test(...);
        -: 1188:    template <class _Up> static char __test(typename _Up::is_always_equal* = 0);
        -: 1189:public:
        -: 1190:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1191:};
        -: 1192:
        -: 1193:template <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>
        -: 1194:struct __is_always_equal
        -: 1195:{
        -: 1196:    typedef typename _VSTD::is_empty<_Alloc>::type type;
        -: 1197:};
        -: 1198:
        -: 1199:template <class _Alloc>
        -: 1200:struct __is_always_equal<_Alloc, true>
        -: 1201:{
        -: 1202:    typedef typename _Alloc::is_always_equal type;
        -: 1203:};
        -: 1204:
        -: 1205:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -: 1206:struct __has_rebind_other
        -: 1207:{
        -: 1208:private:
        -: 1209:    struct __two {char __lx; char __lxx;};
        -: 1210:    template <class _Xp> static __two __test(...);
        -: 1211:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>::other* = 0);
        -: 1212:public:
        -: 1213:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1214:};
        -: 1215:
        -: 1216:template <class _Tp, class _Up>
        -: 1217:struct __has_rebind_other<_Tp, _Up, false>
        -: 1218:{
        -: 1219:    static const bool value = false;
        -: 1220:};
        -: 1221:
        -: 1222:template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
        -: 1223:struct __allocator_traits_rebind
        -: 1224:{
        -: 1225:    typedef typename _Tp::template rebind<_Up>::other type;
        -: 1226:};
        -: 1227:
        -: 1228:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1229:
        -: 1230:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1231:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true>
        -: 1232:{
        -: 1233:    typedef typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other type;
        -: 1234:};
        -: 1235:
        -: 1236:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1237:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false>
        -: 1238:{
        -: 1239:    typedef _Alloc<_Up, _Args...> type;
        -: 1240:};
        -: 1241:
        -: 1242:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1243:
        -: 1244:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1245:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, true>
        -: 1246:{
        -: 1247:    typedef typename _Alloc<_Tp>::template rebind<_Up>::other type;
        -: 1248:};
        -: 1249:
        -: 1250:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1251:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, false>
        -: 1252:{
        -: 1253:    typedef _Alloc<_Up> type;
        -: 1254:};
        -: 1255:
        -: 1256:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1257:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, true>
        -: 1258:{
        -: 1259:    typedef typename _Alloc<_Tp, _A0>::template rebind<_Up>::other type;
        -: 1260:};
        -: 1261:
        -: 1262:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1263:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, false>
        -: 1264:{
        -: 1265:    typedef _Alloc<_Up, _A0> type;
        -: 1266:};
        -: 1267:
        -: 1268:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1269:                                         class _A1, class _Up>
        -: 1270:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, true>
        -: 1271:{
        -: 1272:    typedef typename _Alloc<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -: 1273:};
        -: 1274:
        -: 1275:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1276:                                         class _A1, class _Up>
        -: 1277:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, false>
        -: 1278:{
        -: 1279:    typedef _Alloc<_Up, _A0, _A1> type;
        -: 1280:};
        -: 1281:
        -: 1282:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1283:                                                class _A1, class _A2, class _Up>
        -: 1284:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, true>
        -: 1285:{
        -: 1286:    typedef typename _Alloc<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -: 1287:};
        -: 1288:
        -: 1289:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1290:                                                class _A1, class _A2, class _Up>
        -: 1291:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, false>
        -: 1292:{
        -: 1293:    typedef _Alloc<_Up, _A0, _A1, _A2> type;
        -: 1294:};
        -: 1295:
        -: 1296:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1297:
        -: 1298:#ifndef _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1299:
        -: 1300:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1301:auto
        -: 1302:__has_allocate_hint_test(_Alloc&& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1303:    -> decltype(__a.allocate(__sz, __p), true_type());
        -: 1304:
        -: 1305:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1306:auto
        -: 1307:__has_allocate_hint_test(const _Alloc& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1308:    -> false_type;
        -: 1309:
        -: 1310:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1311:struct __has_allocate_hint
        -: 1312:    : integral_constant<bool,
        -: 1313:        is_same<
        -: 1314:            decltype(__has_allocate_hint_test(declval<_Alloc>(),
        -: 1315:                                          declval<_SizeType>(),
        -: 1316:                                          declval<_ConstVoidPtr>())),
        -: 1317:            true_type>::value>
        -: 1318:{
        -: 1319:};
        -: 1320:
        -: 1321:#else  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1322:
        -: 1323:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1324:struct __has_allocate_hint
        -: 1325:    : true_type
        -: 1326:{
        -: 1327:};
        -: 1328:
        -: 1329:#endif  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1330:
        -: 1331:#if !defined(_LIBCPP_HAS_NO_ADVANCED_SFINAE) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1332:
        -: 1333:template <class _Alloc, class _Tp, class ..._Args>
        -: 1334:decltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Tp*>(),
        -: 1335:                                           _VSTD::declval<_Args>()...),
        -: 1336:                                           true_type())
        -: 1337:__has_construct_test(_Alloc&& __a, _Tp* __p, _Args&& ...__args);
        -: 1338:
        -: 1339:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1340:false_type
        -: 1341:__has_construct_test(const _Alloc& __a, _Pointer&& __p, _Args&& ...__args);
        -: 1342:
        -: 1343:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1344:struct __has_construct
        -: 1345:    : integral_constant<bool,
        -: 1346:        is_same<
        -: 1347:            decltype(__has_construct_test(declval<_Alloc>(),
        -: 1348:                                          declval<_Pointer>(),
        -: 1349:                                          declval<_Args>()...)),
        -: 1350:            true_type>::value>
        -: 1351:{
        -: 1352:};
        -: 1353:
        -: 1354:template <class _Alloc, class _Pointer>
        -: 1355:auto
        -: 1356:__has_destroy_test(_Alloc&& __a, _Pointer&& __p)
        -: 1357:    -> decltype(__a.destroy(__p), true_type());
        -: 1358:
        -: 1359:template <class _Alloc, class _Pointer>
        -: 1360:auto
        -: 1361:__has_destroy_test(const _Alloc& __a, _Pointer&& __p)
        -: 1362:    -> false_type;
        -: 1363:
        -: 1364:template <class _Alloc, class _Pointer>
        -: 1365:struct __has_destroy
        -: 1366:    : integral_constant<bool,
        -: 1367:        is_same<
        -: 1368:            decltype(__has_destroy_test(declval<_Alloc>(),
        -: 1369:                                        declval<_Pointer>())),
        -: 1370:            true_type>::value>
        -: 1371:{
        -: 1372:};
        -: 1373:
        -: 1374:template <class _Alloc>
        -: 1375:auto
        -: 1376:__has_max_size_test(_Alloc&& __a)
        -: 1377:    -> decltype(__a.max_size(), true_type());
        -: 1378:
        -: 1379:template <class _Alloc>
        -: 1380:auto
        -: 1381:__has_max_size_test(const volatile _Alloc& __a)
        -: 1382:    -> false_type;
        -: 1383:
        -: 1384:template <class _Alloc>
        -: 1385:struct __has_max_size
        -: 1386:    : integral_constant<bool,
        -: 1387:        is_same<
        -: 1388:            decltype(__has_max_size_test(declval<_Alloc&>())),
        -: 1389:            true_type>::value>
        -: 1390:{
        -: 1391:};
        -: 1392:
        -: 1393:template <class _Alloc>
        -: 1394:auto
        -: 1395:__has_select_on_container_copy_construction_test(_Alloc&& __a)
        -: 1396:    -> decltype(__a.select_on_container_copy_construction(), true_type());
        -: 1397:
        -: 1398:template <class _Alloc>
        -: 1399:auto
        -: 1400:__has_select_on_container_copy_construction_test(const volatile _Alloc& __a)
        -: 1401:    -> false_type;
        -: 1402:
        -: 1403:template <class _Alloc>
        -: 1404:struct __has_select_on_container_copy_construction
        -: 1405:    : integral_constant<bool,
        -: 1406:        is_same<
        -: 1407:            decltype(__has_select_on_container_copy_construction_test(declval<_Alloc&>())),
        -: 1408:            true_type>::value>
        -: 1409:{
        -: 1410:};
        -: 1411:
        -: 1412:#else  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1413:
        -: 1414:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1415:
        -: 1416:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1417:struct __has_construct
        -: 1418:    : false_type
        -: 1419:{
        -: 1420:};
        -: 1421:
        -: 1422:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1423:
        -: 1424:template <class _Alloc, class _Pointer, class _Args>
        -: 1425:struct __has_construct
        -: 1426:    : false_type
        -: 1427:{
        -: 1428:};
        -: 1429:
        -: 1430:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1431:
        -: 1432:template <class _Alloc, class _Pointer>
        -: 1433:struct __has_destroy
        -: 1434:    : false_type
        -: 1435:{
        -: 1436:};
        -: 1437:
        -: 1438:template <class _Alloc>
        -: 1439:struct __has_max_size
        -: 1440:    : true_type
        -: 1441:{
        -: 1442:};
        -: 1443:
        -: 1444:template <class _Alloc>
        -: 1445:struct __has_select_on_container_copy_construction
        -: 1446:    : false_type
        -: 1447:{
        -: 1448:};
        -: 1449:
        -: 1450:#endif  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1451:
        -: 1452:template <class _Alloc, class _Ptr, bool = __has_difference_type<_Alloc>::value>
        -: 1453:struct __alloc_traits_difference_type
        -: 1454:{
        -: 1455:    typedef typename pointer_traits<_Ptr>::difference_type type;
        -: 1456:};
        -: 1457:
        -: 1458:template <class _Alloc, class _Ptr>
        -: 1459:struct __alloc_traits_difference_type<_Alloc, _Ptr, true>
        -: 1460:{
        -: 1461:    typedef typename _Alloc::difference_type type;
        -: 1462:};
        -: 1463:
        -: 1464:template <class _Alloc>
        -: 1465:struct _LIBCPP_TYPE_VIS_ONLY allocator_traits
        -: 1466:{
        -: 1467:    typedef _Alloc                              allocator_type;
        -: 1468:    typedef typename allocator_type::value_type value_type;
        -: 1469:
        -: 1470:    typedef typename __pointer_type<value_type, allocator_type>::type pointer;
        -: 1471:    typedef typename __const_pointer<value_type, pointer, allocator_type>::type const_pointer;
        -: 1472:    typedef typename __void_pointer<pointer, allocator_type>::type void_pointer;
        -: 1473:    typedef typename __const_void_pointer<pointer, allocator_type>::type const_void_pointer;
        -: 1474:
        -: 1475:    typedef typename __alloc_traits_difference_type<allocator_type, pointer>::type difference_type;
        -: 1476:    typedef typename __size_type<allocator_type, difference_type>::type size_type;
        -: 1477:
        -: 1478:    typedef typename __propagate_on_container_copy_assignment<allocator_type>::type
        -: 1479:                     propagate_on_container_copy_assignment;
        -: 1480:    typedef typename __propagate_on_container_move_assignment<allocator_type>::type
        -: 1481:                     propagate_on_container_move_assignment;
        -: 1482:    typedef typename __propagate_on_container_swap<allocator_type>::type
        -: 1483:                     propagate_on_container_swap;
        -: 1484:    typedef typename __is_always_equal<allocator_type>::type
        -: 1485:                     is_always_equal;
        -: 1486:
        -: 1487:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1488:    template <class _Tp> using rebind_alloc =
        -: 1489:                  typename __allocator_traits_rebind<allocator_type, _Tp>::type;
        -: 1490:    template <class _Tp> using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
        -: 1491:#else  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1492:    template <class _Tp> struct rebind_alloc
        -: 1493:        {typedef typename __allocator_traits_rebind<allocator_type, _Tp>::type other;};
        -: 1494:    template <class _Tp> struct rebind_traits
        -: 1495:        {typedef allocator_traits<typename rebind_alloc<_Tp>::other> other;};
        -: 1496:#endif  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1497:
        -: 1498:    _LIBCPP_INLINE_VISIBILITY
        -: 1499:    static pointer allocate(allocator_type& __a, size_type __n)
        -: 1500:        {return __a.allocate(__n);}
        -: 1501:    _LIBCPP_INLINE_VISIBILITY
        -: 1502:    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
        -: 1503:        {return allocate(__a, __n, __hint,
        -: 1504:            __has_allocate_hint<allocator_type, size_type, const_void_pointer>());}
        -: 1505:
        -: 1506:    _LIBCPP_INLINE_VISIBILITY
        -: 1507:    static void deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT
        -: 1508:        {__a.deallocate(__p, __n);}
        -: 1509:
        -: 1510:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1511:    template <class _Tp, class... _Args>
        -: 1512:        _LIBCPP_INLINE_VISIBILITY
        -: 1513:        static void construct(allocator_type& __a, _Tp* __p, _Args&&... __args)
        -: 1514:            {__construct(__has_construct<allocator_type, _Tp*, _Args...>(),
        -: 1515:                         __a, __p, _VSTD::forward<_Args>(__args)...);}
        -: 1516:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1517:    template <class _Tp>
        -: 1518:        _LIBCPP_INLINE_VISIBILITY
        -: 1519:        static void construct(allocator_type& __a, _Tp* __p)
        -: 1520:            {
        -: 1521:                ::new ((void*)__p) _Tp();
        -: 1522:            }
        -: 1523:    template <class _Tp, class _A0>
        -: 1524:        _LIBCPP_INLINE_VISIBILITY
        -: 1525:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0)
        -: 1526:            {
        -: 1527:                ::new ((void*)__p) _Tp(__a0);
        -: 1528:            }
        -: 1529:    template <class _Tp, class _A0, class _A1>
        -: 1530:        _LIBCPP_INLINE_VISIBILITY
        -: 1531:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0,
        -: 1532:                              const _A1& __a1)
        -: 1533:            {
        -: 1534:                ::new ((void*)__p) _Tp(__a0, __a1);
        -: 1535:            }
        -: 1536:    template <class _Tp, class _A0, class _A1, class _A2>
        -: 1537:        _LIBCPP_INLINE_VISIBILITY
        -: 1538:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0,
        -: 1539:                              const _A1& __a1, const _A2& __a2)
        -: 1540:            {
        -: 1541:                ::new ((void*)__p) _Tp(__a0, __a1, __a2);
        -: 1542:            }
        -: 1543:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1544:
        -: 1545:    template <class _Tp>
        -: 1546:        _LIBCPP_INLINE_VISIBILITY
        -: 1547:        static void destroy(allocator_type& __a, _Tp* __p)
        -: 1548:            {__destroy(__has_destroy<allocator_type, _Tp*>(), __a, __p);}
        -: 1549:
        -: 1550:    _LIBCPP_INLINE_VISIBILITY
        -: 1551:    static size_type max_size(const allocator_type& __a) _NOEXCEPT
        -: 1552:        {return __max_size(__has_max_size<const allocator_type>(), __a);}
        -: 1553:
        -: 1554:    _LIBCPP_INLINE_VISIBILITY
        -: 1555:    static allocator_type
        -: 1556:        select_on_container_copy_construction(const allocator_type& __a)
        -: 1557:            {return select_on_container_copy_construction(
        -: 1558:                __has_select_on_container_copy_construction<const allocator_type>(),
        -: 1559:                __a);}
        -: 1560:
        -: 1561:    template <class _Ptr>
        -: 1562:        _LIBCPP_INLINE_VISIBILITY
        -: 1563:        static
        -: 1564:        void
        -: 1565:        __construct_forward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2)
        -: 1566:        {
        -: 1567:            for (; __begin1 != __end1; ++__begin1, ++__begin2)
        -: 1568:                construct(__a, _VSTD::__to_raw_pointer(__begin2), _VSTD::move_if_noexcept(*__begin1));
        -: 1569:        }
        -: 1570:
        -: 1571:    template <class _Tp>
        -: 1572:        _LIBCPP_INLINE_VISIBILITY
        -: 1573:        static
        -: 1574:        typename enable_if
        -: 1575:        <
        -: 1576:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1577:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1578:             is_trivially_move_constructible<_Tp>::value,
        -: 1579:            void
        -: 1580:        >::type
        -: 1581:        __construct_forward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1582:        {
        -: 1583:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1584:            if (_Np > 0)
        -: 1585:            {
        -: 1586:                _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));
        -: 1587:                __begin2 += _Np;
        -: 1588:            }
        -: 1589:        }
        -: 1590:
        -: 1591:    template <class _Iter, class _Ptr>
        -: 1592:        _LIBCPP_INLINE_VISIBILITY
        -: 1593:        static
        -: 1594:        void
        -: 1595:        __construct_range_forward(allocator_type& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2)
        -: 1596:        {
        -: 1597:            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)
        -: 1598:                construct(__a, _VSTD::__to_raw_pointer(__begin2), *__begin1);
        -: 1599:        }
        -: 1600:
        -: 1601:    template <class _Tp>
        -: 1602:        _LIBCPP_INLINE_VISIBILITY
        -: 1603:        static
        -: 1604:        typename enable_if
        -: 1605:        <
        -: 1606:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1607:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1608:             is_trivially_move_constructible<_Tp>::value,
        -: 1609:            void
        -: 1610:        >::type
        -: 1611:        __construct_range_forward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1612:        {
        -: 1613:            typedef typename remove_const<_Tp>::type _Vp;
        -: 1614:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1615:            if (_Np > 0)
        -: 1616:            {
        -: 1617:                _VSTD::memcpy(const_cast<_Vp*>(__begin2), __begin1, _Np * sizeof(_Tp));
        -: 1618:                __begin2 += _Np;
        -: 1619:            }
        -: 1620:        }
        -: 1621:
        -: 1622:    template <class _Ptr>
        -: 1623:        _LIBCPP_INLINE_VISIBILITY
        -: 1624:        static
        -: 1625:        void
        -: 1626:        __construct_backward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2)
        -: 1627:        {
        -: 1628:            while (__end1 != __begin1)
        -: 1629:            {
        -: 1630:                construct(__a, _VSTD::__to_raw_pointer(__end2-1), _VSTD::move_if_noexcept(*--__end1));
        -: 1631:                --__end2;
        -: 1632:            }
        -: 1633:        }
        -: 1634:
        -: 1635:    template <class _Tp>
        -: 1636:        _LIBCPP_INLINE_VISIBILITY
        -: 1637:        static
        -: 1638:        typename enable_if
        -: 1639:        <
        -: 1640:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1641:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1642:             is_trivially_move_constructible<_Tp>::value,
        -: 1643:            void
        -: 1644:        >::type
        -: 1645:        __construct_backward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __end2)
        -: 1646:        {
        -: 1647:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1648:            __end2 -= _Np;
        -: 1649:            if (_Np > 0)
        -: 1650:                _VSTD::memcpy(__end2, __begin1, _Np * sizeof(_Tp));
        -: 1651:        }
        -: 1652:
        -: 1653:private:
        -: 1654:
        -: 1655:    _LIBCPP_INLINE_VISIBILITY
        -: 1656:    static pointer allocate(allocator_type& __a, size_type __n,
        -: 1657:        const_void_pointer __hint, true_type)
        -: 1658:        {return __a.allocate(__n, __hint);}
        -: 1659:    _LIBCPP_INLINE_VISIBILITY
        -: 1660:    static pointer allocate(allocator_type& __a, size_type __n,
        -: 1661:        const_void_pointer, false_type)
        -: 1662:        {return __a.allocate(__n);}
        -: 1663:
        -: 1664:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1665:    template <class _Tp, class... _Args>
        -: 1666:        _LIBCPP_INLINE_VISIBILITY
        -: 1667:        static void __construct(true_type, allocator_type& __a, _Tp* __p, _Args&&... __args)
        -: 1668:            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}
        -: 1669:    template <class _Tp, class... _Args>
        -: 1670:        _LIBCPP_INLINE_VISIBILITY
        -: 1671:        static void __construct(false_type, allocator_type&, _Tp* __p, _Args&&... __args)
        -: 1672:            {
        -: 1673:                ::new ((void*)__p) _Tp(_VSTD::forward<_Args>(__args)...);
        -: 1674:            }
        -: 1675:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1676:
        -: 1677:    template <class _Tp>
        -: 1678:        _LIBCPP_INLINE_VISIBILITY
        -: 1679:        static void __destroy(true_type, allocator_type& __a, _Tp* __p)
        -: 1680:            {__a.destroy(__p);}
        -: 1681:    template <class _Tp>
        -: 1682:        _LIBCPP_INLINE_VISIBILITY
        -: 1683:        static void __destroy(false_type, allocator_type&, _Tp* __p)
        -: 1684:            {
        -: 1685:                __p->~_Tp();
        -: 1686:            }
        -: 1687:
        -: 1688:    _LIBCPP_INLINE_VISIBILITY
        -: 1689:    static size_type __max_size(true_type, const allocator_type& __a)
        -: 1690:            {return __a.max_size();}
        -: 1691:    _LIBCPP_INLINE_VISIBILITY
        -: 1692:    static size_type __max_size(false_type, const allocator_type&)
        -: 1693:            {return numeric_limits<size_type>::max();}
        -: 1694:
        -: 1695:    _LIBCPP_INLINE_VISIBILITY
        -: 1696:    static allocator_type
        -: 1697:        select_on_container_copy_construction(true_type, const allocator_type& __a)
        -: 1698:            {return __a.select_on_container_copy_construction();}
        -: 1699:    _LIBCPP_INLINE_VISIBILITY
        -: 1700:    static allocator_type
        -: 1701:        select_on_container_copy_construction(false_type, const allocator_type& __a)
        -: 1702:            {return __a;}
        -: 1703:};
        -: 1704:
        -: 1705:template <class _Traits, class _Tp>
        -: 1706:struct __rebind_alloc_helper
        -: 1707:{
        -: 1708:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1709:    typedef typename _Traits::template rebind_alloc<_Tp>        type;
        -: 1710:#else
        -: 1711:    typedef typename _Traits::template rebind_alloc<_Tp>::other type;
        -: 1712:#endif
        -: 1713:};
        -: 1714:
        -: 1715:// allocator
        -: 1716:
        -: 1717:template <class _Tp>
        -: 1718:class _LIBCPP_TYPE_VIS_ONLY allocator
        -: 1719:{
        -: 1720:public:
        -: 1721:    typedef size_t            size_type;
        -: 1722:    typedef ptrdiff_t         difference_type;
        -: 1723:    typedef _Tp*              pointer;
        -: 1724:    typedef const _Tp*        const_pointer;
        -: 1725:    typedef _Tp&              reference;
        -: 1726:    typedef const _Tp&        const_reference;
        -: 1727:    typedef _Tp               value_type;
        -: 1728:
        -: 1729:    typedef true_type propagate_on_container_move_assignment;
        -: 1730:    typedef true_type is_always_equal;
        -: 1731:
        -: 1732:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1733:
        8: 1734:    _LIBCPP_INLINE_VISIBILITY allocator() _NOEXCEPT {}
        -: 1735:    template <class _Up> _LIBCPP_INLINE_VISIBILITY allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1736:    _LIBCPP_INLINE_VISIBILITY pointer address(reference __x) const _NOEXCEPT
        -: 1737:        {return _VSTD::addressof(__x);}
        -: 1738:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1739:        {return _VSTD::addressof(__x);}
        -: 1740:    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
        -: 1741:        {return static_cast<pointer>(_VSTD::__allocate(__n * sizeof(_Tp)));}
        -: 1742:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT
        -: 1743:        {_VSTD::__deallocate((void*)__p);}
        -: 1744:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
        -: 1745:        {return size_type(~0) / sizeof(_Tp);}
        -: 1746:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1747:    template <class _Up, class... _Args>
        -: 1748:        _LIBCPP_INLINE_VISIBILITY
        -: 1749:        void
        -: 1750:        construct(_Up* __p, _Args&&... __args)
        -: 1751:        {
        -: 1752:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1753:        }
        -: 1754:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1755:        _LIBCPP_INLINE_VISIBILITY
        -: 1756:        void
        -: 1757:        construct(pointer __p)
        -: 1758:        {
        -: 1759:            ::new((void*)__p) _Tp();
        -: 1760:        }
        -: 1761:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1762:
        -: 1763:    template <class _A0>
        -: 1764:        _LIBCPP_INLINE_VISIBILITY
        -: 1765:        void
        -: 1766:        construct(pointer __p, _A0& __a0)
        -: 1767:        {
        -: 1768:            ::new((void*)__p) _Tp(__a0);
        -: 1769:        }
        -: 1770:    template <class _A0>
        -: 1771:        _LIBCPP_INLINE_VISIBILITY
        -: 1772:        void
        -: 1773:        construct(pointer __p, const _A0& __a0)
        -: 1774:        {
        -: 1775:            ::new((void*)__p) _Tp(__a0);
        -: 1776:        }
        -: 1777:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1778:    template <class _A0, class _A1>
        -: 1779:        _LIBCPP_INLINE_VISIBILITY
        -: 1780:        void
        -: 1781:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1782:        {
        -: 1783:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1784:        }
        -: 1785:    template <class _A0, class _A1>
        -: 1786:        _LIBCPP_INLINE_VISIBILITY
        -: 1787:        void
        -: 1788:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1789:        {
        -: 1790:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1791:        }
        -: 1792:    template <class _A0, class _A1>
        -: 1793:        _LIBCPP_INLINE_VISIBILITY
        -: 1794:        void
        -: 1795:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1796:        {
        -: 1797:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1798:        }
        -: 1799:    template <class _A0, class _A1>
        -: 1800:        _LIBCPP_INLINE_VISIBILITY
        -: 1801:        void
        -: 1802:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1803:        {
        -: 1804:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1805:        }
        -: 1806:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1807:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1808:};
        -: 1809:
        -: 1810:template <class _Tp>
        -: 1811:class _LIBCPP_TYPE_VIS_ONLY allocator<const _Tp>
        -: 1812:{
        -: 1813:public:
        -: 1814:    typedef size_t            size_type;
        -: 1815:    typedef ptrdiff_t         difference_type;
        -: 1816:    typedef const _Tp*        pointer;
        -: 1817:    typedef const _Tp*        const_pointer;
        -: 1818:    typedef const _Tp&        reference;
        -: 1819:    typedef const _Tp&        const_reference;
        -: 1820:    typedef const _Tp         value_type;
        -: 1821:
        -: 1822:    typedef true_type propagate_on_container_move_assignment;
        -: 1823:    typedef true_type is_always_equal;
        -: 1824:
        -: 1825:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1826:
        -: 1827:    _LIBCPP_INLINE_VISIBILITY allocator() _NOEXCEPT {}
        -: 1828:    template <class _Up> _LIBCPP_INLINE_VISIBILITY allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1829:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1830:        {return _VSTD::addressof(__x);}
        -: 1831:    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
        -: 1832:        {return static_cast<pointer>(_VSTD::__allocate(__n * sizeof(_Tp)));}
        -: 1833:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT
        -: 1834:        {_VSTD::__deallocate((void*)__p);}
        -: 1835:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
        -: 1836:        {return size_type(~0) / sizeof(_Tp);}
        -: 1837:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1838:    template <class _Up, class... _Args>
        -: 1839:        _LIBCPP_INLINE_VISIBILITY
        -: 1840:        void
        -: 1841:        construct(_Up* __p, _Args&&... __args)
        -: 1842:        {
        -: 1843:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1844:        }
        -: 1845:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1846:        _LIBCPP_INLINE_VISIBILITY
        -: 1847:        void
        -: 1848:        construct(pointer __p)
        -: 1849:        {
        -: 1850:            ::new((void*)__p) _Tp();
        -: 1851:        }
        -: 1852:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1853:
        -: 1854:    template <class _A0>
        -: 1855:        _LIBCPP_INLINE_VISIBILITY
        -: 1856:        void
        -: 1857:        construct(pointer __p, _A0& __a0)
        -: 1858:        {
        -: 1859:            ::new((void*)__p) _Tp(__a0);
        -: 1860:        }
        -: 1861:    template <class _A0>
        -: 1862:        _LIBCPP_INLINE_VISIBILITY
        -: 1863:        void
        -: 1864:        construct(pointer __p, const _A0& __a0)
        -: 1865:        {
        -: 1866:            ::new((void*)__p) _Tp(__a0);
        -: 1867:        }
        -: 1868:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1869:    template <class _A0, class _A1>
        -: 1870:        _LIBCPP_INLINE_VISIBILITY
        -: 1871:        void
        -: 1872:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1873:        {
        -: 1874:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1875:        }
        -: 1876:    template <class _A0, class _A1>
        -: 1877:        _LIBCPP_INLINE_VISIBILITY
        -: 1878:        void
        -: 1879:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1880:        {
        -: 1881:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1882:        }
        -: 1883:    template <class _A0, class _A1>
        -: 1884:        _LIBCPP_INLINE_VISIBILITY
        -: 1885:        void
        -: 1886:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1887:        {
        -: 1888:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1889:        }
        -: 1890:    template <class _A0, class _A1>
        -: 1891:        _LIBCPP_INLINE_VISIBILITY
        -: 1892:        void
        -: 1893:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1894:        {
        -: 1895:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1896:        }
        -: 1897:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1898:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1899:};
        -: 1900:
        -: 1901:template <class _Tp, class _Up>
        -: 1902:inline _LIBCPP_INLINE_VISIBILITY
        -: 1903:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -: 1904:
        -: 1905:template <class _Tp, class _Up>
        -: 1906:inline _LIBCPP_INLINE_VISIBILITY
        -: 1907:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -: 1908:
        -: 1909:template <class _OutputIterator, class _Tp>
        -: 1910:class _LIBCPP_TYPE_VIS_ONLY raw_storage_iterator
        -: 1911:    : public iterator<output_iterator_tag,
        -: 1912:                      _Tp,                                         // purposefully not C++03
        -: 1913:                      ptrdiff_t,                                   // purposefully not C++03
        -: 1914:                      _Tp*,                                        // purposefully not C++03
        -: 1915:                      raw_storage_iterator<_OutputIterator, _Tp>&> // purposefully not C++03
        -: 1916:{
        -: 1917:private:
        -: 1918:    _OutputIterator __x_;
        -: 1919:public:
        -: 1920:    _LIBCPP_INLINE_VISIBILITY explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
        -: 1921:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator*() {return *this;}
        -: 1922:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(const _Tp& __element)
        -: 1923:        {::new(&*__x_) _Tp(__element); return *this;}
        -: 1924:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator++() {++__x_; return *this;}
        -: 1925:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator  operator++(int)
        -: 1926:        {raw_storage_iterator __t(*this); ++__x_; return __t;}
        -: 1927:#if _LIBCPP_STD_VER >= 14
        -: 1928:    _LIBCPP_INLINE_VISIBILITY _OutputIterator base() const { return __x_; } 
        -: 1929:#endif
        -: 1930:};
        -: 1931:
        -: 1932:template <class _Tp>
        -: 1933:pair<_Tp*, ptrdiff_t>
        -: 1934:get_temporary_buffer(ptrdiff_t __n) _NOEXCEPT
        -: 1935:{
        -: 1936:    pair<_Tp*, ptrdiff_t> __r(0, 0);
        -: 1937:    const ptrdiff_t __m = (~ptrdiff_t(0) ^
        -: 1938:                           ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * __CHAR_BIT__ - 1)))
        -: 1939:                           / sizeof(_Tp);
        -: 1940:    if (__n > __m)
        -: 1941:        __n = __m;
        -: 1942:    while (__n > 0)
        -: 1943:    {
        -: 1944:        __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
        -: 1945:        if (__r.first)
        -: 1946:        {
        -: 1947:            __r.second = __n;
        -: 1948:            break;
        -: 1949:        }
        -: 1950:        __n /= 2;
        -: 1951:    }
        -: 1952:    return __r;
        -: 1953:}
        -: 1954:
        -: 1955:template <class _Tp>
        -: 1956:inline _LIBCPP_INLINE_VISIBILITY
        -: 1957:void return_temporary_buffer(_Tp* __p) _NOEXCEPT {::operator delete(__p);}
        -: 1958:
        -: 1959:template <class _Tp>
        -: 1960:struct auto_ptr_ref
        -: 1961:{
        -: 1962:    _Tp* __ptr_;
        -: 1963:};
        -: 1964:
        -: 1965:template<class _Tp>
        -: 1966:class _LIBCPP_TYPE_VIS_ONLY auto_ptr
        -: 1967:{
        -: 1968:private:
        -: 1969:    _Tp* __ptr_;
        -: 1970:public:
        -: 1971:    typedef _Tp element_type;
        -: 1972:
        -: 1973:    _LIBCPP_INLINE_VISIBILITY explicit auto_ptr(_Tp* __p = 0) throw() : __ptr_(__p) {}
        -: 1974:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr& __p) throw() : __ptr_(__p.release()) {}
        -: 1975:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr<_Up>& __p) throw()
        -: 1976:        : __ptr_(__p.release()) {}
        -: 1977:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr& __p) throw()
        -: 1978:        {reset(__p.release()); return *this;}
        -: 1979:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr<_Up>& __p) throw()
        -: 1980:        {reset(__p.release()); return *this;}
        -: 1981:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr_ref<_Tp> __p) throw()
        -: 1982:        {reset(__p.__ptr_); return *this;}
        -: 1983:    _LIBCPP_INLINE_VISIBILITY ~auto_ptr() throw() {delete __ptr_;}
        -: 1984:
        -: 1985:    _LIBCPP_INLINE_VISIBILITY _Tp& operator*() const throw()
        -: 1986:        {return *__ptr_;}
        -: 1987:    _LIBCPP_INLINE_VISIBILITY _Tp* operator->() const throw() {return __ptr_;}
        -: 1988:    _LIBCPP_INLINE_VISIBILITY _Tp* get() const throw() {return __ptr_;}
        -: 1989:    _LIBCPP_INLINE_VISIBILITY _Tp* release() throw()
        -: 1990:    {
        -: 1991:        _Tp* __t = __ptr_;
        -: 1992:        __ptr_ = 0;
        -: 1993:        return __t;
        -: 1994:    }
        -: 1995:    _LIBCPP_INLINE_VISIBILITY void reset(_Tp* __p = 0) throw()
        -: 1996:    {
        -: 1997:        if (__ptr_ != __p)
        -: 1998:            delete __ptr_;
        -: 1999:        __ptr_ = __p;
        -: 2000:    }
        -: 2001:
        -: 2002:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr_ref<_Tp> __p) throw() : __ptr_(__p.__ptr_) {}
        -: 2003:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr_ref<_Up>() throw()
        -: 2004:        {auto_ptr_ref<_Up> __t; __t.__ptr_ = release(); return __t;}
        -: 2005:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr<_Up>() throw()
        -: 2006:        {return auto_ptr<_Up>(release());}
        -: 2007:};
        -: 2008:
        -: 2009:template <>
        -: 2010:class _LIBCPP_TYPE_VIS_ONLY auto_ptr<void>
        -: 2011:{
        -: 2012:public:
        -: 2013:    typedef void element_type;
        -: 2014:};
        -: 2015:
        -: 2016:template <class _T1, class _T2, bool = is_same<typename remove_cv<_T1>::type,
        -: 2017:                                                     typename remove_cv<_T2>::type>::value,
        -: 2018:                                bool = is_empty<_T1>::value
        -: 2019:                                       && !__libcpp_is_final<_T1>::value,
        -: 2020:                                bool = is_empty<_T2>::value
        -: 2021:                                       && !__libcpp_is_final<_T2>::value
        -: 2022:         >
        -: 2023:struct __libcpp_compressed_pair_switch;
        -: 2024:
        -: 2025:template <class _T1, class _T2, bool IsSame>
        -: 2026:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, false, false> {enum {value = 0};};
        -: 2027:
        -: 2028:template <class _T1, class _T2, bool IsSame>
        -: 2029:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, true, false>  {enum {value = 1};};
        -: 2030:
        -: 2031:template <class _T1, class _T2, bool IsSame>
        -: 2032:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, false, true>  {enum {value = 2};};
        -: 2033:
        -: 2034:template <class _T1, class _T2>
        -: 2035:struct __libcpp_compressed_pair_switch<_T1, _T2, false, true, true>    {enum {value = 3};};
        -: 2036:
        -: 2037:template <class _T1, class _T2>
        -: 2038:struct __libcpp_compressed_pair_switch<_T1, _T2, true, true, true>     {enum {value = 1};};
        -: 2039:
        -: 2040:template <class _T1, class _T2, unsigned = __libcpp_compressed_pair_switch<_T1, _T2>::value>
        -: 2041:class __libcpp_compressed_pair_imp;
        -: 2042:
        -: 2043:template <class _T1, class _T2>
        -: 2044:class __libcpp_compressed_pair_imp<_T1, _T2, 0>
        -: 2045:{
        -: 2046:private:
        -: 2047:    _T1 __first_;
        -: 2048:    _T2 __second_;
        -: 2049:public:
        -: 2050:    typedef _T1 _T1_param;
        -: 2051:    typedef _T2 _T2_param;
        -: 2052:
        -: 2053:    typedef typename remove_reference<_T1>::type& _T1_reference;
        -: 2054:    typedef typename remove_reference<_T2>::type& _T2_reference;
        -: 2055:
        -: 2056:    typedef const typename remove_reference<_T1>::type& _T1_const_reference;
        -: 2057:    typedef const typename remove_reference<_T2>::type& _T2_const_reference;
        -: 2058:
        -: 2059:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __first_(), __second_() {}
        -: 2060:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2061:        : __first_(_VSTD::forward<_T1_param>(__t1)), __second_() {}
        -: 2062:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2063:        : __first_(), __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2064:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2065:        : __first_(_VSTD::forward<_T1_param>(__t1)), __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2066:
        -: 2067:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2068:
        -: 2069:    _LIBCPP_INLINE_VISIBILITY
        -: 2070:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2071:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2072:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2073:        : __first_(__p.first()),
        -: 2074:          __second_(__p.second()) {}
        -: 2075:
        -: 2076:    _LIBCPP_INLINE_VISIBILITY
        -: 2077:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2078:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2079:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2080:        {
        -: 2081:            __first_ = __p.first();
        -: 2082:            __second_ = __p.second();
        -: 2083:            return *this;
        -: 2084:        }
        -: 2085:
        -: 2086:    _LIBCPP_INLINE_VISIBILITY
        -: 2087:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2088:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2089:                   is_nothrow_move_constructible<_T2>::value)
        -: 2090:        : __first_(_VSTD::forward<_T1>(__p.first())),
        -: 2091:          __second_(_VSTD::forward<_T2>(__p.second())) {}
        -: 2092:
        -: 2093:    _LIBCPP_INLINE_VISIBILITY
        -: 2094:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2095:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2096:                   is_nothrow_move_assignable<_T2>::value)
        -: 2097:        {
        -: 2098:            __first_ = _VSTD::forward<_T1>(__p.first());
        -: 2099:            __second_ = _VSTD::forward<_T2>(__p.second());
        -: 2100:            return *this;
        -: 2101:        }
        -: 2102:
        -: 2103:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2104:
        -: 2105:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2106:
        -: 2107:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2108:        _LIBCPP_INLINE_VISIBILITY
        -: 2109:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2110:                                     tuple<_Args1...> __first_args,
        -: 2111:                                     tuple<_Args2...> __second_args,
        -: 2112:                                     __tuple_indices<_I1...>,
        -: 2113:                                     __tuple_indices<_I2...>)
        -: 2114:            : __first_(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2115:              __second_(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2116:            {}
        -: 2117:
        -: 2118:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2119:
        -: 2120:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return __first_;}
        -: 2121:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return __first_;}
        -: 2122:
        -: 2123:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return __second_;}
        -: 2124:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return __second_;}
        -: 2125:
        -: 2126:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2127:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2128:                   __is_nothrow_swappable<_T2>::value)
        -: 2129:    {
        -: 2130:        using _VSTD::swap;
        -: 2131:        swap(__first_, __x.__first_);
        -: 2132:        swap(__second_, __x.__second_);
        -: 2133:    }
        -: 2134:};
        -: 2135:
        -: 2136:template <class _T1, class _T2>
        -: 2137:class __libcpp_compressed_pair_imp<_T1, _T2, 1>
        -: 2138:    : private _T1
        -: 2139:{
        -: 2140:private:
        -: 2141:    _T2 __second_;
        -: 2142:public:
        -: 2143:    typedef _T1 _T1_param;
        -: 2144:    typedef _T2 _T2_param;
        -: 2145:
        -: 2146:    typedef _T1&                                        _T1_reference;
        -: 2147:    typedef typename remove_reference<_T2>::type& _T2_reference;
        -: 2148:
        -: 2149:    typedef const _T1&                                        _T1_const_reference;
        -: 2150:    typedef const typename remove_reference<_T2>::type& _T2_const_reference;
        -: 2151:
        -: 2152:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __second_() {}
        -: 2153:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2154:        : _T1(_VSTD::forward<_T1_param>(__t1)), __second_() {}
        -: 2155:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2156:        : __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2157:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2158:        : _T1(_VSTD::forward<_T1_param>(__t1)), __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2159:
        -: 2160:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2161:
        -: 2162:    _LIBCPP_INLINE_VISIBILITY
        -: 2163:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2164:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2165:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2166:        : _T1(__p.first()), __second_(__p.second()) {}
        -: 2167:
        -: 2168:    _LIBCPP_INLINE_VISIBILITY
        -: 2169:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2170:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2171:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2172:        {
        -: 2173:            _T1::operator=(__p.first());
        -: 2174:            __second_ = __p.second();
        -: 2175:            return *this;
        -: 2176:        }
        -: 2177:
        -: 2178:    _LIBCPP_INLINE_VISIBILITY
        -: 2179:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2180:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2181:                   is_nothrow_move_constructible<_T2>::value)
        -: 2182:        : _T1(_VSTD::move(__p.first())), __second_(_VSTD::forward<_T2>(__p.second())) {}
        -: 2183:
        -: 2184:    _LIBCPP_INLINE_VISIBILITY
        -: 2185:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2186:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2187:                   is_nothrow_move_assignable<_T2>::value)
        -: 2188:        {
        -: 2189:            _T1::operator=(_VSTD::move(__p.first()));
        -: 2190:            __second_ = _VSTD::forward<_T2>(__p.second());
        -: 2191:            return *this;
        -: 2192:        }
        -: 2193:
        -: 2194:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2195:
        -: 2196:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2197:
        -: 2198:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2199:        _LIBCPP_INLINE_VISIBILITY
        -: 2200:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2201:                                     tuple<_Args1...> __first_args,
        -: 2202:                                     tuple<_Args2...> __second_args,
        -: 2203:                                     __tuple_indices<_I1...>,
        -: 2204:                                     __tuple_indices<_I2...>)
        -: 2205:            : _T1(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2206:              __second_(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2207:            {}
        -: 2208:
        -: 2209:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2210:
        -: 2211:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return *this;}
        -: 2212:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return *this;}
        -: 2213:
        -: 2214:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return __second_;}
        -: 2215:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return __second_;}
        -: 2216:
        -: 2217:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2218:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2219:                   __is_nothrow_swappable<_T2>::value)
        -: 2220:    {
        -: 2221:        using _VSTD::swap;
        -: 2222:        swap(__second_, __x.__second_);
        -: 2223:    }
        -: 2224:};
        -: 2225:
        -: 2226:template <class _T1, class _T2>
        -: 2227:class __libcpp_compressed_pair_imp<_T1, _T2, 2>
        -: 2228:    : private _T2
        -: 2229:{
        -: 2230:private:
        -: 2231:    _T1 __first_;
        -: 2232:public:
        -: 2233:    typedef _T1 _T1_param;
        -: 2234:    typedef _T2 _T2_param;
        -: 2235:
        -: 2236:    typedef typename remove_reference<_T1>::type& _T1_reference;
        -: 2237:    typedef _T2&                                        _T2_reference;
        -: 2238:
        -: 2239:    typedef const typename remove_reference<_T1>::type& _T1_const_reference;
        -: 2240:    typedef const _T2&                                        _T2_const_reference;
        -: 2241:
        8: 2242:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() : __first_() {}
        -: 2243:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2244:        : __first_(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2245:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2246:        : _T2(_VSTD::forward<_T2_param>(__t2)), __first_() {}
        -: 2247:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2248:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2249:                   is_nothrow_move_constructible<_T2>::value)
        -: 2250:        : _T2(_VSTD::forward<_T2_param>(__t2)), __first_(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2251:
        -: 2252:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2253:
        -: 2254:    _LIBCPP_INLINE_VISIBILITY
        -: 2255:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2256:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2257:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2258:        : _T2(__p.second()), __first_(__p.first()) {}
        -: 2259:
        -: 2260:    _LIBCPP_INLINE_VISIBILITY
        -: 2261:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2262:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2263:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2264:        {
        -: 2265:            _T2::operator=(__p.second());
        -: 2266:            __first_ = __p.first();
        -: 2267:            return *this;
        -: 2268:        }
        -: 2269:
        -: 2270:    _LIBCPP_INLINE_VISIBILITY
        -: 2271:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2272:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2273:                   is_nothrow_move_constructible<_T2>::value)
        -: 2274:        : _T2(_VSTD::forward<_T2>(__p.second())), __first_(_VSTD::move(__p.first())) {}
        -: 2275:
        -: 2276:    _LIBCPP_INLINE_VISIBILITY
        -: 2277:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2278:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2279:                   is_nothrow_move_assignable<_T2>::value)
        -: 2280:        {
        -: 2281:            _T2::operator=(_VSTD::forward<_T2>(__p.second()));
        -: 2282:            __first_ = _VSTD::move(__p.first());
        -: 2283:            return *this;
        -: 2284:        }
        -: 2285:
        -: 2286:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2287:
        -: 2288:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2289:
        -: 2290:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2291:        _LIBCPP_INLINE_VISIBILITY
        -: 2292:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2293:                                     tuple<_Args1...> __first_args,
        -: 2294:                                     tuple<_Args2...> __second_args,
        -: 2295:                                     __tuple_indices<_I1...>,
        -: 2296:                                     __tuple_indices<_I2...>)
        -: 2297:            : _T2(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...),
        -: 2298:              __first_(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...)
        -: 2299:              
        -: 2300:            {}
        -: 2301:
        -: 2302:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2303:
        4: 2304:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return __first_;}
        -: 2305:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return __first_;}
        -: 2306:
        -: 2307:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return *this;}
        -: 2308:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return *this;}
        -: 2309:
        -: 2310:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2311:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2312:                   __is_nothrow_swappable<_T2>::value)
        -: 2313:    {
        -: 2314:        using _VSTD::swap;
        -: 2315:        swap(__first_, __x.__first_);
        -: 2316:    }
        -: 2317:};
        -: 2318:
        -: 2319:template <class _T1, class _T2>
        -: 2320:class __libcpp_compressed_pair_imp<_T1, _T2, 3>
        -: 2321:    : private _T1,
        -: 2322:      private _T2
        -: 2323:{
        -: 2324:public:
        -: 2325:    typedef _T1 _T1_param;
        -: 2326:    typedef _T2 _T2_param;
        -: 2327:
        -: 2328:    typedef _T1& _T1_reference;
        -: 2329:    typedef _T2& _T2_reference;
        -: 2330:
        -: 2331:    typedef const _T1& _T1_const_reference;
        -: 2332:    typedef const _T2& _T2_const_reference;
        -: 2333:
        -: 2334:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() {}
        -: 2335:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2336:        : _T1(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2337:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2338:        : _T2(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2339:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2340:        : _T1(_VSTD::forward<_T1_param>(__t1)), _T2(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2341:
        -: 2342:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2343:
        -: 2344:    _LIBCPP_INLINE_VISIBILITY
        -: 2345:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2346:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2347:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2348:        : _T1(__p.first()), _T2(__p.second()) {}
        -: 2349:
        -: 2350:    _LIBCPP_INLINE_VISIBILITY
        -: 2351:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2352:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2353:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2354:        {
        -: 2355:            _T1::operator=(__p.first());
        -: 2356:            _T2::operator=(__p.second());
        -: 2357:            return *this;
        -: 2358:        }
        -: 2359:
        -: 2360:    _LIBCPP_INLINE_VISIBILITY
        -: 2361:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2362:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2363:                   is_nothrow_move_constructible<_T2>::value)
        -: 2364:        : _T1(_VSTD::move(__p.first())), _T2(_VSTD::move(__p.second())) {}
        -: 2365:
        -: 2366:    _LIBCPP_INLINE_VISIBILITY
        -: 2367:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2368:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2369:                   is_nothrow_move_assignable<_T2>::value)
        -: 2370:        {
        -: 2371:            _T1::operator=(_VSTD::move(__p.first()));
        -: 2372:            _T2::operator=(_VSTD::move(__p.second()));
        -: 2373:            return *this;
        -: 2374:        }
        -: 2375:
        -: 2376:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2377:
        -: 2378:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2379:
        -: 2380:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2381:        _LIBCPP_INLINE_VISIBILITY
        -: 2382:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2383:                                     tuple<_Args1...> __first_args,
        -: 2384:                                     tuple<_Args2...> __second_args,
        -: 2385:                                     __tuple_indices<_I1...>,
        -: 2386:                                     __tuple_indices<_I2...>)
        -: 2387:            : _T1(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2388:              _T2(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2389:            {}
        -: 2390:
        -: 2391:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2392:
        -: 2393:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return *this;}
        -: 2394:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return *this;}
        -: 2395:
        -: 2396:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return *this;}
        -: 2397:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return *this;}
        -: 2398:
        -: 2399:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp&)
        -: 2400:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2401:                   __is_nothrow_swappable<_T2>::value)
        -: 2402:    {
        -: 2403:    }
        -: 2404:};
        -: 2405:
        -: 2406:template <class _T1, class _T2>
        -: 2407:class __compressed_pair
        -: 2408:    : private __libcpp_compressed_pair_imp<_T1, _T2>
        -: 2409:{
        -: 2410:    typedef __libcpp_compressed_pair_imp<_T1, _T2> base;
        -: 2411:public:
        -: 2412:    typedef typename base::_T1_param _T1_param;
        -: 2413:    typedef typename base::_T2_param _T2_param;
        -: 2414:
        -: 2415:    typedef typename base::_T1_reference _T1_reference;
        -: 2416:    typedef typename base::_T2_reference _T2_reference;
        -: 2417:
        -: 2418:    typedef typename base::_T1_const_reference _T1_const_reference;
        -: 2419:    typedef typename base::_T2_const_reference _T2_const_reference;
        -: 2420:
       16: 2421:    _LIBCPP_INLINE_VISIBILITY __compressed_pair() {}
        -: 2422:    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T1_param __t1)
        -: 2423:        : base(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2424:    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T2_param __t2)
        -: 2425:        : base(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2426:    _LIBCPP_INLINE_VISIBILITY __compressed_pair(_T1_param __t1, _T2_param __t2)
        -: 2427:        : base(_VSTD::forward<_T1_param>(__t1), _VSTD::forward<_T2_param>(__t2)) {}
        -: 2428:
        -: 2429:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2430:
        -: 2431:    _LIBCPP_INLINE_VISIBILITY
        -: 2432:    __compressed_pair(const __compressed_pair& __p)
        -: 2433:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2434:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2435:        : base(__p) {}
        -: 2436:
        -: 2437:    _LIBCPP_INLINE_VISIBILITY
        -: 2438:    __compressed_pair& operator=(const __compressed_pair& __p)
        -: 2439:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2440:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2441:        {
        -: 2442:            base::operator=(__p);
        -: 2443:            return *this;
        -: 2444:        }
        -: 2445:
        -: 2446:    _LIBCPP_INLINE_VISIBILITY
        -: 2447:    __compressed_pair(__compressed_pair&& __p)
        -: 2448:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2449:                   is_nothrow_move_constructible<_T2>::value)
        -: 2450:        : base(_VSTD::move(__p)) {}
        -: 2451:
        -: 2452:    _LIBCPP_INLINE_VISIBILITY
        -: 2453:    __compressed_pair& operator=(__compressed_pair&& __p)
        -: 2454:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2455:                   is_nothrow_move_assignable<_T2>::value)
        -: 2456:        {
        -: 2457:            base::operator=(_VSTD::move(__p));
        -: 2458:            return *this;
        -: 2459:        }
        -: 2460:
        -: 2461:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2462:
        -: 2463:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2464:
        -: 2465:    template <class... _Args1, class... _Args2>
        -: 2466:        _LIBCPP_INLINE_VISIBILITY
        -: 2467:        __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,
        -: 2468:                                                      tuple<_Args2...> __second_args)
        -: 2469:            : base(__pc, _VSTD::move(__first_args), _VSTD::move(__second_args),
        -: 2470:                   typename __make_tuple_indices<sizeof...(_Args1)>::type(),
        -: 2471:                   typename __make_tuple_indices<sizeof...(_Args2) >::type())
        -: 2472:            {}
        -: 2473:
        -: 2474:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2475:
        4: 2476:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return base::first();}
        -: 2477:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return base::first();}
        -: 2478:
        -: 2479:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return base::second();}
        -: 2480:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return base::second();}
        -: 2481:
        -: 2482:    _LIBCPP_INLINE_VISIBILITY void swap(__compressed_pair& __x)
        -: 2483:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2484:                   __is_nothrow_swappable<_T2>::value)
        -: 2485:        {base::swap(__x);}
        -: 2486:};
        -: 2487:
        -: 2488:template <class _T1, class _T2>
        -: 2489:inline _LIBCPP_INLINE_VISIBILITY
        -: 2490:void
        -: 2491:swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
        -: 2492:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2493:                   __is_nothrow_swappable<_T2>::value)
        -: 2494:    {__x.swap(__y);}
        -: 2495:
        -: 2496:// __same_or_less_cv_qualified
        -: 2497:
        -: 2498:template <class _Ptr1, class _Ptr2,
        -: 2499:          bool = is_same<typename remove_cv<typename pointer_traits<_Ptr1>::element_type>::type,
        -: 2500:                         typename remove_cv<typename pointer_traits<_Ptr2>::element_type>::type
        -: 2501:                        >::value
        -: 2502:         >
        -: 2503:struct __same_or_less_cv_qualified_imp
        -: 2504:    : is_convertible<_Ptr1, _Ptr2> {};
        -: 2505:
        -: 2506:template <class _Ptr1, class _Ptr2>
        -: 2507:struct __same_or_less_cv_qualified_imp<_Ptr1, _Ptr2, false>
        -: 2508:    : false_type {};
        -: 2509:
        -: 2510:template <class _Ptr1, class _Ptr2, bool = is_pointer<_Ptr1>::value ||
        -: 2511:                                           is_same<_Ptr1, _Ptr2>::value ||
        -: 2512:                                           __has_element_type<_Ptr1>::value>
        -: 2513:struct __same_or_less_cv_qualified
        -: 2514:    : __same_or_less_cv_qualified_imp<_Ptr1, _Ptr2> {};
        -: 2515:
        -: 2516:template <class _Ptr1, class _Ptr2>
        -: 2517:struct __same_or_less_cv_qualified<_Ptr1, _Ptr2, false>
        -: 2518:    : false_type {};
        -: 2519:
        -: 2520:// default_delete
        -: 2521:
        -: 2522:template <class _Tp>
        -: 2523:struct _LIBCPP_TYPE_VIS_ONLY default_delete
        -: 2524:{
        -: 2525:#ifndef _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS
        -: 2526:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT = default;
        -: 2527:#else
        -: 2528:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT {}
        -: 2529:#endif
        -: 2530:    template <class _Up>
        -: 2531:        _LIBCPP_INLINE_VISIBILITY default_delete(const default_delete<_Up>&,
        -: 2532:             typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* = 0) _NOEXCEPT {}
        -: 2533:    _LIBCPP_INLINE_VISIBILITY void operator() (_Tp* __ptr) const _NOEXCEPT
        -: 2534:        {
        -: 2535:            static_assert(sizeof(_Tp) > 0, "default_delete can not delete incomplete type");
        -: 2536:            static_assert(!is_void<_Tp>::value, "default_delete can not delete incomplete type");
        -: 2537:            delete __ptr;
        -: 2538:        }
        -: 2539:};
        -: 2540:
        -: 2541:template <class _Tp>
        -: 2542:struct _LIBCPP_TYPE_VIS_ONLY default_delete<_Tp[]>
        -: 2543:{
        -: 2544:public:
        -: 2545:#ifndef _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS
        -: 2546:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT = default;
        -: 2547:#else
        -: 2548:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT {}
        -: 2549:#endif
        -: 2550:    template <class _Up>
        -: 2551:        _LIBCPP_INLINE_VISIBILITY default_delete(const default_delete<_Up[]>&,
        -: 2552:             typename enable_if<__same_or_less_cv_qualified<_Up*, _Tp*>::value>::type* = 0) _NOEXCEPT {}
        -: 2553:    template <class _Up>
        -: 2554:        _LIBCPP_INLINE_VISIBILITY
        -: 2555:        void operator() (_Up* __ptr,
        -: 2556:                         typename enable_if<__same_or_less_cv_qualified<_Up*, _Tp*>::value>::type* = 0) const _NOEXCEPT
        -: 2557:        {
        -: 2558:            static_assert(sizeof(_Tp) > 0, "default_delete can not delete incomplete type");
        -: 2559:            static_assert(!is_void<_Tp>::value, "default_delete can not delete incomplete type");
        -: 2560:            delete [] __ptr;
        -: 2561:        }
        -: 2562:};
        -: 2563:
        -: 2564:template <class _Tp, class _Dp = default_delete<_Tp> >
        -: 2565:class _LIBCPP_TYPE_VIS_ONLY unique_ptr
        -: 2566:{
        -: 2567:public:
        -: 2568:    typedef _Tp element_type;
        -: 2569:    typedef _Dp deleter_type;
        -: 2570:    typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2571:private:
        -: 2572:    __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2573:
        -: 2574:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2575:    unique_ptr(unique_ptr&);
        -: 2576:    template <class _Up, class _Ep>
        -: 2577:        unique_ptr(unique_ptr<_Up, _Ep>&);
        -: 2578:    unique_ptr& operator=(unique_ptr&);
        -: 2579:    template <class _Up, class _Ep>
        -: 2580:        unique_ptr& operator=(unique_ptr<_Up, _Ep>&);
        -: 2581:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2582:
        -: 2583:    struct __nat {int __for_bool_;};
        -: 2584:
        -: 2585:    typedef       typename remove_reference<deleter_type>::type& _Dp_reference;
        -: 2586:    typedef const typename remove_reference<deleter_type>::type& _Dp_const_reference;
        -: 2587:public:
        -: 2588:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT
        -: 2589:        : __ptr_(pointer())
        -: 2590:        {
        -: 2591:            static_assert(!is_pointer<deleter_type>::value,
        -: 2592:                "unique_ptr constructed with null function pointer deleter");
        -: 2593:        }
        -: 2594:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT
        -: 2595:        : __ptr_(pointer())
        -: 2596:        {
        -: 2597:            static_assert(!is_pointer<deleter_type>::value,
        -: 2598:                "unique_ptr constructed with null function pointer deleter");
        -: 2599:        }
        -: 2600:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(pointer __p) _NOEXCEPT
        -: 2601:        : __ptr_(_VSTD::move(__p))
        -: 2602:        {
        -: 2603:            static_assert(!is_pointer<deleter_type>::value,
        -: 2604:                "unique_ptr constructed with null function pointer deleter");
        -: 2605:        }
        -: 2606:
        -: 2607:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2608:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, typename conditional<
        -: 2609:                                        is_reference<deleter_type>::value,
        -: 2610:                                        deleter_type,
        -: 2611:                                        typename add_lvalue_reference<const deleter_type>::type>::type __d)
        -: 2612:             _NOEXCEPT
        -: 2613:        : __ptr_(__p, __d) {}
        -: 2614:
        -: 2615:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, typename remove_reference<deleter_type>::type&& __d)
        -: 2616:             _NOEXCEPT
        -: 2617:        : __ptr_(__p, _VSTD::move(__d))
        -: 2618:        {
        -: 2619:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2620:        }
        -: 2621:    _LIBCPP_INLINE_VISIBILITY unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2622:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2623:    template <class _Up, class _Ep>
        -: 2624:        _LIBCPP_INLINE_VISIBILITY
        -: 2625:        unique_ptr(unique_ptr<_Up, _Ep>&& __u,
        -: 2626:                   typename enable_if
        -: 2627:                      <
        -: 2628:                        !is_array<_Up>::value &&
        -: 2629:                         is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2630:                         is_convertible<_Ep, deleter_type>::value &&
        -: 2631:                         (
        -: 2632:                            !is_reference<deleter_type>::value ||
        -: 2633:                            is_same<deleter_type, _Ep>::value
        -: 2634:                         ),
        -: 2635:                         __nat
        -: 2636:                      >::type = __nat()) _NOEXCEPT
        -: 2637:            : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}
        -: 2638:
        -: 2639:    template <class _Up>
        -: 2640:        _LIBCPP_INLINE_VISIBILITY unique_ptr(auto_ptr<_Up>&& __p,
        -: 2641:                typename enable_if<
        -: 2642:                                      is_convertible<_Up*, _Tp*>::value &&
        -: 2643:                                      is_same<_Dp, default_delete<_Tp> >::value,
        -: 2644:                                      __nat
        -: 2645:                                  >::type = __nat()) _NOEXCEPT
        -: 2646:            : __ptr_(__p.release())
        -: 2647:            {
        -: 2648:            }
        -: 2649:
        -: 2650:        _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT
        -: 2651:            {
        -: 2652:                reset(__u.release());
        -: 2653:                __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2654:                return *this;
        -: 2655:            }
        -: 2656:
        -: 2657:        template <class _Up, class _Ep>
        -: 2658:            _LIBCPP_INLINE_VISIBILITY
        -: 2659:            typename enable_if
        -: 2660:            <
        -: 2661:                !is_array<_Up>::value &&
        -: 2662:                is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2663:                is_assignable<deleter_type&, _Ep&&>::value,
        -: 2664:                unique_ptr&
        -: 2665:            >::type
        -: 2666:            operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2667:            {
        -: 2668:                reset(__u.release());
        -: 2669:                __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2670:                return *this;
        -: 2671:            }
        -: 2672:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2673:
        -: 2674:    _LIBCPP_INLINE_VISIBILITY operator __rv<unique_ptr>()
        -: 2675:    {
        -: 2676:        return __rv<unique_ptr>(*this);
        -: 2677:    }
        -: 2678:
        -: 2679:    _LIBCPP_INLINE_VISIBILITY unique_ptr(__rv<unique_ptr> __u)
        -: 2680:        : __ptr_(__u->release(), _VSTD::forward<deleter_type>(__u->get_deleter())) {}
        -: 2681:
        -: 2682:    template <class _Up, class _Ep>
        -: 2683:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr<_Up, _Ep> __u)
        -: 2684:    {
        -: 2685:        reset(__u.release());
        -: 2686:        __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2687:        return *this;
        -: 2688:    }
        -: 2689:
        -: 2690:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, deleter_type __d)
        -: 2691:        : __ptr_(_VSTD::move(__p), _VSTD::move(__d)) {}
        -: 2692:
        -: 2693:    template <class _Up>
        -: 2694:        _LIBCPP_INLINE_VISIBILITY
        -: 2695:                typename enable_if<
        -: 2696:                                      is_convertible<_Up*, _Tp*>::value &&
        -: 2697:                                      is_same<_Dp, default_delete<_Tp> >::value,
        -: 2698:                                      unique_ptr&
        -: 2699:                                  >::type
        -: 2700:        operator=(auto_ptr<_Up> __p)
        -: 2701:            {reset(__p.release()); return *this;}
        -: 2702:
        -: 2703:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2704:    _LIBCPP_INLINE_VISIBILITY ~unique_ptr() {reset();}
        -: 2705:
        -: 2706:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(nullptr_t) _NOEXCEPT
        -: 2707:    {
        -: 2708:        reset();
        -: 2709:        return *this;
        -: 2710:    }
        -: 2711:
        -: 2712:    _LIBCPP_INLINE_VISIBILITY typename add_lvalue_reference<_Tp>::type operator*() const
        -: 2713:        {return *__ptr_.first();}
        -: 2714:    _LIBCPP_INLINE_VISIBILITY pointer operator->() const _NOEXCEPT {return __ptr_.first();}
        -: 2715:    _LIBCPP_INLINE_VISIBILITY pointer get() const _NOEXCEPT {return __ptr_.first();}
        -: 2716:    _LIBCPP_INLINE_VISIBILITY       _Dp_reference get_deleter() _NOEXCEPT
        -: 2717:        {return __ptr_.second();}
        -: 2718:    _LIBCPP_INLINE_VISIBILITY _Dp_const_reference get_deleter() const _NOEXCEPT
        -: 2719:        {return __ptr_.second();}
        -: 2720:    _LIBCPP_INLINE_VISIBILITY
        -: 2721:        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT
        -: 2722:        {return __ptr_.first() != nullptr;}
        -: 2723:
        -: 2724:    _LIBCPP_INLINE_VISIBILITY pointer release() _NOEXCEPT
        -: 2725:    {
        -: 2726:        pointer __t = __ptr_.first();
        -: 2727:        __ptr_.first() = pointer();
        -: 2728:        return __t;
        -: 2729:    }
        -: 2730:
        -: 2731:    _LIBCPP_INLINE_VISIBILITY void reset(pointer __p = pointer()) _NOEXCEPT
        -: 2732:    {
        -: 2733:        pointer __tmp = __ptr_.first();
        -: 2734:        __ptr_.first() = __p;
        -: 2735:        if (__tmp)
        -: 2736:            __ptr_.second()(__tmp);
        -: 2737:    }
        -: 2738:
        -: 2739:    _LIBCPP_INLINE_VISIBILITY void swap(unique_ptr& __u) _NOEXCEPT
        -: 2740:        {__ptr_.swap(__u.__ptr_);}
        -: 2741:};
        -: 2742:
        -: 2743:template <class _Tp, class _Dp>
        -: 2744:class _LIBCPP_TYPE_VIS_ONLY unique_ptr<_Tp[], _Dp>
        -: 2745:{
        -: 2746:public:
        -: 2747:    typedef _Tp element_type;
        -: 2748:    typedef _Dp deleter_type;
        -: 2749:    typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2750:private:
        -: 2751:    __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2752:
        -: 2753:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2754:    unique_ptr(unique_ptr&);
        -: 2755:    template <class _Up>
        -: 2756:        unique_ptr(unique_ptr<_Up>&);
        -: 2757:    unique_ptr& operator=(unique_ptr&);
        -: 2758:    template <class _Up>
        -: 2759:        unique_ptr& operator=(unique_ptr<_Up>&);
        -: 2760:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2761:
        -: 2762:    struct __nat {int __for_bool_;};
        -: 2763:
        -: 2764:    typedef       typename remove_reference<deleter_type>::type& _Dp_reference;
        -: 2765:    typedef const typename remove_reference<deleter_type>::type& _Dp_const_reference;
        -: 2766:public:
        -: 2767:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT
        -: 2768:        : __ptr_(pointer())
        -: 2769:        {
        -: 2770:            static_assert(!is_pointer<deleter_type>::value,
        -: 2771:                "unique_ptr constructed with null function pointer deleter");
        -: 2772:        }
        -: 2773:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT
        -: 2774:        : __ptr_(pointer())
        -: 2775:        {
        -: 2776:            static_assert(!is_pointer<deleter_type>::value,
        -: 2777:                "unique_ptr constructed with null function pointer deleter");
        -: 2778:        }
        -: 2779:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2780:    template <class _Pp>
        -: 2781:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(_Pp __p,
        -: 2782:            typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat()) _NOEXCEPT
        -: 2783:        : __ptr_(__p)
        -: 2784:        {
        -: 2785:            static_assert(!is_pointer<deleter_type>::value,
        -: 2786:                "unique_ptr constructed with null function pointer deleter");
        -: 2787:        }
        -: 2788:
        -: 2789:    template <class _Pp>
        -: 2790:    _LIBCPP_INLINE_VISIBILITY unique_ptr(_Pp __p, typename conditional<
        -: 2791:                                       is_reference<deleter_type>::value,
        -: 2792:                                       deleter_type,
        -: 2793:                                       typename add_lvalue_reference<const deleter_type>::type>::type __d,
        -: 2794:                                       typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat())
        -: 2795:             _NOEXCEPT
        -: 2796:        : __ptr_(__p, __d) {}
        -: 2797:
        -: 2798:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, typename conditional<
        -: 2799:                                       is_reference<deleter_type>::value,
        -: 2800:                                       deleter_type,
        -: 2801:                                       typename add_lvalue_reference<const deleter_type>::type>::type __d)
        -: 2802:             _NOEXCEPT
        -: 2803:        : __ptr_(pointer(), __d) {}
        -: 2804:
        -: 2805:    template <class _Pp>
        -: 2806:    _LIBCPP_INLINE_VISIBILITY unique_ptr(_Pp __p,
        -: 2807:                                         typename remove_reference<deleter_type>::type&& __d,
        -: 2808:                                         typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat())
        -: 2809:             _NOEXCEPT
        -: 2810:        : __ptr_(__p, _VSTD::move(__d))
        -: 2811:        {
        -: 2812:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2813:        }
        -: 2814:
        -: 2815:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, typename remove_reference<deleter_type>::type&& __d)
        -: 2816:             _NOEXCEPT
        -: 2817:        : __ptr_(pointer(), _VSTD::move(__d))
        -: 2818:        {
        -: 2819:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2820:        }
        -: 2821:
        -: 2822:    _LIBCPP_INLINE_VISIBILITY unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2823:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2824:
        -: 2825:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT
        -: 2826:        {
        -: 2827:            reset(__u.release());
        -: 2828:            __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2829:            return *this;
        -: 2830:        }
        -: 2831:
        -: 2832:    template <class _Up, class _Ep>
        -: 2833:        _LIBCPP_INLINE_VISIBILITY
        -: 2834:        unique_ptr(unique_ptr<_Up, _Ep>&& __u,
        -: 2835:                   typename enable_if
        -: 2836:                            <
        -: 2837:                                is_array<_Up>::value &&
        -: 2838:                                __same_or_less_cv_qualified<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value
        -: 2839:                                && is_convertible<_Ep, deleter_type>::value &&
        -: 2840:                                (
        -: 2841:                                    !is_reference<deleter_type>::value ||
        -: 2842:                                    is_same<deleter_type, _Ep>::value
        -: 2843:                                ),
        -: 2844:                                __nat
        -: 2845:                            >::type = __nat()
        -: 2846:                  ) _NOEXCEPT
        -: 2847:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2848:
        -: 2849:
        -: 2850:        template <class _Up, class _Ep>
        -: 2851:            _LIBCPP_INLINE_VISIBILITY
        -: 2852:            typename enable_if
        -: 2853:            <
        -: 2854:                is_array<_Up>::value &&
        -: 2855:                __same_or_less_cv_qualified<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2856:                is_assignable<deleter_type&, _Ep&&>::value,
        -: 2857:                unique_ptr&
        -: 2858:            >::type
        -: 2859:            operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2860:            {
        -: 2861:                reset(__u.release());
        -: 2862:                __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2863:                return *this;
        -: 2864:            }
        -: 2865:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2866:
        -: 2867:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(pointer __p)
        -: 2868:        : __ptr_(__p)
        -: 2869:        {
        -: 2870:            static_assert(!is_pointer<deleter_type>::value,
        -: 2871:                "unique_ptr constructed with null function pointer deleter");
        -: 2872:        }
        -: 2873:
        -: 2874:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, deleter_type __d)
        -: 2875:        : __ptr_(__p, _VSTD::forward<deleter_type>(__d)) {}
        -: 2876:
        -: 2877:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, deleter_type __d)
        -: 2878:        : __ptr_(pointer(), _VSTD::forward<deleter_type>(__d)) {}
        -: 2879:
        -: 2880:    _LIBCPP_INLINE_VISIBILITY operator __rv<unique_ptr>()
        -: 2881:    {
        -: 2882:        return __rv<unique_ptr>(*this);
        -: 2883:    }
        -: 2884:
        -: 2885:    _LIBCPP_INLINE_VISIBILITY unique_ptr(__rv<unique_ptr> __u)
        -: 2886:        : __ptr_(__u->release(), _VSTD::forward<deleter_type>(__u->get_deleter())) {}
        -: 2887:
        -: 2888:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(__rv<unique_ptr> __u)
        -: 2889:    {
        -: 2890:        reset(__u->release());
        -: 2891:        __ptr_.second() = _VSTD::forward<deleter_type>(__u->get_deleter());
        -: 2892:        return *this;
        -: 2893:    }
        -: 2894:
        -: 2895:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2896:    _LIBCPP_INLINE_VISIBILITY ~unique_ptr() {reset();}
        -: 2897:
        -: 2898:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(nullptr_t) _NOEXCEPT
        -: 2899:    {
        -: 2900:        reset();
        -: 2901:        return *this;
        -: 2902:    }
        -: 2903:
        -: 2904:    _LIBCPP_INLINE_VISIBILITY typename add_lvalue_reference<_Tp>::type operator[](size_t __i) const
        -: 2905:        {return __ptr_.first()[__i];}
        -: 2906:    _LIBCPP_INLINE_VISIBILITY pointer get() const _NOEXCEPT {return __ptr_.first();}
        -: 2907:    _LIBCPP_INLINE_VISIBILITY       _Dp_reference get_deleter() _NOEXCEPT
        -: 2908:        {return __ptr_.second();}
        -: 2909:    _LIBCPP_INLINE_VISIBILITY _Dp_const_reference get_deleter() const _NOEXCEPT
        -: 2910:        {return __ptr_.second();}
        -: 2911:    _LIBCPP_INLINE_VISIBILITY
        -: 2912:        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT
        -: 2913:        {return __ptr_.first() != nullptr;}
        -: 2914:
        -: 2915:    _LIBCPP_INLINE_VISIBILITY pointer release() _NOEXCEPT
        -: 2916:    {
        -: 2917:        pointer __t = __ptr_.first();
        -: 2918:        __ptr_.first() = pointer();
        -: 2919:        return __t;
        -: 2920:    }
        -: 2921:
        -: 2922:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2923:    template <class _Pp>
        -: 2924:    _LIBCPP_INLINE_VISIBILITY
        -: 2925:    typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, void>::type
        -: 2926:    reset(_Pp __p) _NOEXCEPT
        -: 2927:    {
        -: 2928:        pointer __tmp = __ptr_.first();
        -: 2929:        __ptr_.first() = __p;
        -: 2930:        if (__tmp)
        -: 2931:            __ptr_.second()(__tmp);
        -: 2932:    }
        -: 2933:    _LIBCPP_INLINE_VISIBILITY void reset(nullptr_t) _NOEXCEPT
        -: 2934:    {
        -: 2935:        pointer __tmp = __ptr_.first();
        -: 2936:        __ptr_.first() = nullptr;
        -: 2937:        if (__tmp)
        -: 2938:            __ptr_.second()(__tmp);
        -: 2939:    }
        -: 2940:    _LIBCPP_INLINE_VISIBILITY void reset() _NOEXCEPT
        -: 2941:    {
        -: 2942:        pointer __tmp = __ptr_.first();
        -: 2943:        __ptr_.first() = nullptr;
        -: 2944:        if (__tmp)
        -: 2945:            __ptr_.second()(__tmp);
        -: 2946:    }
        -: 2947:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2948:    _LIBCPP_INLINE_VISIBILITY void reset(pointer __p = pointer())
        -: 2949:    {
        -: 2950:        pointer __tmp = __ptr_.first();
        -: 2951:        __ptr_.first() = __p;
        -: 2952:        if (__tmp)
        -: 2953:            __ptr_.second()(__tmp);
        -: 2954:    }
        -: 2955:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2956:
        -: 2957:    _LIBCPP_INLINE_VISIBILITY void swap(unique_ptr& __u) {__ptr_.swap(__u.__ptr_);}
        -: 2958:private:
        -: 2959:
        -: 2960:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2961:    template <class _Up>
        -: 2962:        explicit unique_ptr(_Up);
        -: 2963:    template <class _Up>
        -: 2964:        unique_ptr(_Up __u,
        -: 2965:                   typename conditional<
        -: 2966:                                       is_reference<deleter_type>::value,
        -: 2967:                                       deleter_type,
        -: 2968:                                       typename add_lvalue_reference<const deleter_type>::type>::type,
        -: 2969:                   typename enable_if
        -: 2970:                      <
        -: 2971:                         is_convertible<_Up, pointer>::value,
        -: 2972:                         __nat
        -: 2973:                      >::type = __nat());
        -: 2974:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2975:};
        -: 2976:
        -: 2977:template <class _Tp, class _Dp>
        -: 2978:inline _LIBCPP_INLINE_VISIBILITY
        -: 2979:void
        -: 2980:swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}
        -: 2981:
        -: 2982:template <class _T1, class _D1, class _T2, class _D2>
        -: 2983:inline _LIBCPP_INLINE_VISIBILITY
        -: 2984:bool
        -: 2985:operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}
        -: 2986:
        -: 2987:template <class _T1, class _D1, class _T2, class _D2>
        -: 2988:inline _LIBCPP_INLINE_VISIBILITY
        -: 2989:bool
        -: 2990:operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}
        -: 2991:
        -: 2992:template <class _T1, class _D1, class _T2, class _D2>
        -: 2993:inline _LIBCPP_INLINE_VISIBILITY
        -: 2994:bool
        -: 2995:operator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)
        -: 2996:{
        -: 2997:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2998:    typedef typename unique_ptr<_T2, _D2>::pointer _P2;
        -: 2999:    typedef typename common_type<_P1, _P2>::type _Vp;
        -: 3000:    return less<_Vp>()(__x.get(), __y.get());
        -: 3001:}
        -: 3002:
        -: 3003:template <class _T1, class _D1, class _T2, class _D2>
        -: 3004:inline _LIBCPP_INLINE_VISIBILITY
        -: 3005:bool
        -: 3006:operator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}
        -: 3007:
        -: 3008:template <class _T1, class _D1, class _T2, class _D2>
        -: 3009:inline _LIBCPP_INLINE_VISIBILITY
        -: 3010:bool
        -: 3011:operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}
        -: 3012:
        -: 3013:template <class _T1, class _D1, class _T2, class _D2>
        -: 3014:inline _LIBCPP_INLINE_VISIBILITY
        -: 3015:bool
        -: 3016:operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}
        -: 3017:
        -: 3018:template <class _T1, class _D1>
        -: 3019:inline _LIBCPP_INLINE_VISIBILITY
        -: 3020:bool
        -: 3021:operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 3022:{
        -: 3023:    return !__x;
        -: 3024:}
        -: 3025:
        -: 3026:template <class _T1, class _D1>
        -: 3027:inline _LIBCPP_INLINE_VISIBILITY
        -: 3028:bool
        -: 3029:operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 3030:{
        -: 3031:    return !__x;
        -: 3032:}
        -: 3033:
        -: 3034:template <class _T1, class _D1>
        -: 3035:inline _LIBCPP_INLINE_VISIBILITY
        -: 3036:bool
        -: 3037:operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 3038:{
        -: 3039:    return static_cast<bool>(__x);
        -: 3040:}
        -: 3041:
        -: 3042:template <class _T1, class _D1>
        -: 3043:inline _LIBCPP_INLINE_VISIBILITY
        -: 3044:bool
        -: 3045:operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 3046:{
        -: 3047:    return static_cast<bool>(__x);
        -: 3048:}
        -: 3049:
        -: 3050:template <class _T1, class _D1>
        -: 3051:inline _LIBCPP_INLINE_VISIBILITY
        -: 3052:bool
        -: 3053:operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3054:{
        -: 3055:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 3056:    return less<_P1>()(__x.get(), nullptr);
        -: 3057:}
        -: 3058:
        -: 3059:template <class _T1, class _D1>
        -: 3060:inline _LIBCPP_INLINE_VISIBILITY
        -: 3061:bool
        -: 3062:operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3063:{
        -: 3064:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 3065:    return less<_P1>()(nullptr, __x.get());
        -: 3066:}
        -: 3067:
        -: 3068:template <class _T1, class _D1>
        -: 3069:inline _LIBCPP_INLINE_VISIBILITY
        -: 3070:bool
        -: 3071:operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3072:{
        -: 3073:    return nullptr < __x;
        -: 3074:}
        -: 3075:
        -: 3076:template <class _T1, class _D1>
        -: 3077:inline _LIBCPP_INLINE_VISIBILITY
        -: 3078:bool
        -: 3079:operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3080:{
        -: 3081:    return __x < nullptr;
        -: 3082:}
        -: 3083:
        -: 3084:template <class _T1, class _D1>
        -: 3085:inline _LIBCPP_INLINE_VISIBILITY
        -: 3086:bool
        -: 3087:operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3088:{
        -: 3089:    return !(nullptr < __x);
        -: 3090:}
        -: 3091:
        -: 3092:template <class _T1, class _D1>
        -: 3093:inline _LIBCPP_INLINE_VISIBILITY
        -: 3094:bool
        -: 3095:operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3096:{
        -: 3097:    return !(__x < nullptr);
        -: 3098:}
        -: 3099:
        -: 3100:template <class _T1, class _D1>
        -: 3101:inline _LIBCPP_INLINE_VISIBILITY
        -: 3102:bool
        -: 3103:operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3104:{
        -: 3105:    return !(__x < nullptr);
        -: 3106:}
        -: 3107:
        -: 3108:template <class _T1, class _D1>
        -: 3109:inline _LIBCPP_INLINE_VISIBILITY
        -: 3110:bool
        -: 3111:operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3112:{
        -: 3113:    return !(nullptr < __x);
        -: 3114:}
        -: 3115:
        -: 3116:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3117:
        -: 3118:template <class _Tp, class _Dp>
        -: 3119:inline _LIBCPP_INLINE_VISIBILITY
        -: 3120:unique_ptr<_Tp, _Dp>
        -: 3121:move(unique_ptr<_Tp, _Dp>& __t)
        -: 3122:{
        -: 3123:    return unique_ptr<_Tp, _Dp>(__rv<unique_ptr<_Tp, _Dp> >(__t));
        -: 3124:}
        -: 3125:
        -: 3126:#endif
        -: 3127:
        -: 3128:#if _LIBCPP_STD_VER > 11
        -: 3129:
        -: 3130:template<class _Tp>
        -: 3131:struct __unique_if
        -: 3132:{
        -: 3133:    typedef unique_ptr<_Tp> __unique_single;
        -: 3134:};
        -: 3135:
        -: 3136:template<class _Tp>
        -: 3137:struct __unique_if<_Tp[]>
        -: 3138:{
        -: 3139:    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
        -: 3140:};
        -: 3141:
        -: 3142:template<class _Tp, size_t _Np>
        -: 3143:struct __unique_if<_Tp[_Np]>
        -: 3144:{
        -: 3145:    typedef void __unique_array_known_bound;
        -: 3146:};
        -: 3147:
        -: 3148:template<class _Tp, class... _Args>
        -: 3149:inline _LIBCPP_INLINE_VISIBILITY
        -: 3150:typename __unique_if<_Tp>::__unique_single
        -: 3151:make_unique(_Args&&... __args)
        -: 3152:{
        -: 3153:    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
        -: 3154:}
        -: 3155:
        -: 3156:template<class _Tp>
        -: 3157:inline _LIBCPP_INLINE_VISIBILITY
        -: 3158:typename __unique_if<_Tp>::__unique_array_unknown_bound
        -: 3159:make_unique(size_t __n)
        -: 3160:{
        -: 3161:    typedef typename remove_extent<_Tp>::type _Up;
        -: 3162:    return unique_ptr<_Tp>(new _Up[__n]());
        -: 3163:}
        -: 3164:
        -: 3165:template<class _Tp, class... _Args>
        -: 3166:    typename __unique_if<_Tp>::__unique_array_known_bound
        -: 3167:    make_unique(_Args&&...) = delete;
        -: 3168:
        -: 3169:#endif  // _LIBCPP_STD_VER > 11
        -: 3170:
        -: 3171:template <class _Tp> struct hash;
        -: 3172:
        -: 3173:template <class _Size>
        -: 3174:inline _LIBCPP_INLINE_VISIBILITY
        -: 3175:_Size
        -: 3176:__loadword(const void* __p)
        -: 3177:{
        -: 3178:    _Size __r;
        -: 3179:    std::memcpy(&__r, __p, sizeof(__r));
        -: 3180:    return __r;
        -: 3181:}
        -: 3182:
        -: 3183:// We use murmur2 when size_t is 32 bits, and cityhash64 when size_t
        -: 3184:// is 64 bits.  This is because cityhash64 uses 64bit x 64bit
        -: 3185:// multiplication, which can be very slow on 32-bit systems.
        -: 3186:template <class _Size, size_t = sizeof(_Size)*__CHAR_BIT__>
        -: 3187:struct __murmur2_or_cityhash;
        -: 3188:
        -: 3189:template <class _Size>
        -: 3190:struct __murmur2_or_cityhash<_Size, 32>
        -: 3191:{
        -: 3192:    _Size operator()(const void* __key, _Size __len);
        -: 3193:};
        -: 3194:
        -: 3195:// murmur2
        -: 3196:template <class _Size>
        -: 3197:_Size
        -: 3198:__murmur2_or_cityhash<_Size, 32>::operator()(const void* __key, _Size __len)
        -: 3199:{
        -: 3200:    const _Size __m = 0x5bd1e995;
        -: 3201:    const _Size __r = 24;
        -: 3202:    _Size __h = __len;
        -: 3203:    const unsigned char* __data = static_cast<const unsigned char*>(__key);
        -: 3204:    for (; __len >= 4; __data += 4, __len -= 4)
        -: 3205:    {
        -: 3206:        _Size __k = __loadword<_Size>(__data);
        -: 3207:        __k *= __m;
        -: 3208:        __k ^= __k >> __r;
        -: 3209:        __k *= __m;
        -: 3210:        __h *= __m;
        -: 3211:        __h ^= __k;
        -: 3212:    }
        -: 3213:    switch (__len)
        -: 3214:    {
        -: 3215:    case 3:
        -: 3216:        __h ^= __data[2] << 16;
        -: 3217:    case 2:
        -: 3218:        __h ^= __data[1] << 8;
        -: 3219:    case 1:
        -: 3220:        __h ^= __data[0];
        -: 3221:        __h *= __m;
        -: 3222:    }
        -: 3223:    __h ^= __h >> 13;
        -: 3224:    __h *= __m;
        -: 3225:    __h ^= __h >> 15;
        -: 3226:    return __h;
        -: 3227:}
        -: 3228:
        -: 3229:template <class _Size>
        -: 3230:struct __murmur2_or_cityhash<_Size, 64>
        -: 3231:{
        -: 3232:    _Size operator()(const void* __key, _Size __len);
        -: 3233:
        -: 3234: private:
        -: 3235:  // Some primes between 2^63 and 2^64.
        -: 3236:  static const _Size __k0 = 0xc3a5c85c97cb3127ULL;
        -: 3237:  static const _Size __k1 = 0xb492b66fbe98f273ULL;
        -: 3238:  static const _Size __k2 = 0x9ae16a3b2f90404fULL;
        -: 3239:  static const _Size __k3 = 0xc949d7c7509e6557ULL;
        -: 3240:
        -: 3241:  static _Size __rotate(_Size __val, int __shift) {
        -: 3242:    return __shift == 0 ? __val : ((__val >> __shift) | (__val << (64 - __shift)));
        -: 3243:  }
        -: 3244:
        -: 3245:  static _Size __rotate_by_at_least_1(_Size __val, int __shift) {
        -: 3246:    return (__val >> __shift) | (__val << (64 - __shift));
        -: 3247:  }
        -: 3248:
        -: 3249:  static _Size __shift_mix(_Size __val) {
        -: 3250:    return __val ^ (__val >> 47);
        -: 3251:  }
        -: 3252:
        -: 3253:  static _Size __hash_len_16(_Size __u, _Size __v) {
        -: 3254:    const _Size __mul = 0x9ddfea08eb382d69ULL;
        -: 3255:    _Size __a = (__u ^ __v) * __mul;
        -: 3256:    __a ^= (__a >> 47);
        -: 3257:    _Size __b = (__v ^ __a) * __mul;
        -: 3258:    __b ^= (__b >> 47);
        -: 3259:    __b *= __mul;
        -: 3260:    return __b;
        -: 3261:  }
        -: 3262:
        -: 3263:  static _Size __hash_len_0_to_16(const char* __s, _Size __len) {
        -: 3264:    if (__len > 8) {
        -: 3265:      const _Size __a = __loadword<_Size>(__s);
        -: 3266:      const _Size __b = __loadword<_Size>(__s + __len - 8);
        -: 3267:      return __hash_len_16(__a, __rotate_by_at_least_1(__b + __len, __len)) ^ __b;
        -: 3268:    }
        -: 3269:    if (__len >= 4) {
        -: 3270:      const uint32_t __a = __loadword<uint32_t>(__s);
        -: 3271:      const uint32_t __b = __loadword<uint32_t>(__s + __len - 4);
        -: 3272:      return __hash_len_16(__len + (__a << 3), __b);
        -: 3273:    }
        -: 3274:    if (__len > 0) {
        -: 3275:      const unsigned char __a = __s[0];
        -: 3276:      const unsigned char __b = __s[__len >> 1];
        -: 3277:      const unsigned char __c = __s[__len - 1];
        -: 3278:      const uint32_t __y = static_cast<uint32_t>(__a) +
        -: 3279:                           (static_cast<uint32_t>(__b) << 8);
        -: 3280:      const uint32_t __z = __len + (static_cast<uint32_t>(__c) << 2);
        -: 3281:      return __shift_mix(__y * __k2 ^ __z * __k3) * __k2;
        -: 3282:    }
        -: 3283:    return __k2;
        -: 3284:  }
        -: 3285:
        -: 3286:  static _Size __hash_len_17_to_32(const char *__s, _Size __len) {
        -: 3287:    const _Size __a = __loadword<_Size>(__s) * __k1;
        -: 3288:    const _Size __b = __loadword<_Size>(__s + 8);
        -: 3289:    const _Size __c = __loadword<_Size>(__s + __len - 8) * __k2;
        -: 3290:    const _Size __d = __loadword<_Size>(__s + __len - 16) * __k0;
        -: 3291:    return __hash_len_16(__rotate(__a - __b, 43) + __rotate(__c, 30) + __d,
        -: 3292:                         __a + __rotate(__b ^ __k3, 20) - __c + __len);
        -: 3293:  }
        -: 3294:
        -: 3295:  // Return a 16-byte hash for 48 bytes.  Quick and dirty.
        -: 3296:  // Callers do best to use "random-looking" values for a and b.
        -: 3297:  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
        -: 3298:      _Size __w, _Size __x, _Size __y, _Size __z, _Size __a, _Size __b) {
        -: 3299:    __a += __w;
        -: 3300:    __b = __rotate(__b + __a + __z, 21);
        -: 3301:    const _Size __c = __a;
        -: 3302:    __a += __x;
        -: 3303:    __a += __y;
        -: 3304:    __b += __rotate(__a, 44);
        -: 3305:    return pair<_Size, _Size>(__a + __z, __b + __c);
        -: 3306:  }
        -: 3307:
        -: 3308:  // Return a 16-byte hash for s[0] ... s[31], a, and b.  Quick and dirty.
        -: 3309:  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
        -: 3310:      const char* __s, _Size __a, _Size __b) {
        -: 3311:    return __weak_hash_len_32_with_seeds(__loadword<_Size>(__s),
        -: 3312:                                         __loadword<_Size>(__s + 8),
        -: 3313:                                         __loadword<_Size>(__s + 16),
        -: 3314:                                         __loadword<_Size>(__s + 24),
        -: 3315:                                         __a,
        -: 3316:                                         __b);
        -: 3317:  }
        -: 3318:
        -: 3319:  // Return an 8-byte hash for 33 to 64 bytes.
        -: 3320:  static _Size __hash_len_33_to_64(const char *__s, size_t __len) {
        -: 3321:    _Size __z = __loadword<_Size>(__s + 24);
        -: 3322:    _Size __a = __loadword<_Size>(__s) +
        -: 3323:                (__len + __loadword<_Size>(__s + __len - 16)) * __k0;
        -: 3324:    _Size __b = __rotate(__a + __z, 52);
        -: 3325:    _Size __c = __rotate(__a, 37);
        -: 3326:    __a += __loadword<_Size>(__s + 8);
        -: 3327:    __c += __rotate(__a, 7);
        -: 3328:    __a += __loadword<_Size>(__s + 16);
        -: 3329:    _Size __vf = __a + __z;
        -: 3330:    _Size __vs = __b + __rotate(__a, 31) + __c;
        -: 3331:    __a = __loadword<_Size>(__s + 16) + __loadword<_Size>(__s + __len - 32);
        -: 3332:    __z += __loadword<_Size>(__s + __len - 8);
        -: 3333:    __b = __rotate(__a + __z, 52);
        -: 3334:    __c = __rotate(__a, 37);
        -: 3335:    __a += __loadword<_Size>(__s + __len - 24);
        -: 3336:    __c += __rotate(__a, 7);
        -: 3337:    __a += __loadword<_Size>(__s + __len - 16);
        -: 3338:    _Size __wf = __a + __z;
        -: 3339:    _Size __ws = __b + __rotate(__a, 31) + __c;
        -: 3340:    _Size __r = __shift_mix((__vf + __ws) * __k2 + (__wf + __vs) * __k0);
        -: 3341:    return __shift_mix(__r * __k0 + __vs) * __k2;
        -: 3342:  }
        -: 3343:};
        -: 3344:
        -: 3345:// cityhash64
        -: 3346:template <class _Size>
        -: 3347:_Size
        -: 3348:__murmur2_or_cityhash<_Size, 64>::operator()(const void* __key, _Size __len)
        -: 3349:{
        -: 3350:  const char* __s = static_cast<const char*>(__key);
        -: 3351:  if (__len <= 32) {
        -: 3352:    if (__len <= 16) {
        -: 3353:      return __hash_len_0_to_16(__s, __len);
        -: 3354:    } else {
        -: 3355:      return __hash_len_17_to_32(__s, __len);
        -: 3356:    }
        -: 3357:  } else if (__len <= 64) {
        -: 3358:    return __hash_len_33_to_64(__s, __len);
        -: 3359:  }
        -: 3360:
        -: 3361:  // For strings over 64 bytes we hash the end first, and then as we
        -: 3362:  // loop we keep 56 bytes of state: v, w, x, y, and z.
        -: 3363:  _Size __x = __loadword<_Size>(__s + __len - 40);
        -: 3364:  _Size __y = __loadword<_Size>(__s + __len - 16) +
        -: 3365:              __loadword<_Size>(__s + __len - 56);
        -: 3366:  _Size __z = __hash_len_16(__loadword<_Size>(__s + __len - 48) + __len,
        -: 3367:                          __loadword<_Size>(__s + __len - 24));
        -: 3368:  pair<_Size, _Size> __v = __weak_hash_len_32_with_seeds(__s + __len - 64, __len, __z);
        -: 3369:  pair<_Size, _Size> __w = __weak_hash_len_32_with_seeds(__s + __len - 32, __y + __k1, __x);
        -: 3370:  __x = __x * __k1 + __loadword<_Size>(__s);
        -: 3371:
        -: 3372:  // Decrease len to the nearest multiple of 64, and operate on 64-byte chunks.
        -: 3373:  __len = (__len - 1) & ~static_cast<_Size>(63);
        -: 3374:  do {
        -: 3375:    __x = __rotate(__x + __y + __v.first + __loadword<_Size>(__s + 8), 37) * __k1;
        -: 3376:    __y = __rotate(__y + __v.second + __loadword<_Size>(__s + 48), 42) * __k1;
        -: 3377:    __x ^= __w.second;
        -: 3378:    __y += __v.first + __loadword<_Size>(__s + 40);
        -: 3379:    __z = __rotate(__z + __w.first, 33) * __k1;
        -: 3380:    __v = __weak_hash_len_32_with_seeds(__s, __v.second * __k1, __x + __w.first);
        -: 3381:    __w = __weak_hash_len_32_with_seeds(__s + 32, __z + __w.second,
        -: 3382:                                        __y + __loadword<_Size>(__s + 16));
        -: 3383:    std::swap(__z, __x);
        -: 3384:    __s += 64;
        -: 3385:    __len -= 64;
        -: 3386:  } while (__len != 0);
        -: 3387:  return __hash_len_16(
        -: 3388:      __hash_len_16(__v.first, __w.first) + __shift_mix(__y) * __k1 + __z,
        -: 3389:      __hash_len_16(__v.second, __w.second) + __x);
        -: 3390:}
        -: 3391:
        -: 3392:template <class _Tp, size_t = sizeof(_Tp) / sizeof(size_t)>
        -: 3393:struct __scalar_hash;
        -: 3394:
        -: 3395:template <class _Tp>
        -: 3396:struct __scalar_hash<_Tp, 0>
        -: 3397:    : public unary_function<_Tp, size_t>
        -: 3398:{
        -: 3399:    _LIBCPP_INLINE_VISIBILITY
        -: 3400:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3401:    {
        -: 3402:        union
        -: 3403:        {
        -: 3404:            _Tp    __t;
        -: 3405:            size_t __a;
        -: 3406:        } __u;
        -: 3407:        __u.__a = 0;
        -: 3408:        __u.__t = __v;
        -: 3409:        return __u.__a;
        -: 3410:    }
        -: 3411:};
        -: 3412:
        -: 3413:template <class _Tp>
        -: 3414:struct __scalar_hash<_Tp, 1>
        -: 3415:    : public unary_function<_Tp, size_t>
        -: 3416:{
        -: 3417:    _LIBCPP_INLINE_VISIBILITY
        -: 3418:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3419:    {
        -: 3420:        union
        -: 3421:        {
        -: 3422:            _Tp    __t;
        -: 3423:            size_t __a;
        -: 3424:        } __u;
        -: 3425:        __u.__t = __v;
        -: 3426:        return __u.__a;
        -: 3427:    }
        -: 3428:};
        -: 3429:
        -: 3430:template <class _Tp>
        -: 3431:struct __scalar_hash<_Tp, 2>
        -: 3432:    : public unary_function<_Tp, size_t>
        -: 3433:{
        -: 3434:    _LIBCPP_INLINE_VISIBILITY
        -: 3435:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3436:    {
        -: 3437:        union
        -: 3438:        {
        -: 3439:            _Tp __t;
        -: 3440:            struct
        -: 3441:            {
        -: 3442:                size_t __a;
        -: 3443:                size_t __b;
        -: 3444:            } __s;
        -: 3445:        } __u;
        -: 3446:        __u.__t = __v;
        -: 3447:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3448:    }
        -: 3449:};
        -: 3450:
        -: 3451:template <class _Tp>
        -: 3452:struct __scalar_hash<_Tp, 3>
        -: 3453:    : public unary_function<_Tp, size_t>
        -: 3454:{
        -: 3455:    _LIBCPP_INLINE_VISIBILITY
        -: 3456:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3457:    {
        -: 3458:        union
        -: 3459:        {
        -: 3460:            _Tp __t;
        -: 3461:            struct
        -: 3462:            {
        -: 3463:                size_t __a;
        -: 3464:                size_t __b;
        -: 3465:                size_t __c;
        -: 3466:            } __s;
        -: 3467:        } __u;
        -: 3468:        __u.__t = __v;
        -: 3469:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3470:    }
        -: 3471:};
        -: 3472:
        -: 3473:template <class _Tp>
        -: 3474:struct __scalar_hash<_Tp, 4>
        -: 3475:    : public unary_function<_Tp, size_t>
        -: 3476:{
        -: 3477:    _LIBCPP_INLINE_VISIBILITY
        -: 3478:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3479:    {
        -: 3480:        union
        -: 3481:        {
        -: 3482:            _Tp __t;
        -: 3483:            struct
        -: 3484:            {
        -: 3485:                size_t __a;
        -: 3486:                size_t __b;
        -: 3487:                size_t __c;
        -: 3488:                size_t __d;
        -: 3489:            } __s;
        -: 3490:        } __u;
        -: 3491:        __u.__t = __v;
        -: 3492:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3493:    }
        -: 3494:};
        -: 3495:
        -: 3496:template<class _Tp>
        -: 3497:struct _LIBCPP_TYPE_VIS_ONLY hash<_Tp*>
        -: 3498:    : public unary_function<_Tp*, size_t>
        -: 3499:{
        -: 3500:    _LIBCPP_INLINE_VISIBILITY
        -: 3501:    size_t operator()(_Tp* __v) const _NOEXCEPT
        -: 3502:    {
        -: 3503:        union
        -: 3504:        {
        -: 3505:            _Tp* __t;
        -: 3506:            size_t __a;
        -: 3507:        } __u;
        -: 3508:        __u.__t = __v;
        -: 3509:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3510:    }
        -: 3511:};
        -: 3512:
        -: 3513:template <class _Tp, class _Dp>
        -: 3514:struct _LIBCPP_TYPE_VIS_ONLY hash<unique_ptr<_Tp, _Dp> >
        -: 3515:{
        -: 3516:    typedef unique_ptr<_Tp, _Dp> argument_type;
        -: 3517:    typedef size_t               result_type;
        -: 3518:    _LIBCPP_INLINE_VISIBILITY
        -: 3519:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 3520:    {
        -: 3521:        typedef typename argument_type::pointer pointer;
        -: 3522:        return hash<pointer>()(__ptr.get());
        -: 3523:    }
        -: 3524:};
        -: 3525:
        -: 3526:struct __destruct_n
        -: 3527:{
        -: 3528:private:
        -: 3529:    size_t size;
        -: 3530:
        -: 3531:    template <class _Tp>
        -: 3532:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT
        -: 3533:        {for (size_t __i = 0; __i < size; ++__i, ++__p) __p->~_Tp();}
        -: 3534:
        -: 3535:    template <class _Tp>
        -: 3536:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT
        -: 3537:        {}
        -: 3538:
        -: 3539:    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT
        -: 3540:        {++size;}
        -: 3541:    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT
        -: 3542:        {}
        -: 3543:
        -: 3544:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT
        -: 3545:        {size = __s;}
        -: 3546:    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT
        -: 3547:        {}
        -: 3548:public:
        -: 3549:    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT
        -: 3550:        : size(__s) {}
        -: 3551:
        -: 3552:    template <class _Tp>
        -: 3553:    _LIBCPP_INLINE_VISIBILITY void __incr(_Tp*) _NOEXCEPT
        -: 3554:        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3555:
        -: 3556:    template <class _Tp>
        -: 3557:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT
        -: 3558:        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3559:
        -: 3560:    template <class _Tp>
        -: 3561:    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT
        -: 3562:        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3563:};
        -: 3564:
        -: 3565:template <class _Alloc>
        -: 3566:class __allocator_destructor
        -: 3567:{
        -: 3568:    typedef allocator_traits<_Alloc> __alloc_traits;
        -: 3569:public:
        -: 3570:    typedef typename __alloc_traits::pointer pointer;
        -: 3571:    typedef typename __alloc_traits::size_type size_type;
        -: 3572:private:
        -: 3573:    _Alloc& __alloc_;
        -: 3574:    size_type __s_;
        -: 3575:public:
        -: 3576:    _LIBCPP_INLINE_VISIBILITY __allocator_destructor(_Alloc& __a, size_type __s)
        -: 3577:             _NOEXCEPT
        -: 3578:        : __alloc_(__a), __s_(__s) {}
        -: 3579:    _LIBCPP_INLINE_VISIBILITY
        -: 3580:    void operator()(pointer __p) _NOEXCEPT
        -: 3581:        {__alloc_traits::deallocate(__alloc_, __p, __s_);}
        -: 3582:};
        -: 3583:
        -: 3584:template <class _InputIterator, class _ForwardIterator>
        -: 3585:_ForwardIterator
        -: 3586:uninitialized_copy(_InputIterator __f, _InputIterator __l, _ForwardIterator __r)
        -: 3587:{
        -: 3588:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3589:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3590:    _ForwardIterator __s = __r;
        -: 3591:    try
        -: 3592:    {
        -: 3593:#endif
        -: 3594:        for (; __f != __l; ++__f, (void) ++__r)
        -: 3595:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 3596:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3597:    }
        -: 3598:    catch (...)
        -: 3599:    {
        -: 3600:        for (; __s != __r; ++__s)
        -: 3601:            __s->~value_type();
        -: 3602:        throw;
        -: 3603:    }
        -: 3604:#endif
        -: 3605:    return __r;
        -: 3606:}
        -: 3607:
        -: 3608:template <class _InputIterator, class _Size, class _ForwardIterator>
        -: 3609:_ForwardIterator
        -: 3610:uninitialized_copy_n(_InputIterator __f, _Size __n, _ForwardIterator __r)
        -: 3611:{
        -: 3612:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3613:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3614:    _ForwardIterator __s = __r;
        -: 3615:    try
        -: 3616:    {
        -: 3617:#endif
        -: 3618:        for (; __n > 0; ++__f, (void) ++__r, (void) --__n)
        -: 3619:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 3620:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3621:    }
        -: 3622:    catch (...)
        -: 3623:    {
        -: 3624:        for (; __s != __r; ++__s)
        -: 3625:            __s->~value_type();
        -: 3626:        throw;
        -: 3627:    }
        -: 3628:#endif
        -: 3629:    return __r;
        -: 3630:}
        -: 3631:
        -: 3632:template <class _ForwardIterator, class _Tp>
        -: 3633:void
        -: 3634:uninitialized_fill(_ForwardIterator __f, _ForwardIterator __l, const _Tp& __x)
        -: 3635:{
        -: 3636:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3637:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3638:    _ForwardIterator __s = __f;
        -: 3639:    try
        -: 3640:    {
        -: 3641:#endif
        -: 3642:        for (; __f != __l; ++__f)
        -: 3643:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 3644:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3645:    }
        -: 3646:    catch (...)
        -: 3647:    {
        -: 3648:        for (; __s != __f; ++__s)
        -: 3649:            __s->~value_type();
        -: 3650:        throw;
        -: 3651:    }
        -: 3652:#endif
        -: 3653:}
        -: 3654:
        -: 3655:template <class _ForwardIterator, class _Size, class _Tp>
        -: 3656:_ForwardIterator
        -: 3657:uninitialized_fill_n(_ForwardIterator __f, _Size __n, const _Tp& __x)
        -: 3658:{
        -: 3659:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3660:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3661:    _ForwardIterator __s = __f;
        -: 3662:    try
        -: 3663:    {
        -: 3664:#endif
        -: 3665:        for (; __n > 0; ++__f, (void) --__n)
        -: 3666:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 3667:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3668:    }
        -: 3669:    catch (...)
        -: 3670:    {
        -: 3671:        for (; __s != __f; ++__s)
        -: 3672:            __s->~value_type();
        -: 3673:        throw;
        -: 3674:    }
        -: 3675:#endif
        -: 3676:    return __f;
        -: 3677:}
        -: 3678:
        -: 3679:class _LIBCPP_EXCEPTION_ABI bad_weak_ptr
        -: 3680:    : public std::exception
        -: 3681:{
        -: 3682:public:
        -: 3683:    virtual ~bad_weak_ptr() _NOEXCEPT;
        -: 3684:    virtual const char* what() const  _NOEXCEPT;
        -: 3685:};
        -: 3686:
        -: 3687:template<class _Tp> class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 3688:
        -: 3689:class _LIBCPP_TYPE_VIS __shared_count
        -: 3690:{
        -: 3691:    __shared_count(const __shared_count&);
        -: 3692:    __shared_count& operator=(const __shared_count&);
        -: 3693:
        -: 3694:protected:
        -: 3695:    long __shared_owners_;
        -: 3696:    virtual ~__shared_count();
        -: 3697:private:
        -: 3698:    virtual void __on_zero_shared() _NOEXCEPT = 0;
        -: 3699:
        -: 3700:public:
        -: 3701:    _LIBCPP_INLINE_VISIBILITY
        -: 3702:    explicit __shared_count(long __refs = 0) _NOEXCEPT
        -: 3703:        : __shared_owners_(__refs) {}
        -: 3704:
        -: 3705:    void __add_shared() _NOEXCEPT;
        -: 3706:    bool __release_shared() _NOEXCEPT;
        -: 3707:    _LIBCPP_INLINE_VISIBILITY
        -: 3708:    long use_count() const _NOEXCEPT {
        -: 3709:        return __libcpp_relaxed_load(&__shared_owners_) + 1;
        -: 3710:    }
        -: 3711:};
        -: 3712:
        -: 3713:class _LIBCPP_TYPE_VIS __shared_weak_count
        -: 3714:    : private __shared_count
        -: 3715:{
        -: 3716:    long __shared_weak_owners_;
        -: 3717:
        -: 3718:public:
        -: 3719:    _LIBCPP_INLINE_VISIBILITY
        -: 3720:    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT
        -: 3721:        : __shared_count(__refs),
        -: 3722:          __shared_weak_owners_(__refs) {}
        -: 3723:protected:
        -: 3724:    virtual ~__shared_weak_count();
        -: 3725:
        -: 3726:public:
        -: 3727:    void __add_shared() _NOEXCEPT;
        -: 3728:    void __add_weak() _NOEXCEPT;
        -: 3729:    void __release_shared() _NOEXCEPT;
        -: 3730:    void __release_weak() _NOEXCEPT;
        -: 3731:    _LIBCPP_INLINE_VISIBILITY
        -: 3732:    long use_count() const _NOEXCEPT {return __shared_count::use_count();}
        -: 3733:    __shared_weak_count* lock() _NOEXCEPT;
        -: 3734:
        -: 3735:    // Define the function out only if we build static libc++ without RTTI.
        -: 3736:    // Otherwise we may break clients who need to compile their projects with
        -: 3737:    // -fno-rtti and yet link against a libc++.dylib compiled
        -: 3738:    // without -fno-rtti.
        -: 3739:#if !defined(_LIBCPP_NO_RTTI) || !defined(_LIBCPP_BUILD_STATIC)
        -: 3740:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3741:#endif
        -: 3742:private:
        -: 3743:    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;
        -: 3744:};
        -: 3745:
        -: 3746:template <class _Tp, class _Dp, class _Alloc>
        -: 3747:class __shared_ptr_pointer
        -: 3748:    : public __shared_weak_count
        -: 3749:{
        -: 3750:    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;
        -: 3751:public:
        -: 3752:    _LIBCPP_INLINE_VISIBILITY
        -: 3753:    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
        -: 3754:        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}
        -: 3755:
        -: 3756:#ifndef _LIBCPP_NO_RTTI
        -: 3757:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3758:#endif
        -: 3759:
        -: 3760:private:
        -: 3761:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3762:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3763:};
        -: 3764:
        -: 3765:#ifndef _LIBCPP_NO_RTTI
        -: 3766:
        -: 3767:template <class _Tp, class _Dp, class _Alloc>
        -: 3768:const void*
        -: 3769:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT
        -: 3770:{
        -: 3771:    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : 0;
        -: 3772:}
        -: 3773:
        -: 3774:#endif  // _LIBCPP_NO_RTTI
        -: 3775:
        -: 3776:template <class _Tp, class _Dp, class _Alloc>
        -: 3777:void
        -: 3778:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3779:{
        -: 3780:    __data_.first().second()(__data_.first().first());
        -: 3781:    __data_.first().second().~_Dp();
        -: 3782:}
        -: 3783:
        -: 3784:template <class _Tp, class _Dp, class _Alloc>
        -: 3785:void
        -: 3786:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3787:{
        -: 3788:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
        -: 3789:    typedef allocator_traits<_Al> _ATraits;
        -: 3790:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3791:
        -: 3792:    _Al __a(__data_.second());
        -: 3793:    __data_.second().~_Alloc();
        -: 3794:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3795:}
        -: 3796:
        -: 3797:template <class _Tp, class _Alloc>
        -: 3798:class __shared_ptr_emplace
        -: 3799:    : public __shared_weak_count
        -: 3800:{
        -: 3801:    __compressed_pair<_Alloc, _Tp> __data_;
        -: 3802:public:
        -: 3803:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 3804:
        -: 3805:    _LIBCPP_INLINE_VISIBILITY
        -: 3806:    __shared_ptr_emplace(_Alloc __a)
        -: 3807:        :  __data_(_VSTD::move(__a)) {}
        -: 3808:
        -: 3809:    template <class ..._Args>
        -: 3810:        _LIBCPP_INLINE_VISIBILITY
        -: 3811:        __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
        -: 3812:            :  __data_(piecewise_construct, _VSTD::forward_as_tuple(__a),
        -: 3813:                   _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)) {}
        -: 3814:
        -: 3815:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 3816:
        -: 3817:    _LIBCPP_INLINE_VISIBILITY
        -: 3818:    __shared_ptr_emplace(_Alloc __a)
        -: 3819:        :  __data_(__a) {}
        -: 3820:
        -: 3821:    template <class _A0>
        -: 3822:        _LIBCPP_INLINE_VISIBILITY
        -: 3823:        __shared_ptr_emplace(_Alloc __a, _A0& __a0)
        -: 3824:            :  __data_(__a, _Tp(__a0)) {}
        -: 3825:
        -: 3826:    template <class _A0, class _A1>
        -: 3827:        _LIBCPP_INLINE_VISIBILITY
        -: 3828:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1)
        -: 3829:            :  __data_(__a, _Tp(__a0, __a1)) {}
        -: 3830:
        -: 3831:    template <class _A0, class _A1, class _A2>
        -: 3832:        _LIBCPP_INLINE_VISIBILITY
        -: 3833:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 3834:            :  __data_(__a, _Tp(__a0, __a1, __a2)) {}
        -: 3835:
        -: 3836:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 3837:
        -: 3838:private:
        -: 3839:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3840:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3841:public:
        -: 3842:    _LIBCPP_INLINE_VISIBILITY
        -: 3843:    _Tp* get() _NOEXCEPT {return &__data_.second();}
        -: 3844:};
        -: 3845:
        -: 3846:template <class _Tp, class _Alloc>
        -: 3847:void
        -: 3848:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3849:{
        -: 3850:    __data_.second().~_Tp();
        -: 3851:}
        -: 3852:
        -: 3853:template <class _Tp, class _Alloc>
        -: 3854:void
        -: 3855:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3856:{
        -: 3857:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al;
        -: 3858:    typedef allocator_traits<_Al> _ATraits;
        -: 3859:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3860:    _Al __a(__data_.first());
        -: 3861:    __data_.first().~_Alloc();
        -: 3862:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3863:}
        -: 3864:
        -: 3865:template<class _Tp> class _LIBCPP_TYPE_VIS_ONLY enable_shared_from_this;
        -: 3866:
        -: 3867:template<class _Tp>
        -: 3868:class _LIBCPP_TYPE_VIS_ONLY shared_ptr
        -: 3869:{
        -: 3870:public:
        -: 3871:    typedef _Tp element_type;
        -: 3872:private:
        -: 3873:    element_type*      __ptr_;
        -: 3874:    __shared_weak_count* __cntrl_;
        -: 3875:
        -: 3876:    struct __nat {int __for_bool_;};
        -: 3877:public:
        -: 3878:    _LIBCPP_INLINE_VISIBILITY
        -: 3879:    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT;
        -: 3880:    _LIBCPP_INLINE_VISIBILITY
        -: 3881:    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT;
        -: 3882:    template<class _Yp>
        -: 3883:        explicit shared_ptr(_Yp* __p,
        -: 3884:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3885:    template<class _Yp, class _Dp>
        -: 3886:        shared_ptr(_Yp* __p, _Dp __d,
        -: 3887:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3888:    template<class _Yp, class _Dp, class _Alloc>
        -: 3889:        shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3890:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3891:    template <class _Dp> shared_ptr(nullptr_t __p, _Dp __d);
        -: 3892:    template <class _Dp, class _Alloc> shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a);
        -: 3893:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) _NOEXCEPT;
        -: 3894:    _LIBCPP_INLINE_VISIBILITY
        -: 3895:    shared_ptr(const shared_ptr& __r) _NOEXCEPT;
        -: 3896:    template<class _Yp>
        -: 3897:        _LIBCPP_INLINE_VISIBILITY
        -: 3898:        shared_ptr(const shared_ptr<_Yp>& __r,
        -: 3899:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type = __nat())
        -: 3900:                       _NOEXCEPT;
        -: 3901:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3902:    _LIBCPP_INLINE_VISIBILITY
        -: 3903:    shared_ptr(shared_ptr&& __r) _NOEXCEPT;
        -: 3904:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY  shared_ptr(shared_ptr<_Yp>&& __r,
        -: 3905:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type = __nat())
        -: 3906:                       _NOEXCEPT;
        -: 3907:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3908:    template<class _Yp> explicit shared_ptr(const weak_ptr<_Yp>& __r,
        -: 3909:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type= __nat());
        -: 3910:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3911:    template<class _Yp>
        -: 3912:        shared_ptr(auto_ptr<_Yp>&& __r,
        -: 3913:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3914:#else
        -: 3915:    template<class _Yp>
        -: 3916:        shared_ptr(auto_ptr<_Yp> __r,
        -: 3917:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3918:#endif
        -: 3919:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3920:    template <class _Yp, class _Dp>
        -: 3921:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3922:                   typename enable_if
        -: 3923:                   <
        -: 3924:                       !is_lvalue_reference<_Dp>::value &&
        -: 3925:                       !is_array<_Yp>::value &&
        -: 3926:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3927:                       __nat
        -: 3928:                   >::type = __nat());
        -: 3929:    template <class _Yp, class _Dp>
        -: 3930:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3931:                   typename enable_if
        -: 3932:                   <
        -: 3933:                       is_lvalue_reference<_Dp>::value &&
        -: 3934:                       !is_array<_Yp>::value &&
        -: 3935:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3936:                       __nat
        -: 3937:                   >::type = __nat());
        -: 3938:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3939:    template <class _Yp, class _Dp>
        -: 3940:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3941:                   typename enable_if
        -: 3942:                   <
        -: 3943:                       !is_lvalue_reference<_Dp>::value &&
        -: 3944:                       !is_array<_Yp>::value &&
        -: 3945:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3946:                       __nat
        -: 3947:                   >::type = __nat());
        -: 3948:    template <class _Yp, class _Dp>
        -: 3949:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3950:                   typename enable_if
        -: 3951:                   <
        -: 3952:                       is_lvalue_reference<_Dp>::value &&
        -: 3953:                       !is_array<_Yp>::value &&
        -: 3954:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3955:                       __nat
        -: 3956:                   >::type = __nat());
        -: 3957:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3958:
        -: 3959:    ~shared_ptr();
        -: 3960:
        -: 3961:    _LIBCPP_INLINE_VISIBILITY
        -: 3962:    shared_ptr& operator=(const shared_ptr& __r) _NOEXCEPT;
        -: 3963:    template<class _Yp>
        -: 3964:        typename enable_if
        -: 3965:        <
        -: 3966:            is_convertible<_Yp*, element_type*>::value,
        -: 3967:            shared_ptr&
        -: 3968:        >::type
        -: 3969:        _LIBCPP_INLINE_VISIBILITY
        -: 3970:        operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT;
        -: 3971:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3972:    _LIBCPP_INLINE_VISIBILITY
        -: 3973:    shared_ptr& operator=(shared_ptr&& __r) _NOEXCEPT;
        -: 3974:    template<class _Yp>
        -: 3975:        typename enable_if
        -: 3976:        <
        -: 3977:            is_convertible<_Yp*, element_type*>::value,
        -: 3978:            shared_ptr<_Tp>&
        -: 3979:        >::type
        -: 3980:        _LIBCPP_INLINE_VISIBILITY
        -: 3981:        operator=(shared_ptr<_Yp>&& __r);
        -: 3982:    template<class _Yp>
        -: 3983:        typename enable_if
        -: 3984:        <
        -: 3985:            !is_array<_Yp>::value &&
        -: 3986:            is_convertible<_Yp*, element_type*>::value,
        -: 3987:            shared_ptr
        -: 3988:        >::type&
        -: 3989:        _LIBCPP_INLINE_VISIBILITY
        -: 3990:        operator=(auto_ptr<_Yp>&& __r);
        -: 3991:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3992:    template<class _Yp>
        -: 3993:        typename enable_if
        -: 3994:        <
        -: 3995:            !is_array<_Yp>::value &&
        -: 3996:            is_convertible<_Yp*, element_type*>::value,
        -: 3997:            shared_ptr&
        -: 3998:        >::type
        -: 3999:        operator=(auto_ptr<_Yp> __r);
        -: 4000:#endif
        -: 4001:    template <class _Yp, class _Dp>
        -: 4002:        typename enable_if
        -: 4003:        <
        -: 4004:            !is_array<_Yp>::value &&
        -: 4005:            is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4006:            shared_ptr&
        -: 4007:        >::type
        -: 4008:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4009:        _LIBCPP_INLINE_VISIBILITY
        -: 4010:        operator=(unique_ptr<_Yp, _Dp>&& __r);
        -: 4011:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4012:        operator=(unique_ptr<_Yp, _Dp> __r);
        -: 4013:#endif
        -: 4014:
        -: 4015:    _LIBCPP_INLINE_VISIBILITY
        -: 4016:    void swap(shared_ptr& __r) _NOEXCEPT;
        -: 4017:    _LIBCPP_INLINE_VISIBILITY
        -: 4018:    void reset() _NOEXCEPT;
        -: 4019:    template<class _Yp>
        -: 4020:        typename enable_if
        -: 4021:        <
        -: 4022:            is_convertible<_Yp*, element_type*>::value,
        -: 4023:            void
        -: 4024:        >::type
        -: 4025:        _LIBCPP_INLINE_VISIBILITY
        -: 4026:        reset(_Yp* __p);
        -: 4027:    template<class _Yp, class _Dp>
        -: 4028:        typename enable_if
        -: 4029:        <
        -: 4030:            is_convertible<_Yp*, element_type*>::value,
        -: 4031:            void
        -: 4032:        >::type
        -: 4033:        _LIBCPP_INLINE_VISIBILITY
        -: 4034:        reset(_Yp* __p, _Dp __d);
        -: 4035:    template<class _Yp, class _Dp, class _Alloc>
        -: 4036:        typename enable_if
        -: 4037:        <
        -: 4038:            is_convertible<_Yp*, element_type*>::value,
        -: 4039:            void
        -: 4040:        >::type
        -: 4041:        _LIBCPP_INLINE_VISIBILITY
        -: 4042:        reset(_Yp* __p, _Dp __d, _Alloc __a);
        -: 4043:
        -: 4044:    _LIBCPP_INLINE_VISIBILITY
        -: 4045:    element_type* get() const _NOEXCEPT {return __ptr_;}
        -: 4046:    _LIBCPP_INLINE_VISIBILITY
        -: 4047:    typename add_lvalue_reference<element_type>::type operator*() const _NOEXCEPT
        -: 4048:        {return *__ptr_;}
        -: 4049:    _LIBCPP_INLINE_VISIBILITY
        -: 4050:    element_type* operator->() const _NOEXCEPT {return __ptr_;}
        -: 4051:    _LIBCPP_INLINE_VISIBILITY
        -: 4052:    long use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 4053:    _LIBCPP_INLINE_VISIBILITY
        -: 4054:    bool unique() const _NOEXCEPT {return use_count() == 1;}
        -: 4055:    _LIBCPP_INLINE_VISIBILITY
        -: 4056:    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return get() != 0;}
        -: 4057:    template <class _Up>
        -: 4058:        _LIBCPP_INLINE_VISIBILITY
        -: 4059:        bool owner_before(shared_ptr<_Up> const& __p) const
        -: 4060:        {return __cntrl_ < __p.__cntrl_;}
        -: 4061:    template <class _Up>
        -: 4062:        _LIBCPP_INLINE_VISIBILITY
        -: 4063:        bool owner_before(weak_ptr<_Up> const& __p) const
        -: 4064:        {return __cntrl_ < __p.__cntrl_;}
        -: 4065:    _LIBCPP_INLINE_VISIBILITY
        -: 4066:    bool
        -: 4067:    __owner_equivalent(const shared_ptr& __p) const
        -: 4068:        {return __cntrl_ == __p.__cntrl_;}
        -: 4069:
        -: 4070:#ifndef _LIBCPP_NO_RTTI
        -: 4071:    template <class _Dp>
        -: 4072:        _LIBCPP_INLINE_VISIBILITY
        -: 4073:        _Dp* __get_deleter() const _NOEXCEPT
        -: 4074:            {return (_Dp*)(__cntrl_ ? __cntrl_->__get_deleter(typeid(_Dp)) : 0);}
        -: 4075:#endif  // _LIBCPP_NO_RTTI
        -: 4076:
        -: 4077:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4078:
        -: 4079:    template<class ..._Args>
        -: 4080:        static
        -: 4081:        shared_ptr<_Tp>
        -: 4082:        make_shared(_Args&& ...__args);
        -: 4083:
        -: 4084:    template<class _Alloc, class ..._Args>
        -: 4085:        static
        -: 4086:        shared_ptr<_Tp>
        -: 4087:        allocate_shared(const _Alloc& __a, _Args&& ...__args);
        -: 4088:
        -: 4089:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4090:
        -: 4091:    static shared_ptr<_Tp> make_shared();
        -: 4092:
        -: 4093:    template<class _A0>
        -: 4094:        static shared_ptr<_Tp> make_shared(_A0&);
        -: 4095:
        -: 4096:    template<class _A0, class _A1>
        -: 4097:        static shared_ptr<_Tp> make_shared(_A0&, _A1&);
        -: 4098:
        -: 4099:    template<class _A0, class _A1, class _A2>
        -: 4100:        static shared_ptr<_Tp> make_shared(_A0&, _A1&, _A2&);
        -: 4101:
        -: 4102:    template<class _Alloc>
        -: 4103:        static shared_ptr<_Tp>
        -: 4104:        allocate_shared(const _Alloc& __a);
        -: 4105:
        -: 4106:    template<class _Alloc, class _A0>
        -: 4107:        static shared_ptr<_Tp>
        -: 4108:        allocate_shared(const _Alloc& __a, _A0& __a0);
        -: 4109:
        -: 4110:    template<class _Alloc, class _A0, class _A1>
        -: 4111:        static shared_ptr<_Tp>
        -: 4112:        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1);
        -: 4113:
        -: 4114:    template<class _Alloc, class _A0, class _A1, class _A2>
        -: 4115:        static shared_ptr<_Tp>
        -: 4116:        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2);
        -: 4117:
        -: 4118:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4119:
        -: 4120:private:
        -: 4121:
        -: 4122:    template <class _Yp, class _OrigPtr>
        -: 4123:        _LIBCPP_INLINE_VISIBILITY
        -: 4124:        void
        -: 4125:        __enable_weak_this(const enable_shared_from_this<_Yp>* __e,
        -: 4126:                           _OrigPtr* __ptr) _NOEXCEPT
        -: 4127:        {
        -: 4128:            typedef typename remove_cv<_Yp>::type _RawYp;
        -: 4129:            if (__e)
        -: 4130:            {
        -: 4131:                __e->__weak_this_ = shared_ptr<_RawYp>(*this,
        -: 4132:                    const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
        -: 4133:            }
        -: 4134:        }
        -: 4135:
        -: 4136:    _LIBCPP_INLINE_VISIBILITY
        -: 4137:    void __enable_weak_this(const volatile void*, const volatile void*) _NOEXCEPT {}
        -: 4138:
        -: 4139:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY shared_ptr;
        -: 4140:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 4141:};
        -: 4142:
        -: 4143:template<class _Tp>
        -: 4144:inline
        -: 4145:_LIBCPP_CONSTEXPR
        -: 4146:shared_ptr<_Tp>::shared_ptr() _NOEXCEPT
        -: 4147:    : __ptr_(0),
        -: 4148:      __cntrl_(0)
        -: 4149:{
        -: 4150:}
        -: 4151:
        -: 4152:template<class _Tp>
        -: 4153:inline
        -: 4154:_LIBCPP_CONSTEXPR
        -: 4155:shared_ptr<_Tp>::shared_ptr(nullptr_t) _NOEXCEPT
        -: 4156:    : __ptr_(0),
        -: 4157:      __cntrl_(0)
        -: 4158:{
        -: 4159:}
        -: 4160:
        -: 4161:template<class _Tp>
        -: 4162:template<class _Yp>
        -: 4163:shared_ptr<_Tp>::shared_ptr(_Yp* __p,
        -: 4164:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4165:    : __ptr_(__p)
        -: 4166:{
        -: 4167:    unique_ptr<_Yp> __hold(__p);
        -: 4168:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 4169:    __cntrl_ = new _CntrlBlk(__p, default_delete<_Yp>(), allocator<_Yp>());
        -: 4170:    __hold.release();
        -: 4171:    __enable_weak_this(__p, __p);
        -: 4172:}
        -: 4173:
        -: 4174:template<class _Tp>
        -: 4175:template<class _Yp, class _Dp>
        -: 4176:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d,
        -: 4177:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4178:    : __ptr_(__p)
        -: 4179:{
        -: 4180:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4181:    try
        -: 4182:    {
        -: 4183:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4184:        typedef __shared_ptr_pointer<_Yp*, _Dp, allocator<_Yp> > _CntrlBlk;
        -: 4185:        __cntrl_ = new _CntrlBlk(__p, __d, allocator<_Yp>());
        -: 4186:        __enable_weak_this(__p, __p);
        -: 4187:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4188:    }
        -: 4189:    catch (...)
        -: 4190:    {
        -: 4191:        __d(__p);
        -: 4192:        throw;
        -: 4193:    }
        -: 4194:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4195:}
        -: 4196:
        -: 4197:template<class _Tp>
        -: 4198:template<class _Dp>
        -: 4199:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d)
        -: 4200:    : __ptr_(0)
        -: 4201:{
        -: 4202:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4203:    try
        -: 4204:    {
        -: 4205:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4206:        typedef __shared_ptr_pointer<nullptr_t, _Dp, allocator<_Tp> > _CntrlBlk;
        -: 4207:        __cntrl_ = new _CntrlBlk(__p, __d, allocator<_Tp>());
        -: 4208:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4209:    }
        -: 4210:    catch (...)
        -: 4211:    {
        -: 4212:        __d(__p);
        -: 4213:        throw;
        -: 4214:    }
        -: 4215:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4216:}
        -: 4217:
        -: 4218:template<class _Tp>
        -: 4219:template<class _Yp, class _Dp, class _Alloc>
        -: 4220:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 4221:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4222:    : __ptr_(__p)
        -: 4223:{
        -: 4224:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4225:    try
        -: 4226:    {
        -: 4227:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4228:        typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
        -: 4229:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4230:        typedef __allocator_destructor<_A2> _D2;
        -: 4231:        _A2 __a2(__a);
        -: 4232:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4233:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4234:            _CntrlBlk(__p, __d, __a);
        -: 4235:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4236:        __enable_weak_this(__p, __p);
        -: 4237:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4238:    }
        -: 4239:    catch (...)
        -: 4240:    {
        -: 4241:        __d(__p);
        -: 4242:        throw;
        -: 4243:    }
        -: 4244:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4245:}
        -: 4246:
        -: 4247:template<class _Tp>
        -: 4248:template<class _Dp, class _Alloc>
        -: 4249:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)
        -: 4250:    : __ptr_(0)
        -: 4251:{
        -: 4252:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4253:    try
        -: 4254:    {
        -: 4255:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4256:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
        -: 4257:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4258:        typedef __allocator_destructor<_A2> _D2;
        -: 4259:        _A2 __a2(__a);
        -: 4260:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4261:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4262:            _CntrlBlk(__p, __d, __a);
        -: 4263:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4264:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4265:    }
        -: 4266:    catch (...)
        -: 4267:    {
        -: 4268:        __d(__p);
        -: 4269:        throw;
        -: 4270:    }
        -: 4271:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4272:}
        -: 4273:
        -: 4274:template<class _Tp>
        -: 4275:template<class _Yp>
        -: 4276:inline
        -: 4277:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT
        -: 4278:    : __ptr_(__p),
        -: 4279:      __cntrl_(__r.__cntrl_)
        -: 4280:{
        -: 4281:    if (__cntrl_)
        -: 4282:        __cntrl_->__add_shared();
        -: 4283:}
        -: 4284:
        -: 4285:template<class _Tp>
        -: 4286:inline
        -: 4287:shared_ptr<_Tp>::shared_ptr(const shared_ptr& __r) _NOEXCEPT
        -: 4288:    : __ptr_(__r.__ptr_),
        -: 4289:      __cntrl_(__r.__cntrl_)
        -: 4290:{
        -: 4291:    if (__cntrl_)
        -: 4292:        __cntrl_->__add_shared();
        -: 4293:}
        -: 4294:
        -: 4295:template<class _Tp>
        -: 4296:template<class _Yp>
        -: 4297:inline
        -: 4298:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r,
        -: 4299:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 4300:         _NOEXCEPT
        -: 4301:    : __ptr_(__r.__ptr_),
        -: 4302:      __cntrl_(__r.__cntrl_)
        -: 4303:{
        -: 4304:    if (__cntrl_)
        -: 4305:        __cntrl_->__add_shared();
        -: 4306:}
        -: 4307:
        -: 4308:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4309:
        -: 4310:template<class _Tp>
        -: 4311:inline
        -: 4312:shared_ptr<_Tp>::shared_ptr(shared_ptr&& __r) _NOEXCEPT
        -: 4313:    : __ptr_(__r.__ptr_),
        -: 4314:      __cntrl_(__r.__cntrl_)
        -: 4315:{
        -: 4316:    __r.__ptr_ = 0;
        -: 4317:    __r.__cntrl_ = 0;
        -: 4318:}
        -: 4319:
        -: 4320:template<class _Tp>
        -: 4321:template<class _Yp>
        -: 4322:inline
        -: 4323:shared_ptr<_Tp>::shared_ptr(shared_ptr<_Yp>&& __r,
        -: 4324:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 4325:         _NOEXCEPT
        -: 4326:    : __ptr_(__r.__ptr_),
        -: 4327:      __cntrl_(__r.__cntrl_)
        -: 4328:{
        -: 4329:    __r.__ptr_ = 0;
        -: 4330:    __r.__cntrl_ = 0;
        -: 4331:}
        -: 4332:
        -: 4333:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4334:
        -: 4335:template<class _Tp>
        -: 4336:template<class _Yp>
        -: 4337:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4338:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp>&& __r,
        -: 4339:#else
        -: 4340:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp> __r,
        -: 4341:#endif
        -: 4342:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4343:    : __ptr_(__r.get())
        -: 4344:{
        -: 4345:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 4346:    __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());
        -: 4347:    __enable_weak_this(__r.get(), __r.get());
        -: 4348:    __r.release();
        -: 4349:}
        -: 4350:
        -: 4351:template<class _Tp>
        -: 4352:template <class _Yp, class _Dp>
        -: 4353:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4354:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4355:#else
        -: 4356:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4357:#endif
        -: 4358:                            typename enable_if
        -: 4359:                            <
        -: 4360:                                !is_lvalue_reference<_Dp>::value &&
        -: 4361:                                !is_array<_Yp>::value &&
        -: 4362:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4363:                                __nat
        -: 4364:                            >::type)
        -: 4365:    : __ptr_(__r.get())
        -: 4366:{
        -: 4367:#if _LIBCPP_STD_VER > 11
        -: 4368:    if (__ptr_ == nullptr)
        -: 4369:        __cntrl_ = nullptr;
        -: 4370:    else
        -: 4371:#endif
        -: 4372:    {
        -: 4373:        typedef __shared_ptr_pointer<_Yp*, _Dp, allocator<_Yp> > _CntrlBlk;
        -: 4374:        __cntrl_ = new _CntrlBlk(__r.get(), __r.get_deleter(), allocator<_Yp>());
        -: 4375:        __enable_weak_this(__r.get(), __r.get());
        -: 4376:    }
        -: 4377:    __r.release();
        -: 4378:}
        -: 4379:
        -: 4380:template<class _Tp>
        -: 4381:template <class _Yp, class _Dp>
        -: 4382:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4383:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4384:#else
        -: 4385:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4386:#endif
        -: 4387:                            typename enable_if
        -: 4388:                            <
        -: 4389:                                is_lvalue_reference<_Dp>::value &&
        -: 4390:                                !is_array<_Yp>::value &&
        -: 4391:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4392:                                __nat
        -: 4393:                            >::type)
        -: 4394:    : __ptr_(__r.get())
        -: 4395:{
        -: 4396:#if _LIBCPP_STD_VER > 11
        -: 4397:    if (__ptr_ == nullptr)
        -: 4398:        __cntrl_ = nullptr;
        -: 4399:    else
        -: 4400:#endif
        -: 4401:    {
        -: 4402:        typedef __shared_ptr_pointer<_Yp*,
        -: 4403:                                     reference_wrapper<typename remove_reference<_Dp>::type>,
        -: 4404:                                     allocator<_Yp> > _CntrlBlk;
        -: 4405:        __cntrl_ = new _CntrlBlk(__r.get(), ref(__r.get_deleter()), allocator<_Yp>());
        -: 4406:        __enable_weak_this(__r.get(), __r.get());
        -: 4407:    }
        -: 4408:    __r.release();
        -: 4409:}
        -: 4410:
        -: 4411:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4412:
        -: 4413:template<class _Tp>
        -: 4414:template<class ..._Args>
        -: 4415:shared_ptr<_Tp>
        -: 4416:shared_ptr<_Tp>::make_shared(_Args&& ...__args)
        -: 4417:{
        -: 4418:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4419:    typedef allocator<_CntrlBlk> _A2;
        -: 4420:    typedef __allocator_destructor<_A2> _D2;
        -: 4421:    _A2 __a2;
        -: 4422:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4423:    ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...);
        -: 4424:    shared_ptr<_Tp> __r;
        -: 4425:    __r.__ptr_ = __hold2.get()->get();
        -: 4426:    __r.__cntrl_ = __hold2.release();
        -: 4427:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4428:    return __r;
        -: 4429:}
        -: 4430:
        -: 4431:template<class _Tp>
        -: 4432:template<class _Alloc, class ..._Args>
        -: 4433:shared_ptr<_Tp>
        -: 4434:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4435:{
        -: 4436:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4437:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4438:    typedef __allocator_destructor<_A2> _D2;
        -: 4439:    _A2 __a2(__a);
        -: 4440:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4441:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4442:        _CntrlBlk(__a, _VSTD::forward<_Args>(__args)...);
        -: 4443:    shared_ptr<_Tp> __r;
        -: 4444:    __r.__ptr_ = __hold2.get()->get();
        -: 4445:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4446:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4447:    return __r;
        -: 4448:}
        -: 4449:
        -: 4450:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4451:
        -: 4452:template<class _Tp>
        -: 4453:shared_ptr<_Tp>
        -: 4454:shared_ptr<_Tp>::make_shared()
        -: 4455:{
        -: 4456:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4457:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4458:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4459:    _Alloc2 __alloc2;
        -: 4460:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4461:    ::new(__hold2.get()) _CntrlBlk(__alloc2);
        -: 4462:    shared_ptr<_Tp> __r;
        -: 4463:    __r.__ptr_ = __hold2.get()->get();
        -: 4464:    __r.__cntrl_ = __hold2.release();
        -: 4465:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4466:    return __r;
        -: 4467:}
        -: 4468:
        -: 4469:template<class _Tp>
        -: 4470:template<class _A0>
        -: 4471:shared_ptr<_Tp>
        -: 4472:shared_ptr<_Tp>::make_shared(_A0& __a0)
        -: 4473:{
        -: 4474:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4475:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4476:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4477:    _Alloc2 __alloc2;
        -: 4478:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4479:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0);
        -: 4480:    shared_ptr<_Tp> __r;
        -: 4481:    __r.__ptr_ = __hold2.get()->get();
        -: 4482:    __r.__cntrl_ = __hold2.release();
        -: 4483:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4484:    return __r;
        -: 4485:}
        -: 4486:
        -: 4487:template<class _Tp>
        -: 4488:template<class _A0, class _A1>
        -: 4489:shared_ptr<_Tp>
        -: 4490:shared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1)
        -: 4491:{
        -: 4492:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4493:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4494:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4495:    _Alloc2 __alloc2;
        -: 4496:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4497:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1);
        -: 4498:    shared_ptr<_Tp> __r;
        -: 4499:    __r.__ptr_ = __hold2.get()->get();
        -: 4500:    __r.__cntrl_ = __hold2.release();
        -: 4501:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4502:    return __r;
        -: 4503:}
        -: 4504:
        -: 4505:template<class _Tp>
        -: 4506:template<class _A0, class _A1, class _A2>
        -: 4507:shared_ptr<_Tp>
        -: 4508:shared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1, _A2& __a2)
        -: 4509:{
        -: 4510:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4511:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4512:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4513:    _Alloc2 __alloc2;
        -: 4514:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4515:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1, __a2);
        -: 4516:    shared_ptr<_Tp> __r;
        -: 4517:    __r.__ptr_ = __hold2.get()->get();
        -: 4518:    __r.__cntrl_ = __hold2.release();
        -: 4519:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4520:    return __r;
        -: 4521:}
        -: 4522:
        -: 4523:template<class _Tp>
        -: 4524:template<class _Alloc>
        -: 4525:shared_ptr<_Tp>
        -: 4526:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a)
        -: 4527:{
        -: 4528:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4529:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4530:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4531:    _Alloc2 __alloc2(__a);
        -: 4532:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4533:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4534:        _CntrlBlk(__a);
        -: 4535:    shared_ptr<_Tp> __r;
        -: 4536:    __r.__ptr_ = __hold2.get()->get();
        -: 4537:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4538:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4539:    return __r;
        -: 4540:}
        -: 4541:
        -: 4542:template<class _Tp>
        -: 4543:template<class _Alloc, class _A0>
        -: 4544:shared_ptr<_Tp>
        -: 4545:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0)
        -: 4546:{
        -: 4547:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4548:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4549:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4550:    _Alloc2 __alloc2(__a);
        -: 4551:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4552:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4553:        _CntrlBlk(__a, __a0);
        -: 4554:    shared_ptr<_Tp> __r;
        -: 4555:    __r.__ptr_ = __hold2.get()->get();
        -: 4556:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4557:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4558:    return __r;
        -: 4559:}
        -: 4560:
        -: 4561:template<class _Tp>
        -: 4562:template<class _Alloc, class _A0, class _A1>
        -: 4563:shared_ptr<_Tp>
        -: 4564:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)
        -: 4565:{
        -: 4566:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4567:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4568:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4569:    _Alloc2 __alloc2(__a);
        -: 4570:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4571:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4572:        _CntrlBlk(__a, __a0, __a1);
        -: 4573:    shared_ptr<_Tp> __r;
        -: 4574:    __r.__ptr_ = __hold2.get()->get();
        -: 4575:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4576:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4577:    return __r;
        -: 4578:}
        -: 4579:
        -: 4580:template<class _Tp>
        -: 4581:template<class _Alloc, class _A0, class _A1, class _A2>
        -: 4582:shared_ptr<_Tp>
        -: 4583:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 4584:{
        -: 4585:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4586:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4587:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4588:    _Alloc2 __alloc2(__a);
        -: 4589:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4590:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4591:        _CntrlBlk(__a, __a0, __a1, __a2);
        -: 4592:    shared_ptr<_Tp> __r;
        -: 4593:    __r.__ptr_ = __hold2.get()->get();
        -: 4594:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4595:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4596:    return __r;
        -: 4597:}
        -: 4598:
        -: 4599:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4600:
        -: 4601:template<class _Tp>
        -: 4602:shared_ptr<_Tp>::~shared_ptr()
        -: 4603:{
        -: 4604:    if (__cntrl_)
        -: 4605:        __cntrl_->__release_shared();
        -: 4606:}
        -: 4607:
        -: 4608:template<class _Tp>
        -: 4609:inline
        -: 4610:shared_ptr<_Tp>&
        -: 4611:shared_ptr<_Tp>::operator=(const shared_ptr& __r) _NOEXCEPT
        -: 4612:{
        -: 4613:    shared_ptr(__r).swap(*this);
        -: 4614:    return *this;
        -: 4615:}
        -: 4616:
        -: 4617:template<class _Tp>
        -: 4618:template<class _Yp>
        -: 4619:inline
        -: 4620:typename enable_if
        -: 4621:<
        -: 4622:    is_convertible<_Yp*, _Tp*>::value,
        -: 4623:    shared_ptr<_Tp>&
        -: 4624:>::type
        -: 4625:shared_ptr<_Tp>::operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -: 4626:{
        -: 4627:    shared_ptr(__r).swap(*this);
        -: 4628:    return *this;
        -: 4629:}
        -: 4630:
        -: 4631:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4632:
        -: 4633:template<class _Tp>
        -: 4634:inline
        -: 4635:shared_ptr<_Tp>&
        -: 4636:shared_ptr<_Tp>::operator=(shared_ptr&& __r) _NOEXCEPT
        -: 4637:{
        -: 4638:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4639:    return *this;
        -: 4640:}
        -: 4641:
        -: 4642:template<class _Tp>
        -: 4643:template<class _Yp>
        -: 4644:inline
        -: 4645:typename enable_if
        -: 4646:<
        -: 4647:    is_convertible<_Yp*, _Tp*>::value,
        -: 4648:    shared_ptr<_Tp>&
        -: 4649:>::type
        -: 4650:shared_ptr<_Tp>::operator=(shared_ptr<_Yp>&& __r)
        -: 4651:{
        -: 4652:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4653:    return *this;
        -: 4654:}
        -: 4655:
        -: 4656:template<class _Tp>
        -: 4657:template<class _Yp>
        -: 4658:inline
        -: 4659:typename enable_if
        -: 4660:<
        -: 4661:    !is_array<_Yp>::value &&
        -: 4662:    is_convertible<_Yp*, _Tp*>::value,
        -: 4663:    shared_ptr<_Tp>
        -: 4664:>::type&
        -: 4665:shared_ptr<_Tp>::operator=(auto_ptr<_Yp>&& __r)
        -: 4666:{
        -: 4667:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4668:    return *this;
        -: 4669:}
        -: 4670:
        -: 4671:template<class _Tp>
        -: 4672:template <class _Yp, class _Dp>
        -: 4673:inline
        -: 4674:typename enable_if
        -: 4675:<
        -: 4676:    !is_array<_Yp>::value &&
        -: 4677:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, _Tp*>::value,
        -: 4678:    shared_ptr<_Tp>&
        -: 4679:>::type
        -: 4680:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp>&& __r)
        -: 4681:{
        -: 4682:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4683:    return *this;
        -: 4684:}
        -: 4685:
        -: 4686:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4687:
        -: 4688:template<class _Tp>
        -: 4689:template<class _Yp>
        -: 4690:inline _LIBCPP_INLINE_VISIBILITY
        -: 4691:typename enable_if
        -: 4692:<
        -: 4693:    !is_array<_Yp>::value &&
        -: 4694:    is_convertible<_Yp*, _Tp*>::value,
        -: 4695:    shared_ptr<_Tp>&
        -: 4696:>::type
        -: 4697:shared_ptr<_Tp>::operator=(auto_ptr<_Yp> __r)
        -: 4698:{
        -: 4699:    shared_ptr(__r).swap(*this);
        -: 4700:    return *this;
        -: 4701:}
        -: 4702:
        -: 4703:template<class _Tp>
        -: 4704:template <class _Yp, class _Dp>
        -: 4705:inline _LIBCPP_INLINE_VISIBILITY
        -: 4706:typename enable_if
        -: 4707:<
        -: 4708:    !is_array<_Yp>::value &&
        -: 4709:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, _Tp*>::value,
        -: 4710:    shared_ptr<_Tp>&
        -: 4711:>::type
        -: 4712:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp> __r)
        -: 4713:{
        -: 4714:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4715:    return *this;
        -: 4716:}
        -: 4717:
        -: 4718:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4719:
        -: 4720:template<class _Tp>
        -: 4721:inline
        -: 4722:void
        -: 4723:shared_ptr<_Tp>::swap(shared_ptr& __r) _NOEXCEPT
        -: 4724:{
        -: 4725:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 4726:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 4727:}
        -: 4728:
        -: 4729:template<class _Tp>
        -: 4730:inline
        -: 4731:void
        -: 4732:shared_ptr<_Tp>::reset() _NOEXCEPT
        -: 4733:{
        -: 4734:    shared_ptr().swap(*this);
        -: 4735:}
        -: 4736:
        -: 4737:template<class _Tp>
        -: 4738:template<class _Yp>
        -: 4739:inline
        -: 4740:typename enable_if
        -: 4741:<
        -: 4742:    is_convertible<_Yp*, _Tp*>::value,
        -: 4743:    void
        -: 4744:>::type
        -: 4745:shared_ptr<_Tp>::reset(_Yp* __p)
        -: 4746:{
        -: 4747:    shared_ptr(__p).swap(*this);
        -: 4748:}
        -: 4749:
        -: 4750:template<class _Tp>
        -: 4751:template<class _Yp, class _Dp>
        -: 4752:inline
        -: 4753:typename enable_if
        -: 4754:<
        -: 4755:    is_convertible<_Yp*, _Tp*>::value,
        -: 4756:    void
        -: 4757:>::type
        -: 4758:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d)
        -: 4759:{
        -: 4760:    shared_ptr(__p, __d).swap(*this);
        -: 4761:}
        -: 4762:
        -: 4763:template<class _Tp>
        -: 4764:template<class _Yp, class _Dp, class _Alloc>
        -: 4765:inline
        -: 4766:typename enable_if
        -: 4767:<
        -: 4768:    is_convertible<_Yp*, _Tp*>::value,
        -: 4769:    void
        -: 4770:>::type
        -: 4771:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d, _Alloc __a)
        -: 4772:{
        -: 4773:    shared_ptr(__p, __d, __a).swap(*this);
        -: 4774:}
        -: 4775:
        -: 4776:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4777:
        -: 4778:template<class _Tp, class ..._Args>
        -: 4779:inline _LIBCPP_INLINE_VISIBILITY
        -: 4780:typename enable_if
        -: 4781:<
        -: 4782:    !is_array<_Tp>::value,
        -: 4783:    shared_ptr<_Tp>
        -: 4784:>::type
        -: 4785:make_shared(_Args&& ...__args)
        -: 4786:{
        -: 4787:    return shared_ptr<_Tp>::make_shared(_VSTD::forward<_Args>(__args)...);
        -: 4788:}
        -: 4789:
        -: 4790:template<class _Tp, class _Alloc, class ..._Args>
        -: 4791:inline _LIBCPP_INLINE_VISIBILITY
        -: 4792:typename enable_if
        -: 4793:<
        -: 4794:    !is_array<_Tp>::value,
        -: 4795:    shared_ptr<_Tp>
        -: 4796:>::type
        -: 4797:allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4798:{
        -: 4799:    return shared_ptr<_Tp>::allocate_shared(__a, _VSTD::forward<_Args>(__args)...);
        -: 4800:}
        -: 4801:
        -: 4802:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4803:
        -: 4804:template<class _Tp>
        -: 4805:inline _LIBCPP_INLINE_VISIBILITY
        -: 4806:shared_ptr<_Tp>
        -: 4807:make_shared()
        -: 4808:{
        -: 4809:    return shared_ptr<_Tp>::make_shared();
        -: 4810:}
        -: 4811:
        -: 4812:template<class _Tp, class _A0>
        -: 4813:inline _LIBCPP_INLINE_VISIBILITY
        -: 4814:shared_ptr<_Tp>
        -: 4815:make_shared(_A0& __a0)
        -: 4816:{
        -: 4817:    return shared_ptr<_Tp>::make_shared(__a0);
        -: 4818:}
        -: 4819:
        -: 4820:template<class _Tp, class _A0, class _A1>
        -: 4821:inline _LIBCPP_INLINE_VISIBILITY
        -: 4822:shared_ptr<_Tp>
        -: 4823:make_shared(_A0& __a0, _A1& __a1)
        -: 4824:{
        -: 4825:    return shared_ptr<_Tp>::make_shared(__a0, __a1);
        -: 4826:}
        -: 4827:
        -: 4828:template<class _Tp, class _A0, class _A1, class _A2>
        -: 4829:inline _LIBCPP_INLINE_VISIBILITY
        -: 4830:shared_ptr<_Tp>
        -: 4831:make_shared(_A0& __a0, _A1& __a1, _A2& __a2)
        -: 4832:{
        -: 4833:    return shared_ptr<_Tp>::make_shared(__a0, __a1, __a2);
        -: 4834:}
        -: 4835:
        -: 4836:template<class _Tp, class _Alloc>
        -: 4837:inline _LIBCPP_INLINE_VISIBILITY
        -: 4838:shared_ptr<_Tp>
        -: 4839:allocate_shared(const _Alloc& __a)
        -: 4840:{
        -: 4841:    return shared_ptr<_Tp>::allocate_shared(__a);
        -: 4842:}
        -: 4843:
        -: 4844:template<class _Tp, class _Alloc, class _A0>
        -: 4845:inline _LIBCPP_INLINE_VISIBILITY
        -: 4846:shared_ptr<_Tp>
        -: 4847:allocate_shared(const _Alloc& __a, _A0& __a0)
        -: 4848:{
        -: 4849:    return shared_ptr<_Tp>::allocate_shared(__a, __a0);
        -: 4850:}
        -: 4851:
        -: 4852:template<class _Tp, class _Alloc, class _A0, class _A1>
        -: 4853:inline _LIBCPP_INLINE_VISIBILITY
        -: 4854:shared_ptr<_Tp>
        -: 4855:allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)
        -: 4856:{
        -: 4857:    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1);
        -: 4858:}
        -: 4859:
        -: 4860:template<class _Tp, class _Alloc, class _A0, class _A1, class _A2>
        -: 4861:inline _LIBCPP_INLINE_VISIBILITY
        -: 4862:shared_ptr<_Tp>
        -: 4863:allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 4864:{
        -: 4865:    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1, __a2);
        -: 4866:}
        -: 4867:
        -: 4868:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4869:
        -: 4870:template<class _Tp, class _Up>
        -: 4871:inline _LIBCPP_INLINE_VISIBILITY
        -: 4872:bool
        -: 4873:operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4874:{
        -: 4875:    return __x.get() == __y.get();
        -: 4876:}
        -: 4877:
        -: 4878:template<class _Tp, class _Up>
        -: 4879:inline _LIBCPP_INLINE_VISIBILITY
        -: 4880:bool
        -: 4881:operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4882:{
        -: 4883:    return !(__x == __y);
        -: 4884:}
        -: 4885:
        -: 4886:template<class _Tp, class _Up>
        -: 4887:inline _LIBCPP_INLINE_VISIBILITY
        -: 4888:bool
        -: 4889:operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4890:{
        -: 4891:    typedef typename common_type<_Tp*, _Up*>::type _Vp;
        -: 4892:    return less<_Vp>()(__x.get(), __y.get());
        -: 4893:}
        -: 4894:
        -: 4895:template<class _Tp, class _Up>
        -: 4896:inline _LIBCPP_INLINE_VISIBILITY
        -: 4897:bool
        -: 4898:operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4899:{
        -: 4900:    return __y < __x;
        -: 4901:}
        -: 4902:
        -: 4903:template<class _Tp, class _Up>
        -: 4904:inline _LIBCPP_INLINE_VISIBILITY
        -: 4905:bool
        -: 4906:operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4907:{
        -: 4908:    return !(__y < __x);
        -: 4909:}
        -: 4910:
        -: 4911:template<class _Tp, class _Up>
        -: 4912:inline _LIBCPP_INLINE_VISIBILITY
        -: 4913:bool
        -: 4914:operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4915:{
        -: 4916:    return !(__x < __y);
        -: 4917:}
        -: 4918:
        -: 4919:template<class _Tp>
        -: 4920:inline _LIBCPP_INLINE_VISIBILITY
        -: 4921:bool
        -: 4922:operator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4923:{
        -: 4924:    return !__x;
        -: 4925:}
        -: 4926:
        -: 4927:template<class _Tp>
        -: 4928:inline _LIBCPP_INLINE_VISIBILITY
        -: 4929:bool
        -: 4930:operator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4931:{
        -: 4932:    return !__x;
        -: 4933:}
        -: 4934:
        -: 4935:template<class _Tp>
        -: 4936:inline _LIBCPP_INLINE_VISIBILITY
        -: 4937:bool
        -: 4938:operator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4939:{
        -: 4940:    return static_cast<bool>(__x);
        -: 4941:}
        -: 4942:
        -: 4943:template<class _Tp>
        -: 4944:inline _LIBCPP_INLINE_VISIBILITY
        -: 4945:bool
        -: 4946:operator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4947:{
        -: 4948:    return static_cast<bool>(__x);
        -: 4949:}
        -: 4950:
        -: 4951:template<class _Tp>
        -: 4952:inline _LIBCPP_INLINE_VISIBILITY
        -: 4953:bool
        -: 4954:operator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4955:{
        -: 4956:    return less<_Tp*>()(__x.get(), nullptr);
        -: 4957:}
        -: 4958:
        -: 4959:template<class _Tp>
        -: 4960:inline _LIBCPP_INLINE_VISIBILITY
        -: 4961:bool
        -: 4962:operator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4963:{
        -: 4964:    return less<_Tp*>()(nullptr, __x.get());
        -: 4965:}
        -: 4966:
        -: 4967:template<class _Tp>
        -: 4968:inline _LIBCPP_INLINE_VISIBILITY
        -: 4969:bool
        -: 4970:operator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4971:{
        -: 4972:    return nullptr < __x;
        -: 4973:}
        -: 4974:
        -: 4975:template<class _Tp>
        -: 4976:inline _LIBCPP_INLINE_VISIBILITY
        -: 4977:bool
        -: 4978:operator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4979:{
        -: 4980:    return __x < nullptr;
        -: 4981:}
        -: 4982:
        -: 4983:template<class _Tp>
        -: 4984:inline _LIBCPP_INLINE_VISIBILITY
        -: 4985:bool
        -: 4986:operator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4987:{
        -: 4988:    return !(nullptr < __x);
        -: 4989:}
        -: 4990:
        -: 4991:template<class _Tp>
        -: 4992:inline _LIBCPP_INLINE_VISIBILITY
        -: 4993:bool
        -: 4994:operator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4995:{
        -: 4996:    return !(__x < nullptr);
        -: 4997:}
        -: 4998:
        -: 4999:template<class _Tp>
        -: 5000:inline _LIBCPP_INLINE_VISIBILITY
        -: 5001:bool
        -: 5002:operator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 5003:{
        -: 5004:    return !(__x < nullptr);
        -: 5005:}
        -: 5006:
        -: 5007:template<class _Tp>
        -: 5008:inline _LIBCPP_INLINE_VISIBILITY
        -: 5009:bool
        -: 5010:operator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 5011:{
        -: 5012:    return !(nullptr < __x);
        -: 5013:}
        -: 5014:
        -: 5015:template<class _Tp>
        -: 5016:inline _LIBCPP_INLINE_VISIBILITY
        -: 5017:void
        -: 5018:swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT
        -: 5019:{
        -: 5020:    __x.swap(__y);
        -: 5021:}
        -: 5022:
        -: 5023:template<class _Tp, class _Up>
        -: 5024:inline _LIBCPP_INLINE_VISIBILITY
        -: 5025:typename enable_if
        -: 5026:<
        -: 5027:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 5028:    shared_ptr<_Tp>
        -: 5029:>::type
        -: 5030:static_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 5031:{
        -: 5032:    return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get()));
        -: 5033:}
        -: 5034:
        -: 5035:template<class _Tp, class _Up>
        -: 5036:inline _LIBCPP_INLINE_VISIBILITY
        -: 5037:typename enable_if
        -: 5038:<
        -: 5039:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 5040:    shared_ptr<_Tp>
        -: 5041:>::type
        -: 5042:dynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 5043:{
        -: 5044:    _Tp* __p = dynamic_cast<_Tp*>(__r.get());
        -: 5045:    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
        -: 5046:}
        -: 5047:
        -: 5048:template<class _Tp, class _Up>
        -: 5049:typename enable_if
        -: 5050:<
        -: 5051:    is_array<_Tp>::value == is_array<_Up>::value,
        -: 5052:    shared_ptr<_Tp>
        -: 5053:>::type
        -: 5054:const_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 5055:{
        -: 5056:    typedef typename remove_extent<_Tp>::type _RTp;
        -: 5057:    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
        -: 5058:}
        -: 5059:
        -: 5060:#ifndef _LIBCPP_NO_RTTI
        -: 5061:
        -: 5062:template<class _Dp, class _Tp>
        -: 5063:inline _LIBCPP_INLINE_VISIBILITY
        -: 5064:_Dp*
        -: 5065:get_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT
        -: 5066:{
        -: 5067:    return __p.template __get_deleter<_Dp>();
        -: 5068:}
        -: 5069:
        -: 5070:#endif  // _LIBCPP_NO_RTTI
        -: 5071:
        -: 5072:template<class _Tp>
        -: 5073:class _LIBCPP_TYPE_VIS_ONLY weak_ptr
        -: 5074:{
        -: 5075:public:
        -: 5076:    typedef _Tp element_type;
        -: 5077:private:
        -: 5078:    element_type*        __ptr_;
        -: 5079:    __shared_weak_count* __cntrl_;
        -: 5080:
        -: 5081:public:
        -: 5082:    _LIBCPP_INLINE_VISIBILITY
        -: 5083:    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;
        -: 5084:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(shared_ptr<_Yp> const& __r,
        -: 5085:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5086:                        _NOEXCEPT;
        -: 5087:    _LIBCPP_INLINE_VISIBILITY
        -: 5088:    weak_ptr(weak_ptr const& __r) _NOEXCEPT;
        -: 5089:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp> const& __r,
        -: 5090:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5091:                         _NOEXCEPT;
        -: 5092:
        -: 5093:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5094:    _LIBCPP_INLINE_VISIBILITY
        -: 5095:    weak_ptr(weak_ptr&& __r) _NOEXCEPT;
        -: 5096:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp>&& __r,
        -: 5097:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 5098:                         _NOEXCEPT;
        -: 5099:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5100:    ~weak_ptr();
        -: 5101:
        -: 5102:    _LIBCPP_INLINE_VISIBILITY
        -: 5103:    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;
        -: 5104:    template<class _Yp>
        -: 5105:        typename enable_if
        -: 5106:        <
        -: 5107:            is_convertible<_Yp*, element_type*>::value,
        -: 5108:            weak_ptr&
        -: 5109:        >::type
        -: 5110:        _LIBCPP_INLINE_VISIBILITY
        -: 5111:        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 5112:
        -: 5113:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5114:
        -: 5115:    _LIBCPP_INLINE_VISIBILITY
        -: 5116:    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;
        -: 5117:    template<class _Yp>
        -: 5118:        typename enable_if
        -: 5119:        <
        -: 5120:            is_convertible<_Yp*, element_type*>::value,
        -: 5121:            weak_ptr&
        -: 5122:        >::type
        -: 5123:        _LIBCPP_INLINE_VISIBILITY
        -: 5124:        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;
        -: 5125:
        -: 5126:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5127:
        -: 5128:    template<class _Yp>
        -: 5129:        typename enable_if
        -: 5130:        <
        -: 5131:            is_convertible<_Yp*, element_type*>::value,
        -: 5132:            weak_ptr&
        -: 5133:        >::type
        -: 5134:        _LIBCPP_INLINE_VISIBILITY
        -: 5135:        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 5136:
        -: 5137:    _LIBCPP_INLINE_VISIBILITY
        -: 5138:    void swap(weak_ptr& __r) _NOEXCEPT;
        -: 5139:    _LIBCPP_INLINE_VISIBILITY
        -: 5140:    void reset() _NOEXCEPT;
        -: 5141:
        -: 5142:    _LIBCPP_INLINE_VISIBILITY
        -: 5143:    long use_count() const _NOEXCEPT
        -: 5144:        {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 5145:    _LIBCPP_INLINE_VISIBILITY
        -: 5146:    bool expired() const _NOEXCEPT
        -: 5147:        {return __cntrl_ == 0 || __cntrl_->use_count() == 0;}
        -: 5148:    shared_ptr<_Tp> lock() const _NOEXCEPT;
        -: 5149:    template<class _Up>
        -: 5150:        _LIBCPP_INLINE_VISIBILITY
        -: 5151:        bool owner_before(const shared_ptr<_Up>& __r) const
        -: 5152:        {return __cntrl_ < __r.__cntrl_;}
        -: 5153:    template<class _Up>
        -: 5154:        _LIBCPP_INLINE_VISIBILITY
        -: 5155:        bool owner_before(const weak_ptr<_Up>& __r) const
        -: 5156:        {return __cntrl_ < __r.__cntrl_;}
        -: 5157:
        -: 5158:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 5159:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY shared_ptr;
        -: 5160:};
        -: 5161:
        -: 5162:template<class _Tp>
        -: 5163:inline
        -: 5164:_LIBCPP_CONSTEXPR
        -: 5165:weak_ptr<_Tp>::weak_ptr() _NOEXCEPT
        -: 5166:    : __ptr_(0),
        -: 5167:      __cntrl_(0)
        -: 5168:{
        -: 5169:}
        -: 5170:
        -: 5171:template<class _Tp>
        -: 5172:inline
        -: 5173:weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT
        -: 5174:    : __ptr_(__r.__ptr_),
        -: 5175:      __cntrl_(__r.__cntrl_)
        -: 5176:{
        -: 5177:    if (__cntrl_)
        -: 5178:        __cntrl_->__add_weak();
        -: 5179:}
        -: 5180:
        -: 5181:template<class _Tp>
        -: 5182:template<class _Yp>
        -: 5183:inline
        -: 5184:weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,
        -: 5185:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5186:                         _NOEXCEPT
        -: 5187:    : __ptr_(__r.__ptr_),
        -: 5188:      __cntrl_(__r.__cntrl_)
        -: 5189:{
        -: 5190:    if (__cntrl_)
        -: 5191:        __cntrl_->__add_weak();
        -: 5192:}
        -: 5193:
        -: 5194:template<class _Tp>
        -: 5195:template<class _Yp>
        -: 5196:inline
        -: 5197:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,
        -: 5198:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5199:         _NOEXCEPT
        -: 5200:    : __ptr_(__r.__ptr_),
        -: 5201:      __cntrl_(__r.__cntrl_)
        -: 5202:{
        -: 5203:    if (__cntrl_)
        -: 5204:        __cntrl_->__add_weak();
        -: 5205:}
        -: 5206:
        -: 5207:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5208:
        -: 5209:template<class _Tp>
        -: 5210:inline
        -: 5211:weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT
        -: 5212:    : __ptr_(__r.__ptr_),
        -: 5213:      __cntrl_(__r.__cntrl_)
        -: 5214:{
        -: 5215:    __r.__ptr_ = 0;
        -: 5216:    __r.__cntrl_ = 0;
        -: 5217:}
        -: 5218:
        -: 5219:template<class _Tp>
        -: 5220:template<class _Yp>
        -: 5221:inline
        -: 5222:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,
        -: 5223:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5224:         _NOEXCEPT
        -: 5225:    : __ptr_(__r.__ptr_),
        -: 5226:      __cntrl_(__r.__cntrl_)
        -: 5227:{
        -: 5228:    __r.__ptr_ = 0;
        -: 5229:    __r.__cntrl_ = 0;
        -: 5230:}
        -: 5231:
        -: 5232:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5233:
        -: 5234:template<class _Tp>
        -: 5235:weak_ptr<_Tp>::~weak_ptr()
        -: 5236:{
        -: 5237:    if (__cntrl_)
        -: 5238:        __cntrl_->__release_weak();
        -: 5239:}
        -: 5240:
        -: 5241:template<class _Tp>
        -: 5242:inline
        -: 5243:weak_ptr<_Tp>&
        -: 5244:weak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT
        -: 5245:{
        -: 5246:    weak_ptr(__r).swap(*this);
        -: 5247:    return *this;
        -: 5248:}
        -: 5249:
        -: 5250:template<class _Tp>
        -: 5251:template<class _Yp>
        -: 5252:inline
        -: 5253:typename enable_if
        -: 5254:<
        -: 5255:    is_convertible<_Yp*, _Tp*>::value,
        -: 5256:    weak_ptr<_Tp>&
        -: 5257:>::type
        -: 5258:weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT
        -: 5259:{
        -: 5260:    weak_ptr(__r).swap(*this);
        -: 5261:    return *this;
        -: 5262:}
        -: 5263:
        -: 5264:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5265:
        -: 5266:template<class _Tp>
        -: 5267:inline
        -: 5268:weak_ptr<_Tp>&
        -: 5269:weak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT
        -: 5270:{
        -: 5271:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 5272:    return *this;
        -: 5273:}
        -: 5274:
        -: 5275:template<class _Tp>
        -: 5276:template<class _Yp>
        -: 5277:inline
        -: 5278:typename enable_if
        -: 5279:<
        -: 5280:    is_convertible<_Yp*, _Tp*>::value,
        -: 5281:    weak_ptr<_Tp>&
        -: 5282:>::type
        -: 5283:weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT
        -: 5284:{
        -: 5285:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 5286:    return *this;
        -: 5287:}
        -: 5288:
        -: 5289:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5290:
        -: 5291:template<class _Tp>
        -: 5292:template<class _Yp>
        -: 5293:inline
        -: 5294:typename enable_if
        -: 5295:<
        -: 5296:    is_convertible<_Yp*, _Tp*>::value,
        -: 5297:    weak_ptr<_Tp>&
        -: 5298:>::type
        -: 5299:weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT
        -: 5300:{
        -: 5301:    weak_ptr(__r).swap(*this);
        -: 5302:    return *this;
        -: 5303:}
        -: 5304:
        -: 5305:template<class _Tp>
        -: 5306:inline
        -: 5307:void
        -: 5308:weak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT
        -: 5309:{
        -: 5310:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 5311:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 5312:}
        -: 5313:
        -: 5314:template<class _Tp>
        -: 5315:inline _LIBCPP_INLINE_VISIBILITY
        -: 5316:void
        -: 5317:swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT
        -: 5318:{
        -: 5319:    __x.swap(__y);
        -: 5320:}
        -: 5321:
        -: 5322:template<class _Tp>
        -: 5323:inline
        -: 5324:void
        -: 5325:weak_ptr<_Tp>::reset() _NOEXCEPT
        -: 5326:{
        -: 5327:    weak_ptr().swap(*this);
        -: 5328:}
        -: 5329:
        -: 5330:template<class _Tp>
        -: 5331:template<class _Yp>
        -: 5332:shared_ptr<_Tp>::shared_ptr(const weak_ptr<_Yp>& __r,
        -: 5333:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 5334:    : __ptr_(__r.__ptr_),
        -: 5335:      __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)
        -: 5336:{
        -: 5337:    if (__cntrl_ == 0)
        -: 5338:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 5339:        throw bad_weak_ptr();
        -: 5340:#else
        -: 5341:        assert(!"bad_weak_ptr");
        -: 5342:#endif
        -: 5343:}
        -: 5344:
        -: 5345:template<class _Tp>
        -: 5346:shared_ptr<_Tp>
        -: 5347:weak_ptr<_Tp>::lock() const _NOEXCEPT
        -: 5348:{
        -: 5349:    shared_ptr<_Tp> __r;
        -: 5350:    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
        -: 5351:    if (__r.__cntrl_)
        -: 5352:        __r.__ptr_ = __ptr_;
        -: 5353:    return __r;
        -: 5354:}
        -: 5355:
        -: 5356:template <class _Tp> struct owner_less;
        -: 5357:
        -: 5358:template <class _Tp>
        -: 5359:struct _LIBCPP_TYPE_VIS_ONLY owner_less<shared_ptr<_Tp> >
        -: 5360:    : binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>
        -: 5361:{
        -: 5362:    typedef bool result_type;
        -: 5363:    _LIBCPP_INLINE_VISIBILITY
        -: 5364:    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5365:        {return __x.owner_before(__y);}
        -: 5366:    _LIBCPP_INLINE_VISIBILITY
        -: 5367:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5368:        {return __x.owner_before(__y);}
        -: 5369:    _LIBCPP_INLINE_VISIBILITY
        -: 5370:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5371:        {return __x.owner_before(__y);}
        -: 5372:};
        -: 5373:
        -: 5374:template <class _Tp>
        -: 5375:struct _LIBCPP_TYPE_VIS_ONLY owner_less<weak_ptr<_Tp> >
        -: 5376:    : binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>
        -: 5377:{
        -: 5378:    typedef bool result_type;
        -: 5379:    _LIBCPP_INLINE_VISIBILITY
        -: 5380:    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5381:        {return __x.owner_before(__y);}
        -: 5382:    _LIBCPP_INLINE_VISIBILITY
        -: 5383:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5384:        {return __x.owner_before(__y);}
        -: 5385:    _LIBCPP_INLINE_VISIBILITY
        -: 5386:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5387:        {return __x.owner_before(__y);}
        -: 5388:};
        -: 5389:
        -: 5390:template<class _Tp>
        -: 5391:class _LIBCPP_TYPE_VIS_ONLY enable_shared_from_this
        -: 5392:{
        -: 5393:    mutable weak_ptr<_Tp> __weak_this_;
        -: 5394:protected:
        -: 5395:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 5396:    enable_shared_from_this() _NOEXCEPT {}
        -: 5397:    _LIBCPP_INLINE_VISIBILITY
        -: 5398:    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}
        -: 5399:    _LIBCPP_INLINE_VISIBILITY
        -: 5400:    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT
        -: 5401:        {return *this;}
        -: 5402:    _LIBCPP_INLINE_VISIBILITY
        -: 5403:    ~enable_shared_from_this() {}
        -: 5404:public:
        -: 5405:    _LIBCPP_INLINE_VISIBILITY
        -: 5406:    shared_ptr<_Tp> shared_from_this()
        -: 5407:        {return shared_ptr<_Tp>(__weak_this_);}
        -: 5408:    _LIBCPP_INLINE_VISIBILITY
        -: 5409:    shared_ptr<_Tp const> shared_from_this() const
        -: 5410:        {return shared_ptr<const _Tp>(__weak_this_);}
        -: 5411:
        -: 5412:    template <class _Up> friend class shared_ptr;
        -: 5413:};
        -: 5414:
        -: 5415:template <class _Tp>
        -: 5416:struct _LIBCPP_TYPE_VIS_ONLY hash<shared_ptr<_Tp> >
        -: 5417:{
        -: 5418:    typedef shared_ptr<_Tp>      argument_type;
        -: 5419:    typedef size_t               result_type;
        -: 5420:    _LIBCPP_INLINE_VISIBILITY
        -: 5421:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 5422:    {
        -: 5423:        return hash<_Tp*>()(__ptr.get());
        -: 5424:    }
        -: 5425:};
        -: 5426:
        -: 5427:template<class _CharT, class _Traits, class _Yp>
        -: 5428:inline _LIBCPP_INLINE_VISIBILITY
        -: 5429:basic_ostream<_CharT, _Traits>&
        -: 5430:operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
        -: 5431:
        -: 5432:#if __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 5433:
        -: 5434:class _LIBCPP_TYPE_VIS __sp_mut
        -: 5435:{
        -: 5436:    void* __lx;
        -: 5437:public:
        -: 5438:    void lock() _NOEXCEPT;
        -: 5439:    void unlock() _NOEXCEPT;
        -: 5440:
        -: 5441:private:
        -: 5442:    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;
        -: 5443:    __sp_mut(const __sp_mut&);
        -: 5444:    __sp_mut& operator=(const __sp_mut&);
        -: 5445:
        -: 5446:    friend _LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);
        -: 5447:};
        -: 5448:
        -: 5449:_LIBCPP_FUNC_VIS _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5450:__sp_mut& __get_sp_mut(const void*);
        -: 5451:
        -: 5452:template <class _Tp>
        -: 5453:inline _LIBCPP_INLINE_VISIBILITY
        -: 5454:bool
        -: 5455:atomic_is_lock_free(const shared_ptr<_Tp>*)
        -: 5456:{
        -: 5457:    return false;
        -: 5458:}
        -: 5459:
        -: 5460:template <class _Tp>
        -: 5461:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5462:shared_ptr<_Tp>
        -: 5463:atomic_load(const shared_ptr<_Tp>* __p)
        -: 5464:{
        -: 5465:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5466:    __m.lock();
        -: 5467:    shared_ptr<_Tp> __q = *__p;
        -: 5468:    __m.unlock();
        -: 5469:    return __q;
        -: 5470:}
        -: 5471:  
        -: 5472:template <class _Tp>
        -: 5473:inline _LIBCPP_INLINE_VISIBILITY
        -: 5474:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5475:shared_ptr<_Tp>
        -: 5476:atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
        -: 5477:{
        -: 5478:    return atomic_load(__p);
        -: 5479:}
        -: 5480:
        -: 5481:template <class _Tp>
        -: 5482:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5483:void
        -: 5484:atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5485:{
        -: 5486:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5487:    __m.lock();
        -: 5488:    __p->swap(__r);
        -: 5489:    __m.unlock();
        -: 5490:}
        -: 5491:
        -: 5492:template <class _Tp>
        -: 5493:inline _LIBCPP_INLINE_VISIBILITY
        -: 5494:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5495:void
        -: 5496:atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5497:{
        -: 5498:    atomic_store(__p, __r);
        -: 5499:}
        -: 5500:
        -: 5501:template <class _Tp>
        -: 5502:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5503:shared_ptr<_Tp>
        -: 5504:atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5505:{
        -: 5506:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5507:    __m.lock();
        -: 5508:    __p->swap(__r);
        -: 5509:    __m.unlock();
        -: 5510:    return __r;
        -: 5511:}
        -: 5512:  
        -: 5513:template <class _Tp>
        -: 5514:inline _LIBCPP_INLINE_VISIBILITY
        -: 5515:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5516:shared_ptr<_Tp>
        -: 5517:atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5518:{
        -: 5519:    return atomic_exchange(__p, __r);
        -: 5520:}
        -: 5521:
        -: 5522:template <class _Tp>
        -: 5523:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5524:bool
        -: 5525:atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5526:{
        -: 5527:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5528:    __m.lock();
        -: 5529:    if (__p->__owner_equivalent(*__v))
        -: 5530:    {
        -: 5531:        *__p = __w;
        -: 5532:        __m.unlock();
        -: 5533:        return true;
        -: 5534:    }
        -: 5535:    *__v = *__p;
        -: 5536:    __m.unlock();
        -: 5537:    return false;
        -: 5538:}
        -: 5539:
        -: 5540:template <class _Tp>
        -: 5541:inline _LIBCPP_INLINE_VISIBILITY
        -: 5542:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5543:bool
        -: 5544:atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5545:{
        -: 5546:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5547:}
        -: 5548:
        -: 5549:template <class _Tp>
        -: 5550:inline _LIBCPP_INLINE_VISIBILITY
        -: 5551:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5552:bool
        -: 5553:atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5554:                                        shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5555:{
        -: 5556:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5557:}
        -: 5558:
        -: 5559:template <class _Tp>
        -: 5560:inline _LIBCPP_INLINE_VISIBILITY
        -: 5561:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5562:bool
        -: 5563:atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5564:                                      shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5565:{
        -: 5566:    return atomic_compare_exchange_weak(__p, __v, __w);
        -: 5567:}
        -: 5568:
        -: 5569:#endif  // __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 5570:
        -: 5571://enum class
        -: 5572:struct _LIBCPP_TYPE_VIS pointer_safety
        -: 5573:{
        -: 5574:    enum __lx
        -: 5575:    {
        -: 5576:        relaxed,
        -: 5577:        preferred,
        -: 5578:        strict
        -: 5579:    };
        -: 5580:
        -: 5581:    __lx __v_;
        -: 5582:
        -: 5583:    _LIBCPP_INLINE_VISIBILITY
        -: 5584:    pointer_safety(__lx __v) : __v_(__v) {}
        -: 5585:    _LIBCPP_INLINE_VISIBILITY
        -: 5586:    operator int() const {return __v_;}
        -: 5587:};
        -: 5588:
        -: 5589:_LIBCPP_FUNC_VIS void declare_reachable(void* __p);
        -: 5590:_LIBCPP_FUNC_VIS void declare_no_pointers(char* __p, size_t __n);
        -: 5591:_LIBCPP_FUNC_VIS void undeclare_no_pointers(char* __p, size_t __n);
        -: 5592:_LIBCPP_FUNC_VIS pointer_safety get_pointer_safety() _NOEXCEPT;
        -: 5593:_LIBCPP_FUNC_VIS void* __undeclare_reachable(void* __p);
        -: 5594:
        -: 5595:template <class _Tp>
        -: 5596:inline _LIBCPP_INLINE_VISIBILITY
        -: 5597:_Tp*
        -: 5598:undeclare_reachable(_Tp* __p)
        -: 5599:{
        -: 5600:    return static_cast<_Tp*>(__undeclare_reachable(__p));
        -: 5601:}
        -: 5602:
        -: 5603:_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);
        -: 5604:
        -: 5605:// --- Helper for container swap --
        -: 5606:template <typename _Alloc>
        -: 5607:_LIBCPP_INLINE_VISIBILITY
        -: 5608:void __swap_allocator(_Alloc & __a1, _Alloc & __a2)
        -: 5609:#if _LIBCPP_STD_VER >= 14
        -: 5610:    _NOEXCEPT
        -: 5611:#else
        -: 5612:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 5613:#endif
        -: 5614:{
        -: 5615:    __swap_allocator(__a1, __a2, 
        -: 5616:      integral_constant<bool, _VSTD::allocator_traits<_Alloc>::propagate_on_container_swap::value>());
        -: 5617:}
        -: 5618:
        -: 5619:template <typename _Alloc>
        -: 5620:_LIBCPP_INLINE_VISIBILITY
        -: 5621:void __swap_allocator(_Alloc & __a1, _Alloc & __a2, true_type)
        -: 5622:#if _LIBCPP_STD_VER >= 14
        -: 5623:    _NOEXCEPT
        -: 5624:#else
        -: 5625:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 5626:#endif
        -: 5627:{
        -: 5628:    using _VSTD::swap;
        -: 5629:    swap(__a1, __a2);
        -: 5630:}
        -: 5631:
        -: 5632:template <typename _Alloc>
        -: 5633:_LIBCPP_INLINE_VISIBILITY
        -: 5634:void __swap_allocator(_Alloc &, _Alloc &, false_type) _NOEXCEPT {}
        -: 5635:
        -: 5636:
        -: 5637:_LIBCPP_END_NAMESPACE_STD
        -: 5638:
        -: 5639:#endif  // _LIBCPP_MEMORY
